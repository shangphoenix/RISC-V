/*======================================================================
/*文件名称：gpio.inc
/*功能概要：STM32L432RC GPIO底层驱动构件（汇编）程序头文件
/*版权所有：苏州大学嵌入式与物联网研究中心(sumcu.suda.edu.cn)
/*更新记录：2019-09-27 V2.0
/*======================================================================

/*端口号地址偏移量宏定义*/
/*.equ PTA_NUM,(0<<8)*/
.equ PTB_NUM,(1<<8)
.equ PTC_NUM,(2<<8)



/*GPIO引脚方向宏定义*/
.equ GPIO_IN,(0)
.equ GPIO_OUTPUT,(1)

/*GPIO引脚中断类型宏定义*/
.equ RISING_EDGE,(1)   /*上升沿触发*/
.equ FALLING_EDGE,(2)  /*下降沿触发*/
.equ DOUBLE_EDGE,(3)   /*双边沿触发*/

/*引脚控制寄存器基地址宏定义(只给出PORTA的引脚控制寄存器PCR0的地址，其他由此计算）*/

.equ RCC_APB2PCENR_BASE, 0x40021018   /*RCC->APB2PCENR寄存器基地址
/*GPIO寄存器基地址宏定义(只给出PORTA的输出寄存器PDOR的地址，其他由此计算）*/

.equ GPIOA_BASE,    0x40010800UL      /* GPIOA的基地址 */




.equ GPIOA_CFGLR,    0x40010800UL      /* CFGLR低位配置寄存器 */
.equ GPIOB_CFGLR,    0x40010C00UL      /* CFGLR低位配置寄存器 */
.equ GPIOC_CFGLR,    0x40011000UL      /* CFGLR低位配置寄存器 */

.equ GPIOC_BSHR,    0x40011010UL      /* CFGLR低位配置寄存器 */

.equ GPIOA_CFGHR,    0x40010804      /* CFGLR低位配置寄存器 */
.equ GPIOB_CFGHR,    0x40010C04      /* CFGLR低位配置寄存器 */
.equ GPIOC_CFGHR,    0x40011004      /* CFGLR低位配置寄存器 */

.equ GPIO_PINS_0,    0x00000002      /* Pin_0 8为输出模式 */
.equ GPIO_PINS_1,    0x00000020      /* Pin_1 9为输出模式 */
.equ GPIO_PINS_2,    0x00000200      /* Pin_2 10为输出模式 */
.equ GPIO_PINS_3,    0x00002000      /* Pin_3 11为输出模式 */
.equ GPIO_PINS_4,    0x00020000      /* Pin_4 12为输出模式 */
.equ GPIO_PINS_5,    0x00200000      /* Pin_5 13为输出模式 */
.equ GPIO_PINS_6,    0x02000000      /* Pin_6 14为输出模式 */
.equ GPIO_PINS_7,    0x20000000      /* Pin_7 15为输出模式 */

/* ======================================================================
/*  函数名称：gpio_init
/*  函数返回：无
/*  参数说明：r0:(端口号|(引脚号)),例:(PTB_NUM|(5u))表示B口5脚,头文件中有宏定义
/*           r1:引脚方向（0=输入,1=输出,可用引脚方向宏定义）
/*           r2:端口引脚初始状态（0=低电平，1=高电平）
/* 功能概要：初始化指定端口引脚作为GPIO引脚功能，并定义为输入或输出。若是输出，
/*           还指定初始状态是低电平或高电平
/* 备    注：端口x的每个引脚控制寄存器PORTx_PCRn的地址=PORT_PCR_BASE+x*0x1000+n*4
/*           其中:x=0~4，对应A~E;n=0~31
/*======================================================================

/*=====================================================================
/*函数名称：gpio_set
/*函数返回：无
/* 参数说明：r0:(端口号|(引脚号)),例:(PTB_NUM|(5u))表示B口5脚,头文件中有宏定义
/*           r1:希望设置的端口引脚状态（0=低电平，1=高电平）
/*功能概要：当指定引脚被定义为GPIO功能且为输出时，本函数设定引脚状态
/* 备    注：端口x的每个引脚控制寄存器PORTx_PCRn的地址=PORT_PCR_BASE+x*0x1000+n*4
/*           其中:x=0~4，对应A~E;n=0~31
/* =====================================================================

/*======================================================================*/
/* 函数名称：gpio_reverse
/* 函数返回：无
/* 参数说明：r0:(端口号)|(引脚号),例:(PTB_NUM|(5u))表示B口5脚,头文件中有宏定义
/* 功能概要：反转指定引脚状态
/*======================================================================*/

/*======================================================================
/* 函数名称：gpio_get
/* 函数返回：r2:指定端口引脚的状态（1或0）
/* 参数说明：r0:(端口号)|(引脚号),例:(PTB_NUM|(5u))表示B口5脚,头文件中有宏定义
/* 功能概要：当指定端口引脚被定义为GPIO功能且为输入时，本函数获取指定引脚状态
/*======================================================================



