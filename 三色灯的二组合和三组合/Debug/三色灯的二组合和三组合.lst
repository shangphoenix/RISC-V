
三色灯的二组合和三组合.elf:     file format elf32-littleriscv
三色灯的二组合和三组合.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0001c400

Program Header:
    LOAD off    0x00000000 vaddr 0x0001c000 paddr 0x0001c000 align 2**12
         filesz 0x00003618 memsz 0x00003618 flags r-x
    LOAD off    0x00004000 vaddr 0x20005000 paddr 0x0001f618 align 2**12
         filesz 0x000000b8 memsz 0x000000bc flags rw-
    LOAD off    0x00004800 vaddr 0x2001f800 paddr 0x2001f800 align 2**12
         filesz 0x00000000 memsz 0x00000800 flags rw-

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .init          00000038  0001c400  0001c400  00000400  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .vector        000001c8  0001c438  0001c438  00000438  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text          00003018  0001c600  0001c600  00000600  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini          00000000  0001f618  0001f618  000040b8  2**0  CONTENTS, ALLOC, LOAD, CODE
  4 .dalign        00000000  20005000  20005000  000040b8  2**0  CONTENTS
  5 .dlalign       00000000  0001f618  0001f618  000040b8  2**0  CONTENTS
  6 .data          000000b8  20005000  0001f618  00004000  2**4  CONTENTS, ALLOC, LOAD, DATA
  7 .bss           00000004  200050b8  0001f6d0  000040b8  2**2  ALLOC
  8 .stack         00000800  2001f800  2001f800  00004800  2**0  ALLOC
  9 .debug_info    000056a0  00000000  00000000  000040b8  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev  000010f3  00000000  00000000  00009758  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc     0000220f  00000000  00000000  0000a84b  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000288  00000000  00000000  0000ca60  2**3  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges  000001d8  00000000  00000000  0000cce8  2**3  CONTENTS, READONLY, DEBUGGING
 14 .debug_line    000051aa  00000000  00000000  0000cec0  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_str     000011ff  00000000  00000000  0001206a  2**0  CONTENTS, READONLY, DEBUGGING
 16 .comment       00000033  00000000  00000000  00013269  2**0  CONTENTS, READONLY
 17 .debug_frame   00000764  00000000  00000000  0001329c  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0001c400 l    d  .init	00000000 .init
0001c438 l    d  .vector	00000000 .vector
0001c600 l    d  .text	00000000 .text
0001f618 l    d  .fini	00000000 .fini
20005000 l    d  .dalign	00000000 .dalign
0001f618 l    d  .dlalign	00000000 .dlalign
20005000 l    d  .data	00000000 .data
200050b8 l    d  .bss	00000000 .bss
2001f800 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./obj/startup_ch32v30x.o
0001c438 l       .vector	00000000 _vector_base
00000000 l    df *ABS*	00000000 ./obj/main.o
00000100 l       *ABS*	00000000 PTB_NUM
00000200 l       *ABS*	00000000 PTC_NUM
00000000 l       *ABS*	00000000 GPIO_IN
00000001 l       *ABS*	00000000 GPIO_OUTPUT
00000001 l       *ABS*	00000000 RISING_EDGE
00000002 l       *ABS*	00000000 FALLING_EDGE
00000003 l       *ABS*	00000000 DOUBLE_EDGE
40021018 l       *ABS*	00000000 RCC_APB2PCENR_BASE
40010800 l       *ABS*	00000000 GPIOA_BASE
40010800 l       *ABS*	00000000 GPIOA_CFGLR
40010c00 l       *ABS*	00000000 GPIOB_CFGLR
40011000 l       *ABS*	00000000 GPIOC_CFGLR
40011010 l       *ABS*	00000000 GPIOC_BSHR
40010804 l       *ABS*	00000000 GPIOA_CFGHR
40010c04 l       *ABS*	00000000 GPIOB_CFGHR
40011004 l       *ABS*	00000000 GPIOC_CFGHR
00000002 l       *ABS*	00000000 GPIO_PINS_0
00000020 l       *ABS*	00000000 GPIO_PINS_1
00000200 l       *ABS*	00000000 GPIO_PINS_2
00002000 l       *ABS*	00000000 GPIO_PINS_3
00020000 l       *ABS*	00000000 GPIO_PINS_4
00200000 l       *ABS*	00000000 GPIO_PINS_5
02000000 l       *ABS*	00000000 GPIO_PINS_6
20000000 l       *ABS*	00000000 GPIO_PINS_7
00000200 l       *ABS*	00000000 LIGHT_RED
00000201 l       *ABS*	00000000 LIGHT_GREEN
00000202 l       *ABS*	00000000 LIGHT_BLUE
00000001 l       *ABS*	00000000 LIGHT_ON
00000000 l       *ABS*	00000000 LIGHT_OFF
00000000 l       *ABS*	00000000 GPIO_INPUT
00000001 l       *ABS*	00000000 UART_User
00000002 l       *ABS*	00000000 UART_User_IRQ
0001c200 l       *ABS*	00000000 UART_User_baud
000f4240 l       *ABS*	00000000 DELAY_NUM
0001c200 l       *ABS*	00000000 UART_BAUD
00e4e1c0 l       *ABS*	00000000 MAINLOOP_COUNT
044aa200 l       *ABS*	00000000 SystemCoreClock
20005020 l       .data	00000000 data_format
20005024 l       .data	00000000 light_show
20005039 l       .data	00000000 light_show0
2000504a l       .data	00000000 light_show1
20005060 l       .data	00000000 light_show2
20005077 l       .data	00000000 light_show3
2000508c l       .data	00000000 light_show4
200050a0 l       .data	00000000 mMainLoopCount
200050a4 l       .data	00000000 mLightCount
200050a8 l       .data	00000000 mFlag
0001c600 l       .text	00000000 hello_information
0001c79c l       .text	00000000 main_loop
0001c82e l       .text	00000000 main_light_1
0001c8e6 l       .text	00000000 main_exit
0001c860 l       .text	00000000 main_light_2
0001c892 l       .text	00000000 main_light_3
0001c8c4 l       .text	00000000 main_light_4
00000000 l    df *ABS*	00000000 ./obj/gpio.o
00000100 l       *ABS*	00000000 PTB_NUM
00000200 l       *ABS*	00000000 PTC_NUM
00000000 l       *ABS*	00000000 GPIO_IN
00000001 l       *ABS*	00000000 GPIO_OUTPUT
00000001 l       *ABS*	00000000 RISING_EDGE
00000002 l       *ABS*	00000000 FALLING_EDGE
00000003 l       *ABS*	00000000 DOUBLE_EDGE
40021018 l       *ABS*	00000000 RCC_APB2PCENR_BASE
40010800 l       *ABS*	00000000 GPIOA_BASE
40010800 l       *ABS*	00000000 GPIOA_CFGLR
40010c00 l       *ABS*	00000000 GPIOB_CFGLR
40011000 l       *ABS*	00000000 GPIOC_CFGLR
40011010 l       *ABS*	00000000 GPIOC_BSHR
40010804 l       *ABS*	00000000 GPIOA_CFGHR
40010c04 l       *ABS*	00000000 GPIOB_CFGHR
40011004 l       *ABS*	00000000 GPIOC_CFGHR
00000002 l       *ABS*	00000000 GPIO_PINS_0
00000020 l       *ABS*	00000000 GPIO_PINS_1
00000200 l       *ABS*	00000000 GPIO_PINS_2
00002000 l       *ABS*	00000000 GPIO_PINS_3
00020000 l       *ABS*	00000000 GPIO_PINS_4
00200000 l       *ABS*	00000000 GPIO_PINS_5
02000000 l       *ABS*	00000000 GPIO_PINS_6
20000000 l       *ABS*	00000000 GPIO_PINS_7
00000000 l       *ABS*	00000000 NOERROR
00000001 l       *ABS*	00000000 ERROR
00000001 l       *ABS*	00000000 LEDON
0001c8f0 l       .text	00000000 gpio_port_pin_resolution
0001c93c l       .text	00000000 GPIO_PIN_H
0001c994 l       .text	00000000 GPIO_PIN_L
0001c97e l       .text	00000000 gpio_input_H
0001c95c l       .text	00000000 gpio_output_H
0001ca24 l       .text	00000000 exit
0001ca02 l       .text	00000000 ledOFF
0001c9e0 l       .text	00000000 ledON
0001c9d0 l       .text	00000000 gpio_input_L
0001c9b4 l       .text	00000000 gpio_output_L
0001ca44 l       .text	00000000 GPIO_SET_PIN_H
0001ca64 l       .text	00000000 GPIO_SET_PIN_L
0001caa6 l       .text	00000000 SET_ledOFF
0001ca84 l       .text	00000000 SET_ledON
0001cac8 l       .text	00000000 SET_exit
0001cb22 l       .text	00000000 gpio_reverse_BSHR
0001cb40 l       .text	00000000 gpio_reverse_exit
0001cb80 l       .text	00000000 gpio_get_OUTDR
0001cb88 l       .text	00000000 gpio_get_exit
00000000 l    df *ABS*	00000000 ./obj/isr.o
00000100 l       *ABS*	00000000 PTB_NUM
00000200 l       *ABS*	00000000 PTC_NUM
00000000 l       *ABS*	00000000 GPIO_IN
00000001 l       *ABS*	00000000 GPIO_OUTPUT
00000001 l       *ABS*	00000000 RISING_EDGE
00000002 l       *ABS*	00000000 FALLING_EDGE
00000003 l       *ABS*	00000000 DOUBLE_EDGE
40021018 l       *ABS*	00000000 RCC_APB2PCENR_BASE
40010800 l       *ABS*	00000000 GPIOA_BASE
40010800 l       *ABS*	00000000 GPIOA_CFGLR
40010c00 l       *ABS*	00000000 GPIOB_CFGLR
40011000 l       *ABS*	00000000 GPIOC_CFGLR
40011010 l       *ABS*	00000000 GPIOC_BSHR
40010804 l       *ABS*	00000000 GPIOA_CFGHR
40010c04 l       *ABS*	00000000 GPIOB_CFGHR
40011004 l       *ABS*	00000000 GPIOC_CFGHR
00000002 l       *ABS*	00000000 GPIO_PINS_0
00000020 l       *ABS*	00000000 GPIO_PINS_1
00000200 l       *ABS*	00000000 GPIO_PINS_2
00002000 l       *ABS*	00000000 GPIO_PINS_3
00020000 l       *ABS*	00000000 GPIO_PINS_4
00200000 l       *ABS*	00000000 GPIO_PINS_5
02000000 l       *ABS*	00000000 GPIO_PINS_6
20000000 l       *ABS*	00000000 GPIO_PINS_7
00000200 l       *ABS*	00000000 LIGHT_RED
00000201 l       *ABS*	00000000 LIGHT_GREEN
00000202 l       *ABS*	00000000 LIGHT_BLUE
00000001 l       *ABS*	00000000 LIGHT_ON
00000000 l       *ABS*	00000000 LIGHT_OFF
00000000 l       *ABS*	00000000 GPIO_INPUT
00000001 l       *ABS*	00000000 UART_User
00000002 l       *ABS*	00000000 UART_User_IRQ
0001c200 l       *ABS*	00000000 UART_User_baud
000f4240 l       *ABS*	00000000 DELAY_NUM
0001c200 l       *ABS*	00000000 UART_BAUD
00e4e1c0 l       *ABS*	00000000 MAINLOOP_COUNT
044aa200 l       *ABS*	00000000 SystemCoreClock
200050b0 l       .data	00000000 flag
00000000 l    df *ABS*	00000000 system_ch32v30x.c
0001cc80 l     F .text	000000d4 SetSysClockTo72
0001cd54 l     F .text	0000000c SetSysClock
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 gec.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 user.c
00000000 l    df *ABS*	00000000 printf.c
0001d422 l     F .text	0000003c printk_putc
0001d45e l     F .text	00000080 printk_mknumstr
0001d4de l     F .text	00000034 printk_pad_zero
0001d512 l     F .text	00000034 printk_pad_space
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixunsdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 fixunsdfdi.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 libgcc2.c
0001cf36 g     F .text	000000d6 flash_write
0001ce66 g     F .text	0000000e flash_read_physical
200058b8 g       .data	00000000 __global_pointer$
0001cba0 g     F .text	00000000 UART2_Handler
0000077f g       *ABS*	00000000 GEC_USER_SECTOR_END
0001d3c4 g     F .text	00000056 uart_enable_re_int
200050b8 g       .bss	00000000 _sbss
00000800 g       *ABS*	00000000 __stack_size
000001c4 g       *ABS*	00000000 GEC_USER_SECTOR_START
0001f2c2 g     F .text	000000b6 memcpy
0001e444 g     F .text	000000b6 .hidden __ltdf2
0001c438 g       .init	00000000 _einit
0001f0ec g     F .text	0000005c .hidden __fixunsdfsi
0001cdf2 g     F .text	0000005a flash_erase
0001cea0 g     F .text	00000096 flash_Best
0001e0b6 g     F .text	0000038e .hidden __umoddi3
0001cdac g     F .text	00000046 flash_init
0001dd1e g     F .text	00000398 .hidden __udivdi3
0001f148 g     F .text	00000066 .hidden __floatunsidf
0001d558 g     F .text	000001c8 printk_mkfloatstr
200050bc g       .bss	00000000 _ebss
00000100 g       *ABS*	00000000 MCU_SECTORSIZE
0001cba0 g     F .text	00000000 UART_User_Handler
0001e444 g     F .text	000000b6 .hidden __ledf2
20020000 g       *ABS*	00000000 GEC_USER_RAM_END
0001dc50 g     F .text	00000030 myprintf
0001f24c g     F .text	00000076 .hidden __clzsi2
0001d102 g     F .text	000001f2 uart_init
0001cb46 g     F .text	00000000 gpio_get
0001c400 g       .init	00000000 _start
200050b8 g     O .bss	00000004 component_fun
20005000 g       *ABS*	00000000 GEC_USER_RAM_START
20005000 g       .dalign	00000000 _data_vma
0001d546 g     F .text	00000012 out_char
0001d720 g     F .text	00000530 printk
0001ce4c g     F .text	0000001a flash_read_logic
2000500c g     O .data	0000000c table_irq_uart
0001e4fa g     F .text	000004b8 .hidden __muldf3
0001d354 g     F .text	00000070 uart_re1
0001cbd8 g     F .text	000000a8 memset
0001c738 g     F .text	00000000 main
0001cd60 g     F .text	0000004c SystemInit
0001f1ae g     F .text	0000009e .hidden __fixunsdfdi
0001f518 g     O .text	00000100 .hidden __clz_tab
0001c400 g       .init	00000000 _sinit
0001d00c g     F .text	0000003e flash_write_physical
0001ce74 g     F .text	0000002c flash_isempty
20020000 g       *ABS*	00000000 _eusrstack
0001d04a g     F .text	000000a4 Vectors_Init
200050b8 g       .data	00000000 _edata
0001f618 g       .dlalign	00000000 _data_lma
0001d41a g     F .text	00000008 USART2_IRQHandler
0001dc80  w      .text	00000000 handle_reset
0001f378 g     F .text	00000012 strlen
0001d2f4 g     F .text	00000060 uart_send1
0001d0ee g     F .text	00000014 uart_is_uartNo
0001ca2a g     F .text	00000000 gpio_set
20005000 g     O .data	0000000c USART_ARR
0001cace g     F .text	00000000 gpio_reverse
0001c90a g       .text	00000000 gpio_init
0001e9b2 g     F .text	0000073a .hidden __subdf3
00000000 g       *ABS*	00000000 MCU_FLASH_ADDR_START



Disassembly of section .init:

0001c400 <_sinit>:
_start():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:13

	.section	.init,"ax",@progbits
	.global	_start
	.align	1
_start:
	j	handle_reset
   1c400:	0810106f          	j	1dc80 <handle_reset>
   1c404:	00000013          	nop
   1c408:	00000013          	nop
   1c40c:	00000013          	nop
   1c410:	00000013          	nop
   1c414:	00000013          	nop
   1c418:	00000013          	nop
   1c41c:	00000013          	nop
   1c420:	00000013          	nop
   1c424:	00000013          	nop
   1c428:	00000013          	nop
   1c42c:	00000013          	nop
   1c430:	00000013          	nop
   1c434:	00100073          	ebreak

Disassembly of section .vector:

0001c438 <_vector_base>:
_vector_base():
   1c438:	c400                	sw	s0,8(s0)
   1c43a:	0001                	nop
	...
   1c510:	d41a                	sw	t1,40(sp)
   1c512:	0001                	nop
	...

Disassembly of section .text:

0001c600 <hello_information>:
hello_information():
   1c600:	2d0a                	fld	fs10,128(sp)
   1c602:	2d2d                	jal	1cc3c <memset+0x64>
   1c604:	2d2d                	jal	1cc3e <memset+0x66>
   1c606:	2d2d                	jal	1cc40 <memset+0x68>
   1c608:	2d2d                	jal	1cc42 <memset+0x6a>
   1c60a:	2d2d                	jal	1cc44 <memset+0x6c>
   1c60c:	2d2d                	jal	1cc46 <memset+0x6e>
   1c60e:	2d2d                	jal	1cc48 <memset+0x70>
   1c610:	2d2d                	jal	1cc4a <memset+0x72>
   1c612:	2d2d                	jal	1cc4c <memset+0x74>
   1c614:	2d2d                	jal	1cc4e <memset+0x76>
   1c616:	2d2d                	jal	1cc50 <memset+0x78>
   1c618:	2d2d                	jal	1cc52 <memset+0x7a>
   1c61a:	2d2d                	jal	1cc54 <memset+0x7c>
   1c61c:	2d2d                	jal	1cc56 <memset+0x7e>
   1c61e:	2d2d                	jal	1cc58 <memset+0x80>
   1c620:	2d2d                	jal	1cc5a <memset+0x82>
   1c622:	2d2d                	jal	1cc5c <memset+0x84>
   1c624:	2d2d                	jal	1cc5e <memset+0x86>
   1c626:	2d2d                	jal	1cc60 <memset+0x88>
   1c628:	2d2d                	jal	1cc62 <memset+0x8a>
   1c62a:	2d2d                	jal	1cc64 <memset+0x8c>
   1c62c:	2d2d                	jal	1cc66 <memset+0x8e>
   1c62e:	2d2d                	jal	1cc68 <memset+0x90>
   1c630:	2d2d                	jal	1cc6a <memset+0x92>
   1c632:	a10a                	fsd	ft2,128(sp)
   1c634:	bdbe                	fsd	fa5,248(sp)
   1c636:	baf0                	fsd	fa2,240(a3)
   1c638:	c2f9                	beqz	a3,1c6fe <hello_information+0xfe>
   1c63a:	cae1ccab          	0xcae1ccab
   1c63e:	a1be                	fsd	fa5,192(sp)
   1c640:	b1e3bbbf d1efd3e0 	0xd1efd3e0b1e3bbbf
   1c648:	b5d4                	fsd	fa3,168(a1)
   1c64a:	b7c1c1e3          	blt	gp,t3,1c1ac <GPIO_PINS_3+0x1a1ac>
   1c64e:	b9a2                	fsd	fs0,240(sp)
   1c650:	b6e2                	fsd	fs8,360(sp)
   1c652:	bcfe                	fsd	ft11,120(sp)
   1c654:	20dcb9ab          	0x20dcb9ab
   1c658:	2020                	fld	fs0,64(s0)
   1c65a:	2020                	fld	fs0,64(s0)
   1c65c:	2020                	fld	fs0,64(s0)
   1c65e:	2020                	fld	fs0,64(s0)
   1c660:	2020                	fld	fs0,64(s0)
   1c662:	2020                	fld	fs0,64(s0)
   1c664:	2020                	fld	fs0,64(s0)
   1c666:	200a                	fld	ft0,128(sp)
   1c668:	2020                	fld	fs0,64(s0)
   1c66a:	b520                	fsd	fs0,104(a0)
   1c66c:	d2da                	sw	s6,100(sp)
   1c66e:	d3ceb4bb          	0xd3ceb4bb
   1c672:	bbbfb4c3          	fmadd.d	fs1,ft11,fs11,fs7,rup
   1c676:	b5e0b1e3          	0xb5e0b1e3
   1c67a:	b5c1c1e3          	blt	gp,t3,1c1bc <GPIO_PINS_3+0x1a1bc>
   1c67e:	bac4                	fsd	fs1,176(a3)
   1c680:	c9ec                	sw	a1,84(a1)
   1c682:	b9a2b7ab          	0xb9a2b7ab
   1c686:	b6e2                	fsd	fs8,360(sp)
   1c688:	bcfe                	fsd	ft11,120(sp)
   1c68a:	a3dcb9ab          	0xa3dcb9ab
   1c68e:	ccac                	sw	a1,88(s1)
   1c690:	c1f4b0ab          	0xc1f4b0ab
   1c694:	20a1a3cb          	fnmsub.s	ft7,ft3,fa0,ft4,rdn
   1c698:	2020                	fld	fs0,64(s0)
   1c69a:	0a20                	addi	s0,sp,280
   1c69c:	2020                	fld	fs0,64(s0)
   1c69e:	2020                	fld	fs0,64(s0)
   1c6a0:	e2d5                	bnez	a3,1c744 <main+0xc>
   1c6a2:	bbd6                	fsd	fs5,496(sp)
   1c6a4:	c7ca                	sw	s2,204(sp)
   1c6a6:	f2cd                	bnez	a3,1c648 <hello_information+0x48>
   1c6a8:	efc0                	fsw	fs0,28(a5)
   1c6aa:	f7d5a4b3          	0xf7d5a4b3
   1c6ae:	dab5                	beqz	a3,1c622 <hello_information+0x22>
   1c6b0:	bbd2                	fsd	fs4,496(sp)
   1c6b2:	bdb2                	fsd	fa2,248(sp)
   1c6b4:	abb5aca3          	sw	s11,-1351(a1)
   1c6b8:	c7ca                	sw	s2,204(sp)
   1c6ba:	f2cdaca3          	sw	a2,-199(s11)
   1c6be:	c2ca                	sw	s2,68(sp)
   1c6c0:	b7cdaabf 202cd1c4 	0x202cd1c4b7cdaabf
   1c6c8:	2020                	fld	fs0,64(s0)
   1c6ca:	2020                	fld	fs0,64(s0)
   1c6cc:	2020                	fld	fs0,64(s0)
   1c6ce:	2020                	fld	fs0,64(s0)
   1c6d0:	200a                	fld	ft0,128(sp)
   1c6d2:	2020                	fld	fs0,64(s0)
   1c6d4:	d320                	sw	s0,96(a4)
   1c6d6:	c1d0                	sw	a2,4(a1)
   1c6d8:	d2dab5cb          	fnmsub.d	fa1,fs5,fa3,fs10,rup
   1c6dc:	a3bdb2bb          	0xa3bdb2bb
   1c6e0:	bcac                	fsd	fa1,120(s1)
   1c6e2:	b3e1                	j	1c4aa <_einit+0x72>
   1c6e4:	cfd6                	sw	s5,220(sp)
   1c6e6:	c8c2                	sw	a6,80(sp)
   1c6e8:	a3a5                	j	1cc50 <memset+0x78>
   1c6ea:	b6ac                	fsd	fa1,104(a3)
   1c6ec:	d3a8                	sw	a0,96(a5)
   1c6ee:	cad0                	sw	a2,20(a3)
   1c6f0:	bbd5                	j	1c4e4 <_einit+0xac>
   1c6f2:	a3f1                	j	1ccbe <SetSysClockTo72+0x3e>
   1c6f4:	20a1                	jal	1c73c <main+0x4>
   1c6f6:	2020                	fld	fs0,64(s0)
   1c6f8:	2020                	fld	fs0,64(s0)
   1c6fa:	2020                	fld	fs0,64(s0)
   1c6fc:	2020                	fld	fs0,64(s0)
   1c6fe:	2020                	fld	fs0,64(s0)
   1c700:	2020                	fld	fs0,64(s0)
   1c702:	2020                	fld	fs0,64(s0)
   1c704:	2d0a                	fld	fs10,128(sp)
   1c706:	2d2d                	jal	1cd40 <SetSysClockTo72+0xc0>
   1c708:	2d2d                	jal	1cd42 <SetSysClockTo72+0xc2>
   1c70a:	2d2d                	jal	1cd44 <SetSysClockTo72+0xc4>
   1c70c:	2d2d                	jal	1cd46 <SetSysClockTo72+0xc6>
   1c70e:	2d2d                	jal	1cd48 <SetSysClockTo72+0xc8>
   1c710:	2d2d                	jal	1cd4a <SetSysClockTo72+0xca>
   1c712:	2d2d                	jal	1cd4c <SetSysClockTo72+0xcc>
   1c714:	2d2d                	jal	1cd4e <SetSysClockTo72+0xce>
   1c716:	2d2d                	jal	1cd50 <SetSysClockTo72+0xd0>
   1c718:	2d2d                	jal	1cd52 <SetSysClockTo72+0xd2>
   1c71a:	2d2d                	jal	1cd54 <SetSysClock>
   1c71c:	2d2d                	jal	1cd56 <SetSysClock+0x2>
   1c71e:	2d2d                	jal	1cd58 <SetSysClock+0x4>
   1c720:	2d2d                	jal	1cd5a <SetSysClock+0x6>
   1c722:	2d2d                	jal	1cd5c <SetSysClock+0x8>
   1c724:	2d2d                	jal	1cd5e <SetSysClock+0xa>
   1c726:	2d2d                	jal	1cd60 <SystemInit>
   1c728:	2d2d                	jal	1cd62 <SystemInit+0x2>
   1c72a:	2d2d                	jal	1cd64 <SystemInit+0x4>
   1c72c:	2d2d                	jal	1cd66 <SystemInit+0x6>
   1c72e:	2d2d                	jal	1cd68 <SystemInit+0x8>
   1c730:	2d2d                	jal	1cd6a <SystemInit+0xa>
   1c732:	2d2d                	jal	1cd6c <SystemInit+0xc>
   1c734:	2d2d                	jal	1cd6e <SystemInit+0xe>
   1c736:	000a                	c.slli	zero,0x2

0001c738 <main>:
main():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:60
main:
/*（3）======启动部分（开头）主循环前的初始化工作====================== */
/* 通过调整栈指针分配出出栈空间用于存放局部变量和调用函数返回地址，
      主函数中栈空间分出44字节，   ra为返回地址寄存器，占用4个字节，
      将ra中的返回地址放入sp指针地址偏移44个字节的位置*/
    ADDI sp,sp,-48                	/* 分配栈帧 */
   1c738:	7179                	addi	sp,sp,-48
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:61
    SW ra,44(sp)                	/* 存储放回地址 */
   1c73a:	d606                	sw	ra,44(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:65
/* （3.1）声明main函数使用的局部变量 */

/* （3.2）【不变】关总中断 */
	LI t0, 0x8
   1c73c:	42a1                	li	t0,8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:66
	CSRC mstatus, t0
   1c73e:	3002b073          	csrc	mstatus,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:73

/* （3.4）给全局变量赋初值 */

/* （3.5）用户外设模块初始化*/
/*  初始化红灯, a0、a1、a2是gpio_init的入口参数    */
    LI a0,LIGHT_RED                /* a0=端口号|引脚号 */
   1c742:	20000513          	li	a0,512
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:74
    LI a1,GPIO_OUTPUT              /* a1=输出模式 */
   1c746:	4585                	li	a1,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:75
    LI a2,LIGHT_OFF                 /* a2=灯暗 */
   1c748:	4601                	li	a2,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:76
    CALL gpio_init                 /* 调用gpio_init函数 */
   1c74a:	22c1                	jal	1c90a <gpio_init>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:78
/*  初始化绿灯, a0、a1、a2是gpio_init的入口参数    */
    LI a0,LIGHT_GREEN                /* a0=端口号|引脚号 */
   1c74c:	20100513          	li	a0,513
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:79
    LI a1,GPIO_OUTPUT              /* a1=输出模式 */
   1c750:	4585                	li	a1,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:80
    LI a2,LIGHT_OFF                 /* a2=灯暗 */
   1c752:	4601                	li	a2,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:81
    CALL gpio_init                 /* 调用gpio_init函数 */
   1c754:	2a5d                	jal	1c90a <gpio_init>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:83
/*  初始化蓝灯, a0、a1、a2是gpio_init的入口参数    */
    LI a0,LIGHT_BLUE                /* a0=端口号|引脚号 */
   1c756:	20200513          	li	a0,514
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:84
    LI a1,GPIO_OUTPUT              /* a1=输出模式 */
   1c75a:	4585                	li	a1,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:85
    LI a2,LIGHT_OFF                 /* a2=灯暗 */
   1c75c:	4601                	li	a2,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:86
    CALL gpio_init                 /* 调用gpio_init函数 */
   1c75e:	2275                	jal	1c90a <gpio_init>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:88
/* 初始化串口UART_User */
    LI a0,UART_User                /* 串口号 */
   1c760:	4505                	li	a0,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:89
    LI a1,UART_User_baud           /* 波特率 */
   1c762:	0001c5b7          	lui	a1,0x1c
   1c766:	20058593          	addi	a1,a1,512 # 1c200 <UART_BAUD>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:90
    CALL uart_init                 /* 调用uart初始化函数 */
   1c76a:	199000ef          	jal	ra,1d102 <uart_init>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:92
/* 初始化串口2中断 */
    LI a0,UART_User_IRQ
   1c76e:	4509                	li	a0,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:93
    LI a1,UART_User_baud
   1c770:	0001c5b7          	lui	a1,0x1c
   1c774:	20058593          	addi	a1,a1,512 # 1c200 <UART_BAUD>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:94
    CALL uart_init
   1c778:	18b000ef          	jal	ra,1d102 <uart_init>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:97

/*（3.6）使能模块中断 */
    LI a0,UART_User_IRQ
   1c77c:	4509                	li	a0,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:98
    CALL uart_enable_re_int
   1c77e:	447000ef          	jal	ra,1d3c4 <uart_enable_re_int>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:101
    
/* （3.7）开总中断 */
	LI t0, 0x8
   1c782:	42a1                	li	t0,8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:102
	CSRS mstatus, t0
   1c784:	3002a073          	csrs	mstatus,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:105

/*显示hello_information定义的字符串    */
    LA a0,hello_information
   1c788:	00000517          	auipc	a0,0x0
   1c78c:	e7850513          	addi	a0,a0,-392 # 1c600 <hello_information>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:106
    CALL printf
   1c790:	4c0010ef          	jal	ra,1dc50 <myprintf>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:111

/*call .   //在此打桩(.表示当前地址)，理解发光二极管为何亮起来了？*/
/*（4）======启动部分（结尾）======================================= */

    LA t6,mMainLoopCount             /* t6作为mMainLoopCount变量 */
   1c794:	1ffe9f97          	auipc	t6,0x1ffe9
   1c798:	90cf8f93          	addi	t6,t6,-1780 # 200050a0 <mMainLoopCount>

0001c79c <main_loop>:
main_loop():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:114
main_loop:
/*（4.1）主循环次数变量mMainLoopCount+1*/
    ADDI t6,t6,1
   1c79c:	0f85                	addi	t6,t6,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:116
/*（4.2）未达到主循环次数设定值，继续循环 */
    LI t5,MAINLOOP_COUNT
   1c79e:	00e4ef37          	lui	t5,0xe4e
   1c7a2:	1c0f0f13          	addi	t5,t5,448 # e4e1c0 <MAINLOOP_COUNT>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:117
    BLTU t6,t5,main_loop
   1c7a6:	ffefebe3          	bltu	t6,t5,1c79c <main_loop>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:122

/*（4.3）达到主循环次数设定值，执行下列语句，进行灯的亮暗处理  */
/*[测试代码部分]*/
/*（4.3.1）清除循环次数变量  */
    LA t6, mMainLoopCount     /*t6←mMainLoopCount的地址*/
   1c7aa:	1ffe9f97          	auipc	t6,0x1ffe9
   1c7ae:	8f6f8f93          	addi	t6,t6,-1802 # 200050a0 <mMainLoopCount>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:123
    LI t5,0
   1c7b2:	4f01                	li	t5,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:124
    SW t5,0(t6)
   1c7b4:	01efa023          	sw	t5,0(t6)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:126
/*(4.3.2)打印闪烁次数*/
	LA a3,mLightCount          /* a3←mLightCount的地址*/
   1c7b8:	1ffe9697          	auipc	a3,0x1ffe9
   1c7bc:	8ec68693          	addi	a3,a3,-1812 # 200050a4 <mLightCount>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:127
    LW a1,0(a3)                /* a1←a3地址中的数据 */
   1c7c0:	428c                	lw	a1,0(a3)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:128
    ADDI a1,a1,1               /* a1←a1+1 */
   1c7c2:	0585                	addi	a1,a1,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:129
    SW a1,0(a3)                /* a3←a1 */
   1c7c4:	c28c                	sw	a1,0(a3)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:131
	/*mLightCount←mLightCount+1*/
    LA a0,light_show          /* a0←light_show3的地址 */
   1c7c6:	1ffe9517          	auipc	a0,0x1ffe9
   1c7ca:	85e50513          	addi	a0,a0,-1954 # 20005024 <light_show>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:132
    CALL printf                /* 调用printf函数 */
   1c7ce:	482010ef          	jal	ra,1dc50 <myprintf>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:134
	/*打印出“闪烁次数mLightCount=”*/
    LA a0,data_format          /* a0←data_format(按十进制整数输出) */
   1c7d2:	1ffe9517          	auipc	a0,0x1ffe9
   1c7d6:	84e50513          	addi	a0,a0,-1970 # 20005020 <data_format>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:135
    LA a2,mLightCount          /* a2←mLightCount */
   1c7da:	1ffe9617          	auipc	a2,0x1ffe9
   1c7de:	8ca60613          	addi	a2,a2,-1846 # 200050a4 <mLightCount>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:136
    LW a1,0(a2)                /* a1←a2 */
   1c7e2:	420c                	lw	a1,0(a2)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:137
    CALL printf                /* 调用printf函数  */
   1c7e4:	46c010ef          	jal	ra,1dc50 <myprintf>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:141
    /*以十进制整数格式打印mLightCount的数值*/
/*（4.3.3）判断灯的状态标志mFlag，改变灯状态及标志 */
    /*判断灯的状态标志 */
    LA t2,mFlag
   1c7e8:	1ffe9397          	auipc	t2,0x1ffe9
   1c7ec:	8c038393          	addi	t2,t2,-1856 # 200050a8 <mFlag>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:142
    LW t6,0(t2)
   1c7f0:	0003af83          	lw	t6,0(t2)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:143
    LI t5,0
   1c7f4:	4f01                	li	t5,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:144
    BNE t6,t5,main_light_1   /* 判断mFlag是否为0，不相等跳转 */
   1c7f6:	03ef9c63          	bne	t6,t5,1c82e <main_light_1>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:146
    /*全灭*/
    LI a0,LIGHT_RED
   1c7fa:	20000513          	li	a0,512
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:147
    LI a1,LIGHT_OFF
   1c7fe:	4581                	li	a1,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:148
    CALL gpio_set
   1c800:	242d                	jal	1ca2a <gpio_set>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:150
   /*关红灯*/
	LI a0,LIGHT_GREEN
   1c802:	20100513          	li	a0,513
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:151
    LI a1,LIGHT_OFF
   1c806:	4581                	li	a1,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:152
    CALL gpio_set
   1c808:	240d                	jal	1ca2a <gpio_set>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:154
   /*关绿灯*/
    LI a0,LIGHT_BLUE
   1c80a:	20200513          	li	a0,514
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:155
    LI a1,LIGHT_OFF
   1c80e:	4581                	li	a1,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:156
    CALL gpio_set
   1c810:	2c29                	jal	1ca2a <gpio_set>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:158
   /*关蓝灯*/
    LA a2,mFlag
   1c812:	1ffe9617          	auipc	a2,0x1ffe9
   1c816:	89660613          	addi	a2,a2,-1898 # 200050a8 <mFlag>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:159
    LI t4,1
   1c81a:	4e85                	li	t4,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:160
    SW t4,0(a2)
   1c81c:	01d62023          	sw	t4,0(a2)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:162
    /*灯的状态标志mFlag改为1*/
    LA a0,light_show0
   1c820:	1ffe9517          	auipc	a0,0x1ffe9
   1c824:	81950513          	addi	a0,a0,-2023 # 20005039 <light_show0>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:163
    CALL printf
   1c828:	428010ef          	jal	ra,1dc50 <myprintf>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:165
    /*打印灯亮提示*/
    J main_exit
   1c82c:	a86d                	j	1c8e6 <main_exit>

0001c82e <main_light_1>:
main_light_1():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:168

main_light_1:
	LI t5,1
   1c82e:	4f05                	li	t5,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:169
    BNE t6,t5,main_light_2   /* 判断mFlag是否为1，不相等跳转 */
   1c830:	03ef9863          	bne	t6,t5,1c860 <main_light_2>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:171
	/*红绿*/
	LI a0,LIGHT_RED
   1c834:	20000513          	li	a0,512
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:172
    LI a1,LIGHT_ON
   1c838:	4585                	li	a1,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:173
    CALL gpio_set
   1c83a:	2ac5                	jal	1ca2a <gpio_set>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:175
   /*开红灯*/
	LI a0,LIGHT_GREEN
   1c83c:	20100513          	li	a0,513
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:176
    LI a1,LIGHT_ON
   1c840:	4585                	li	a1,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:177
    CALL gpio_set
   1c842:	22e5                	jal	1ca2a <gpio_set>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:179
   /*开绿灯*/
    LA a2,mFlag
   1c844:	1ffe9617          	auipc	a2,0x1ffe9
   1c848:	86460613          	addi	a2,a2,-1948 # 200050a8 <mFlag>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:180
    LI t4,2
   1c84c:	4e89                	li	t4,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:181
    SW t4,0(a2)
   1c84e:	01d62023          	sw	t4,0(a2)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:183
    /*灯的状态标志mFlag改为2*/
    LA a0,light_show1
   1c852:	1ffe8517          	auipc	a0,0x1ffe8
   1c856:	7f850513          	addi	a0,a0,2040 # 2000504a <light_show1>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:184
    CALL printf
   1c85a:	3f6010ef          	jal	ra,1dc50 <myprintf>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:186
    /*打印灯亮提示*/
    J main_exit
   1c85e:	a061                	j	1c8e6 <main_exit>

0001c860 <main_light_2>:
main_light_2():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:188
main_light_2:
	LI t5,2
   1c860:	4f09                	li	t5,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:189
    BNE t6,t5,main_light_3   /* 判断mFlag是否为2，不相等跳转 */
   1c862:	03ef9863          	bne	t6,t5,1c892 <main_light_3>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:191
	/*绿蓝*/
	LI a0,LIGHT_RED
   1c866:	20000513          	li	a0,512
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:192
    LI a1,LIGHT_OFF
   1c86a:	4581                	li	a1,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:193
    CALL gpio_set
   1c86c:	2a7d                	jal	1ca2a <gpio_set>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:195
   /*关红灯*/
	LI a0,LIGHT_BLUE
   1c86e:	20200513          	li	a0,514
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:196
    LI a1,LIGHT_ON
   1c872:	4585                	li	a1,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:197
    CALL gpio_set
   1c874:	2a5d                	jal	1ca2a <gpio_set>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:199
   /*开蓝灯*/
    LA a2,mFlag
   1c876:	1ffe9617          	auipc	a2,0x1ffe9
   1c87a:	83260613          	addi	a2,a2,-1998 # 200050a8 <mFlag>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:200
    LI t4,3
   1c87e:	4e8d                	li	t4,3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:201
    SW t4,0(a2)
   1c880:	01d62023          	sw	t4,0(a2)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:203
    /*灯的状态标志mFlag改为3*/
    LA a0,light_show2
   1c884:	1ffe8517          	auipc	a0,0x1ffe8
   1c888:	7dc50513          	addi	a0,a0,2012 # 20005060 <light_show2>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:204
    CALL printf
   1c88c:	3c4010ef          	jal	ra,1dc50 <myprintf>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:206
    /*打印灯亮提示*/
    J main_exit
   1c890:	a899                	j	1c8e6 <main_exit>

0001c892 <main_light_3>:
main_light_3():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:208
main_light_3:
	LI t5,3
   1c892:	4f0d                	li	t5,3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:209
    BNE t6,t5,main_light_4   /* 判断mFlag是否为3，不相等跳转 */
   1c894:	03ef9863          	bne	t6,t5,1c8c4 <main_light_4>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:211
	/*红蓝*/
	LI a0,LIGHT_RED
   1c898:	20000513          	li	a0,512
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:212
    LI a1,LIGHT_ON
   1c89c:	4585                	li	a1,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:213
    CALL gpio_set
   1c89e:	2271                	jal	1ca2a <gpio_set>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:215
   /*开红灯*/
	LI a0,LIGHT_GREEN
   1c8a0:	20100513          	li	a0,513
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:216
    LI a1,LIGHT_OFF
   1c8a4:	4581                	li	a1,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:217
    CALL gpio_set
   1c8a6:	2251                	jal	1ca2a <gpio_set>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:219
   /*关绿灯*/
    LA a2,mFlag
   1c8a8:	1ffe9617          	auipc	a2,0x1ffe9
   1c8ac:	80060613          	addi	a2,a2,-2048 # 200050a8 <mFlag>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:220
    LI t4,3
   1c8b0:	4e8d                	li	t4,3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:221
    SW t4,0(a2)
   1c8b2:	01d62023          	sw	t4,0(a2)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:223
    /*灯的状态标志mFlag改为3*/
    LA a0,light_show3
   1c8b6:	1ffe8517          	auipc	a0,0x1ffe8
   1c8ba:	7c150513          	addi	a0,a0,1985 # 20005077 <light_show3>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:224
    CALL printf
   1c8be:	392010ef          	jal	ra,1dc50 <myprintf>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:226
    /*打印灯亮提示*/
    J main_exit
   1c8c2:	a015                	j	1c8e6 <main_exit>

0001c8c4 <main_light_4>:
main_light_4():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:229
main_light_4:
	/*全亮*/
	LI a0,LIGHT_BLUE
   1c8c4:	20200513          	li	a0,514
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:230
    LI a1,LIGHT_ON
   1c8c8:	4585                	li	a1,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:231
    CALL gpio_set
   1c8ca:	2285                	jal	1ca2a <gpio_set>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:233
   /*开绿灯*/
    LA a2,mFlag
   1c8cc:	1ffe8617          	auipc	a2,0x1ffe8
   1c8d0:	7dc60613          	addi	a2,a2,2012 # 200050a8 <mFlag>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:234
    LI t4,0
   1c8d4:	4e81                	li	t4,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:235
    SW t4,0(a2)
   1c8d6:	01d62023          	sw	t4,0(a2)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:237
    /*灯的状态标志mFlag改为0*/
    LA a0,light_show4
   1c8da:	1ffe8517          	auipc	a0,0x1ffe8
   1c8de:	7b250513          	addi	a0,a0,1970 # 2000508c <light_show4>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:238
    CALL printf
   1c8e2:	36e010ef          	jal	ra,1dc50 <myprintf>

0001c8e6 <main_exit>:
main_exit():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:242
    /*打印灯亮提示*/
    
main_exit:
    LI a5,0
   1c8e6:	4781                	li	a5,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:243
    J main_loop                    /* 继续循环 */
   1c8e8:	bd55                	j	1c79c <main_loop>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:246

/* 释放栈空间 */
    LW ra, 44(sp)               /* 恢复返回地址 */
   1c8ea:	50b2                	lw	ra,44(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:247
    ADDI sp, sp, 48             /* 释放栈帧 */
   1c8ec:	6145                	addi	sp,sp,48
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/main.s:248
   1c8ee:	8082                	ret

0001c8f0 <gpio_port_pin_resolution>:
gpio_port_pin_resolution():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:14

gpio_port_pin_resolution:
/* 通过调整栈指针分配出出栈空间用于存放局部变量和存放调用函数返回地址，
      主函数中栈空间分出16字节，   ra为返回地址寄存器，占用4个字节，将ra
      中的返回地址放入sp指针地址偏移16个字节的位置*/
	addi sp, sp, -16			/* 分配堆栈框架*/
   1c8f0:	1141                	addi	sp,sp,-16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:15
	sw ra, 12(sp)				/* 将寄存器地址写到堆栈上*/
   1c8f2:	c606                	sw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:17
	/* 计算出GPIO端口号和引脚号 */
	srli t4,a0,0x8				/* t4=a0=端口号 */
   1c8f4:	00855e93          	srli	t4,a0,0x8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:18
	andi t5,a0,255				/* a2=a0=引脚号 */
   1c8f8:	0ff57f13          	andi	t5,a0,255
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:19
	mv a0,t4
   1c8fc:	8576                	mv	a0,t4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:20
	mv a1,t5
   1c8fe:	85fa                	mv	a1,t5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:22
	/* 释放栈空间 */
	lw ra, 12(sp)               /* 恢复返回地址 */
   1c900:	40b2                	lw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:23
    addi sp, sp, 16             /* 释放栈帧 */
   1c902:	0141                	addi	sp,sp,16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:24
    mv  a0,	t4					/* 读取返回值 */
   1c904:	8576                	mv	a0,t4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:25
    mv  a1, t5					/* 读取返回值 */
   1c906:	85fa                	mv	a1,t5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:26
    ret							/* 返回 */
   1c908:	8082                	ret

0001c90a <gpio_init>:
gpio_init():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:45
.global gpio_init                 /*将gpio_init定义成全局函数，便于芯片初始化之后调用*/
gpio_init:
/* 通过调整栈指针分配出出栈空间用于存放局部变量和存放调用函数返回地址，
      主函数中栈空间分出16字节，   ra为返回地址寄存器，占用4个字节，将ra
      中的返回地址放入sp指针地址偏移16个字节的位置*/
	addi sp, sp, -16			/* 分配堆栈框架*/
   1c90a:	1141                	addi	sp,sp,-16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:46
	sw ra, 12(sp)				/* 将寄存器地址写到堆栈上*/
   1c90c:	c606                	sw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:48

	mv a3,a2					/* 将函数第3个参数a2赋值给a3 */
   1c90e:	86b2                	mv	a3,a2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:49
	mv a2,a1					/* 将函数第2个参数a1赋值给a2/
   1c910:	862e                	mv	a2,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:52
/* 计算出GPIO端口号和引脚号 */
	/*jalr gpio_port_pin_resolution	/* a0=端口号，a1=引脚号 */
	srli t4,a0,0x8				/* t4=a0=端口号 */
   1c912:	00855e93          	srli	t4,a0,0x8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:53
	andi t5,a0,255				/* t5=a0=引脚号 */
   1c916:	0ff57f13          	andi	t5,a0,255
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:54
	mv a0,t4					/* a0=端口号 */
   1c91a:	8576                	mv	a0,t4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:55
	mv a1,t5					/* a1=引脚号 */
   1c91c:	85fa                	mv	a1,t5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:57
/* 配置GPIO时钟 */
	li t0, RCC_APB2PCENR_BASE	/* 将时钟APB2PCENR寄存器赋值给t0 */
   1c91e:	400212b7          	lui	t0,0x40021
   1c922:	01828293          	addi	t0,t0,24 # 40021018 <RCC_APB2PCENR_BASE>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:58
	mv t1, a0					/* t1=a0=端口号 */
   1c926:	832a                	mv	t1,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:59
	li t2, 1					/* 1左移两位赋值给t2寄存器 */
   1c928:	4385                	li	t2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:60
	addi t1,t1,2				/* t1=t1+2 等于GPIO时钟需要左移的位*/
   1c92a:	0309                	addi	t1,t1,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:61
	sll t2, t2, t1				/* t1 左移 t2位 */
   1c92c:	006393b3          	sll	t2,t2,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:62
	sw t2, 0(t0)				/* 这里是开GPIO的时钟  */
   1c930:	0072a023          	sw	t2,0(t0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:64
/* 判断GPIO引脚是否大于7 */
	li a4, 0x08					/* a4=0x08 */
   1c934:	4721                	li	a4,8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:65
	bgeu a1,a4,GPIO_PIN_H		/* 当(a1=引脚号)>(a4=0x08)时跳转 GPIO_PIN_H*/
   1c936:	00e5f363          	bgeu	a1,a4,1c93c <GPIO_PIN_H>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:66
	j GPIO_PIN_L				/* 当(a1=引脚号)<=(a4=0x08)时跳转 GPIO_PIN_H*/
   1c93a:	a8a9                	j	1c994 <GPIO_PIN_L>

0001c93c <GPIO_PIN_H>:
GPIO_PIN_H():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:70
/* 引脚PIN大于7时 */
GPIO_PIN_H:
/* 算出GPIOx相对于GPIOA的偏移地址 */
	mv t0, a0					/* t0=a0=端口号 */
   1c93c:	82aa                	mv	t0,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:71
	li t1, 0x400				/* t1=各端口基地址差值(0x400)*/
   1c93e:	40000313          	li	t1,1024
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:72
	mul t0, t0, t1				/* t0=待操作端口与GPIOA口的偏移地址 */
   1c942:	026282b3          	mul	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:74
/* 就算出GPIOx的地址给 ->t0  */
	li t1, GPIOA_CFGHR			/* 加载GPIO的地址 */
   1c946:	40011337          	lui	t1,0x40011
   1c94a:	80430313          	addi	t1,t1,-2044 # 40010804 <GPIOA_CFGHR>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:75
	add t0,t0,t1				/* t0=GPIOx端口的地址*/
   1c94e:	929a                	add	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:78

/* 判断GPIO输入输出模式 */
	beqz a2, gpio_input_H		/* 函数第2个参数a2=0，则跳转gpio_input_H */
   1c950:	c61d                	beqz	a2,1c97e <gpio_input_H>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:79
	li t4,1						/* t4=1 */
   1c952:	4e85                	li	t4,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:80
	beq a2,t4, gpio_output_H	/* 函数第2个参数a2=1，则跳转gpio_output_H */
   1c954:	01d60463          	beq	a2,t4,1c95c <gpio_output_H>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:81
	li a2, ERROR
   1c958:	4605                	li	a2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:82
	j exit
   1c95a:	a0e9                	j	1ca24 <exit>

0001c95c <gpio_output_H>:
gpio_output_H():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:86

/* 配置GPIO引脚为输出模式 */
gpio_output_H:
	li t1, 4					/* t1=4 */
   1c95c:	4311                	li	t1,4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:87
	li t3, 8					/* t3=8 */
   1c95e:	4e21                	li	t3,8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:88
	sub t3,a1,t3				/* t3=((a1=引脚号)- 8)*/
   1c960:	41c58e33          	sub	t3,a1,t3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:89
	mul t1,t1,t3				/* t1= 4*(a1=引脚号) */
   1c964:	03c30333          	mul	t1,t1,t3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:90
	li t2, GPIO_PINS_0			/* PTA_0为0x00000002输出  */
   1c968:	4389                	li	t2,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:91
	sll t2,t2,t1				/* t2<<t1位 */
   1c96a:	006393b3          	sll	t2,t2,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:92
	sw t2, 0(t0)				/* 向t0寄存器保存的地址中 写入t2寄存器中存储的数据 */
   1c96e:	0072a023          	sw	t2,0(t0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:94
/* 判断GPIO输出电平状态 */
	beqz a3, ledOFF				/* 将函数第3个传参给a3，如果a3为0则跳转ledOFF */
   1c972:	cac1                	beqz	a3,1ca02 <ledOFF>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:95
	li t3, LEDON				/* 给t3寄存器赋值0x01 */
   1c974:	4e05                	li	t3,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:96
	beq a3, t3, ledON			/* 比较a3和t3是否相等，相等则跳转置ledON */
   1c976:	07c68563          	beq	a3,t3,1c9e0 <ledON>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:97
	li a3, ERROR
   1c97a:	4685                	li	a3,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:98
	j exit
   1c97c:	a065                	j	1ca24 <exit>

0001c97e <gpio_input_H>:
gpio_input_H():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:102

/* 配置GPIO引脚为输入模式 */
gpio_input_H:
	li t1, 4					/* t1=4 */
   1c97e:	4311                	li	t1,4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:103
	li t3, 8					/* t3=8 */
   1c980:	4e21                	li	t3,8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:104
	sub t3,a1,t3				/* t3=((a1=引脚号)- 8)*/
   1c982:	41c58e33          	sub	t3,a1,t3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:105
	mul t1,t1,t3				/* t1= 4*(a1=引脚号) */
   1c986:	03c30333          	mul	t1,t1,t3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:106
	li t2, 0x00000000			/* PTA_0为0x00000002输出  */
   1c98a:	4381                	li	t2,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:107
	sll t2,t2,t1				/* t2<<t1位 */
   1c98c:	006393b3          	sll	t2,t2,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:108
	sw t2, 0(t0)				/* 向t0寄存器保存的地址中 写入t2寄存器中存储的数据 */
   1c990:	0072a023          	sw	t2,0(t0)

0001c994 <GPIO_PIN_L>:
GPIO_PIN_L():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:113

/* 引脚PIN小于等于7时 */
GPIO_PIN_L:
/* 算出GPIOx相对于GPIOA的偏移地址 */
	mv t0, a0					/* t0=a0=端口号 */
   1c994:	82aa                	mv	t0,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:114
	li t1, 0x400				/* t1=各端口基地址差值(0x400)*/
   1c996:	40000313          	li	t1,1024
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:115
	mul t0, t0, t1				/* t0=待操作端口与GPIO-A口的偏移地址 */
   1c99a:	026282b3          	mul	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:117
	/* 就算出GPIOx的地址给 ->t0  */
	li t1, GPIOA_CFGLR			/* 加载GPIO的地址 */
   1c99e:	40011337          	lui	t1,0x40011
   1c9a2:	80030313          	addi	t1,t1,-2048 # 40010800 <GPIOA_BASE>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:118
	add t0,t0,t1				/* t0=GPIOx端口的地址*/
   1c9a6:	929a                	add	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:121

/* 判断GPIO输出输出模式 */
	beqz a2, gpio_input_L		/* 函数第二个参数a2=0，则跳转gpio_input_L */
   1c9a8:	c605                	beqz	a2,1c9d0 <gpio_input_L>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:122
	li t4,1						/* t4=1 */
   1c9aa:	4e85                	li	t4,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:123
	beq a2,t4, gpio_output_L	/* 函数第二个参数a2=1，则跳转gpio_output_L */
   1c9ac:	01d60463          	beq	a2,t4,1c9b4 <gpio_output_L>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:124
	li a2, ERROR
   1c9b0:	4605                	li	a2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:125
	j exit
   1c9b2:	a88d                	j	1ca24 <exit>

0001c9b4 <gpio_output_L>:
gpio_output_L():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:130

/* 配置GPIO引脚为输出模式 */
gpio_output_L:
/* 配置GPIO引脚为输出模式 */
	li t1, 4					/* t1=4 */
   1c9b4:	4311                	li	t1,4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:131
	mul t1,t1,a1				/* t1= 4*(a1=引脚号) */
   1c9b6:	02b30333          	mul	t1,t1,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:132
	li t2, GPIO_PINS_0			/* PTA_0为0x00000002输出  */
   1c9ba:	4389                	li	t2,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:133
	sll t2,t2,t1				/* t2<<t1位 */
   1c9bc:	006393b3          	sll	t2,t2,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:134
	sw t2, 0(t0)				/* 向t0寄存器保存的地址中 写入t2寄存器中存储的数据 */
   1c9c0:	0072a023          	sw	t2,0(t0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:136
/* 判断GPIO输出电平状态 */
	beqz a3, ledOFF				/* 将函数第3个传参给a3，如果a3为0则跳转ledOFF */
   1c9c4:	ce9d                	beqz	a3,1ca02 <ledOFF>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:137
	li t3, LEDON				/* 给t3寄存器赋值0x01 */
   1c9c6:	4e05                	li	t3,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:138
	beq a3, t3, ledON			/* 比较a3和t3是否相等，相等则跳转置ledON */
   1c9c8:	01c68c63          	beq	a3,t3,1c9e0 <ledON>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:139
	li a3, ERROR
   1c9cc:	4685                	li	a3,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:140
	j exit
   1c9ce:	a899                	j	1ca24 <exit>

0001c9d0 <gpio_input_L>:
gpio_input_L():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:145

/* 配置GPIO引脚为输入模式 */
gpio_input_L:
/* 配置GPIO引脚为输出模式 */
	li t1, 4					/* t1=4 */
   1c9d0:	4311                	li	t1,4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:146
	mul t1,t1,a1				/* t1= 4*(a1=引脚号) */
   1c9d2:	02b30333          	mul	t1,t1,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:147
	li t2, 0x00000000			/* PTA_0为0x00000002输出  */
   1c9d6:	4381                	li	t2,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:148
	sll t2,t2,t1				/* t2<<t1位 */
   1c9d8:	006393b3          	sll	t2,t2,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:149
	sw t2, 0(t0)				/* 向t0寄存器保存的地址中 写入t2寄存器中存储的数据 */
   1c9dc:	0072a023          	sw	t2,0(t0)

0001c9e0 <ledON>:
ledON():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:153
/* 引脚清零为低电平 */
ledON:
/* 算出GPIOx的地址 */
	mv t0, a0					/* t0=t4=端口号 */
   1c9e0:	82aa                	mv	t0,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:154
	li t1, 0x400				/* t1=各端口基地址差值(0x400)*/
   1c9e2:	40000313          	li	t1,1024
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:155
	mul t0, t0, t1				/* t0=待操作端口与GPIO-A口的偏移地址 */
   1c9e6:	026282b3          	mul	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:157
/* 就算出GPIOx的地址给 ->t0  */
	li t1, GPIOA_CFGLR			/* 加载GPIO的地址 */
   1c9ea:	40011337          	lui	t1,0x40011
   1c9ee:	80030313          	addi	t1,t1,-2048 # 40010800 <GPIOA_BASE>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:158
	add t0,t0,t1				/* t0=GPIOx端口的地址*/
   1c9f2:	929a                	add	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:160
/* 对BCR寄存器进行引脚置位 */
	mv t1,a1					/* t1=a1=引脚号 */
   1c9f4:	832e                	mv	t1,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:161
	li t2, 1					/* t2=1 */
   1c9f6:	4385                	li	t2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:162
	sll t2,t2,t1				/* 将 t2=1左移t1=t5=引脚号位->t2*/
   1c9f8:	006393b3          	sll	t2,t2,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:163
	sw t2, 20(t0)				/* 将BCR寄存器置1清零，使IO引脚输出为低电平  */
   1c9fc:	0072aa23          	sw	t2,20(t0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:164
	j exit
   1ca00:	a015                	j	1ca24 <exit>

0001ca02 <ledOFF>:
ledOFF():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:168
/* 引脚清零为高电平 */
ledOFF:
/* 算出GPIOx的地址 */
	mv t0, a0					/* t0=t4=端口号 */
   1ca02:	82aa                	mv	t0,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:169
	li t1, 0x400				/* t1=各端口基地址差值(0x400)*/
   1ca04:	40000313          	li	t1,1024
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:170
	mul t0, t0, t1				/* t0=待操作端口与GPIO-A口的偏移地址 */
   1ca08:	026282b3          	mul	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:172
/* 就算出GPIOx的地址给 ->t0  */
	li t1, GPIOA_CFGLR			/* 加载GPIO的地址 */
   1ca0c:	40011337          	lui	t1,0x40011
   1ca10:	80030313          	addi	t1,t1,-2048 # 40010800 <GPIOA_BASE>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:173
	add t0,t0,t1				/* t0=GPIOx端口的地址*/
   1ca14:	929a                	add	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:175
/* 对BSHR寄存器进行引脚置位 */
	mv t1,a1					/* t1=a1=引脚号 */
   1ca16:	832e                	mv	t1,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:176
	li t2, 1					/* t2=1 */
   1ca18:	4385                	li	t2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:177
	sll t2,t2,t1				/* 将 t2=1左移t1=t5=引脚号位->t2*/
   1ca1a:	006393b3          	sll	t2,t2,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:178
	sw t2, 16(t0)				/* 将BCR寄存器置1清零，使IO引脚输出为低电平  */
   1ca1e:	0072a823          	sw	t2,16(t0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:179
	j exit
   1ca22:	a009                	j	1ca24 <exit>

0001ca24 <exit>:
exit():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:182
/* 退出并释放栈空间 */
exit:
	lw ra, 12(sp)               /* 恢复返回地址 */
   1ca24:	40b2                	lw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:183
    addi sp, sp, 16             /* 释放栈空间 */
   1ca26:	0141                	addi	sp,sp,16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:184
    ret							/* 返回 */
   1ca28:	8082                	ret

0001ca2a <gpio_set>:
gpio_set():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:201
.global gpio_set                /*将gpio_set定义成全局函数，便于芯片初始化之后调用*/
gpio_set:
/* 通过调整栈指针分配出出栈空间用于存放局部变量和存放调用函数返回地址，
      主函数中栈空间分出16字节，   ra为返回地址寄存器，占用4个字节，将ra
      中的返回地址放入sp指针地址偏移16个字节的位置*/
	addi sp, sp, -16			/* 分配栈空间*/
   1ca2a:	1141                	addi	sp,sp,-16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:202
	sw ra, 12(sp)				/* 存储返回地址 */
   1ca2c:	c606                	sw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:204

	mv a2,a1					/* 将函数第二个参数赋值给a2 */
   1ca2e:	862e                	mv	a2,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:206
	/* 计算出GPIO端口号和引脚号 */
	srli t4,a0,0x8				/* t4=a0=端口号 */
   1ca30:	00855e93          	srli	t4,a0,0x8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:207
	andi t5,a0,255				/* a2=a0=引脚号 */
   1ca34:	0ff57f13          	andi	t5,a0,255
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:208
	mv a0,t4					/* a0=端口号 */
   1ca38:	8576                	mv	a0,t4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:209
	mv a1,t5					/* a1=引脚号 */
   1ca3a:	85fa                	mv	a1,t5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:212

	/* 判断GPIO引脚是否大于8 */
	li a4, 0x08					/* a4=0x08 */
   1ca3c:	4721                	li	a4,8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:213
	bgeu t5,a4,GPIO_SET_PIN_H	/* a1>=a4时跳转 */
   1ca3e:	00ef7363          	bgeu	t5,a4,1ca44 <GPIO_SET_PIN_H>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:214
	j GPIO_SET_PIN_L
   1ca42:	a00d                	j	1ca64 <GPIO_SET_PIN_L>

0001ca44 <GPIO_SET_PIN_H>:
GPIO_SET_PIN_H():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:218
/* 引脚PIN大于7时 */
GPIO_SET_PIN_H:
	/* 算出GPIOx相对于GPIOA的偏移地址 */
	mv t0,a0					/* t0=a0=端口号 */
   1ca44:	82aa                	mv	t0,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:219
	li t1,0x400					/* t1=各端口基地址差值(0x400)*/
   1ca46:	40000313          	li	t1,1024
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:220
	mul t0,t0,t1				/* t0=待操作端口与GPIO-A口的偏移地址 */
   1ca4a:	026282b3          	mul	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:222
	/* 就算出GPIOx的地址给 ->t0  */
	li t1,GPIOA_CFGHR			/* 加载GPIOA的地址 */
   1ca4e:	40011337          	lui	t1,0x40011
   1ca52:	80430313          	addi	t1,t1,-2044 # 40010804 <GPIOA_CFGHR>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:223
	add t0,t0,t1				/* t0=GPIOx端口的地址*/
   1ca56:	929a                	add	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:233
/*	mul t1,t1,t3				/* t1= 4*(t3=引脚号) */
/*	li t2, GPIO_PINS_0			/* PTA_0为0x00000002输出  */
/*	sll t2,t2,t1				/* t2<<t1位 */
/*	sw t2, 0(t0)				/* 向t0寄存器保存的地址中 写入t2寄存器中存储的数据 */
/* 判断GPIO输出电平状态 */
	beqz a2, SET_ledOFF				/* 将函数第2个传参给a3，如果a2为0则跳转SET_ledOFF */
   1ca58:	c639                	beqz	a2,1caa6 <SET_ledOFF>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:234
	li t3, LEDON				/* 给t3寄存器赋值0x01 */
   1ca5a:	4e05                	li	t3,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:235
	beq a2, t3, SET_ledON			/* 比较a2和t3是否相等，相等则跳转置SET_ledON */
   1ca5c:	03c60463          	beq	a2,t3,1ca84 <SET_ledON>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:236
	li a2, ERROR
   1ca60:	4605                	li	a2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:237
	j SET_exit
   1ca62:	a09d                	j	1cac8 <SET_exit>

0001ca64 <GPIO_SET_PIN_L>:
GPIO_SET_PIN_L():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:241
/* 引脚PIN小于等于7时 */
GPIO_SET_PIN_L:
/* 算出GPIOx相对于GPIOA的偏移地址 */
	mv t0, a0					/* t0=t4=端口号 */
   1ca64:	82aa                	mv	t0,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:242
	li t1, 0x400				/* t1=各端口基地址差值(0x400)*/
   1ca66:	40000313          	li	t1,1024
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:243
	mul t0, t0, t1				/* t0=待操作端口与GPIO-A口的偏移地址 */
   1ca6a:	026282b3          	mul	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:245
	/* 就算出GPIOx的地址给 ->t0  */
	li t1, GPIOA_CFGLR			/* 加载GPIO的地址 */
   1ca6e:	40011337          	lui	t1,0x40011
   1ca72:	80030313          	addi	t1,t1,-2048 # 40010800 <GPIOA_BASE>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:246
	add t0,t0,t1				/* t0=GPIOx端口的地址*/
   1ca76:	929a                	add	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:254
/*	mul t1,t1,a1				/* t1= 4*(a1=引脚号) */
/*	li t2, GPIO_PINS_0			/* PTA_0为0x00000002输出  */
/*	sll t2,t2,t1				/* t2<<t1位 */
/*	sw t2, 0(t0)				/* 向t0寄存器保存的地址中 写入t2寄存器中存储的数据 */
/* 判断GPIO输出电平状态 */
	beqz a2, SET_ledOFF				/* 将函数第2个传参给a2，如果a2为0则跳转ledOFF */
   1ca78:	c61d                	beqz	a2,1caa6 <SET_ledOFF>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:255
	li t3, LEDON				/* 给t3寄存器赋值0x01 */
   1ca7a:	4e05                	li	t3,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:256
	beq a2, t3, SET_ledON			/* 比较a2和t3是否相等，相等则跳转置ledON */
   1ca7c:	01c60463          	beq	a2,t3,1ca84 <SET_ledON>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:257
	li a2, ERROR
   1ca80:	4605                	li	a2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:258
	j SET_exit
   1ca82:	a099                	j	1cac8 <SET_exit>

0001ca84 <SET_ledON>:
SET_ledON():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:262

SET_ledON:
/* 算出GPIOx的基地址 */
	mv t0, a0					/* t0=t4=端口号 */
   1ca84:	82aa                	mv	t0,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:263
	li t1, 0x400				/* t1=各端口基地址差值(0x400)*/
   1ca86:	40000313          	li	t1,1024
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:264
	mul t0, t0, t1				/* t0=待操作端口与GPIO-A口的偏移地址 */
   1ca8a:	026282b3          	mul	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:266
/* 就算出GPIOx的地址给 ->t0  */
	li t1, GPIOA_CFGLR			/* 加载GPIO的地址 */
   1ca8e:	40011337          	lui	t1,0x40011
   1ca92:	80030313          	addi	t1,t1,-2048 # 40010800 <GPIOA_BASE>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:267
	add t0,t0,t1				/* t0=GPIOx端口的地址*/
   1ca96:	929a                	add	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:269
/* 对BCR寄存器进行引脚置位 */
	mv t1,a1					/* t1=a1=引脚号 */
   1ca98:	832e                	mv	t1,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:270
	li t2, 1					/* t2=1 */
   1ca9a:	4385                	li	t2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:271
	sll t2,t2,t1				/* 将 t2=1左移t1=a1=引脚号位->t2*/
   1ca9c:	006393b3          	sll	t2,t2,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:272
	sw t2, 20(t0)				/* 将BCR寄存器置1清零，使IO引脚输出为低电平  */
   1caa0:	0072aa23          	sw	t2,20(t0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:273
	j SET_exit
   1caa4:	a015                	j	1cac8 <SET_exit>

0001caa6 <SET_ledOFF>:
SET_ledOFF():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:277
/* 引脚清零为高电平 */
SET_ledOFF:
/* 算出GPIOx的基地址 */
	mv t0, a0					/* t0=t4=端口号 */
   1caa6:	82aa                	mv	t0,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:278
	li t1, 0x400				/* t1=各端口基地址差值(0x400)*/
   1caa8:	40000313          	li	t1,1024
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:279
	mul t0, t0, t1				/* t0=待操作端口与GPIO-A口的偏移地址 */
   1caac:	026282b3          	mul	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:281
/* 就算出GPIOx的地址给 ->t0  */
	li t1, GPIOA_CFGLR			/* 加载GPIO的地址 */
   1cab0:	40011337          	lui	t1,0x40011
   1cab4:	80030313          	addi	t1,t1,-2048 # 40010800 <GPIOA_BASE>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:282
	add t0,t0,t1				/* t0=GPIOx端口的地址*/
   1cab8:	929a                	add	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:284
/* 对BSHR寄存器进行引脚置位 */
	mv t1,a1					/* t1=a1=引脚号 */
   1caba:	832e                	mv	t1,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:285
	li t2, 1					/* t2=1 */
   1cabc:	4385                	li	t2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:286
	sll t2,t2,t1				/* 将 t2=1左移t1=a1=引脚号位->t2*/
   1cabe:	006393b3          	sll	t2,t2,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:287
	sh t2, 16(t0)				/* 将BSHR寄存器置1高电平，使IO引脚输出为高电平  */
   1cac2:	00729823          	sh	t2,16(t0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:288
	j SET_exit
   1cac6:	a009                	j	1cac8 <SET_exit>

0001cac8 <SET_exit>:
SET_exit():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:291
/* 退出并释放栈空间 */
SET_exit:
	lw ra, 12(sp)               /* 恢复返回地址 */
   1cac8:	40b2                	lw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:292
    addi sp, sp, 16             /* 释放栈空间 */
   1caca:	0141                	addi	sp,sp,16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:293
    ret							/* 返回 */
   1cacc:	8082                	ret

0001cace <gpio_reverse>:
gpio_reverse():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:307
.global gpio_reverse            /*将gpio_reverse定义成全局函数，便于芯片初始化之后调用 */
gpio_reverse:
/* 通过调整栈指针分配出出栈空间用于存放局部变量和存放调用函数返回地址，
      主函数中栈空间分出16字节，   ra为返回地址寄存器，占用4个字节，将ra
      中的返回地址放入sp指针地址偏移16个字节的位置*/
	addi sp, sp, -16			/* 分配堆栈框架*/
   1cace:	1141                	addi	sp,sp,-16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:308
	sw ra, 12(sp)				/* 将寄存器地址写到堆栈上*/
   1cad0:	c606                	sw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:311

	/* 计算出GPIO端口号和引脚号 */
	srli t4,a0,0x8				/* t4=a0=端口号 */
   1cad2:	00855e93          	srli	t4,a0,0x8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:312
	andi t5,a0,255				/* a2=a0=引脚号 */
   1cad6:	0ff57f13          	andi	t5,a0,255
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:313
	mv a0,t4					/* a0=端口号 */
   1cada:	8576                	mv	a0,t4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:314
	mv a1,t5					/* a1=引脚号 */
   1cadc:	85fa                	mv	a1,t5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:317

	/* 算出GPIOx相对于GPIOA的偏移地址 */
	mv t0,a0					/* t0=a0=端口号 */
   1cade:	82aa                	mv	t0,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:318
	li t1,0x400					/* t1=各端口基地址差值(0x400)*/
   1cae0:	40000313          	li	t1,1024
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:319
	mul t0,t0,t1				/* t0=待操作端口与GPIO-A口的偏移地址 */
   1cae4:	026282b3          	mul	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:321
	/* 就算出GPIOx的地址给 ->t0  */
	li t1,GPIOA_BASE		/* 加载GPIOA的OUTDR寄存器地址 */
   1cae8:	40011337          	lui	t1,0x40011
   1caec:	80030313          	addi	t1,t1,-2048 # 40010800 <GPIOA_BASE>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:322
	add t1,t1,t0				/* t0=GPIOx端口的OUTDR寄存器地址*/
   1caf0:	9316                	add	t1,t1,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:324

	lh 	t3, 12(t1)				/* t3=待操作端口GPIO->ODR寄存器中的内容 */
   1caf2:	00c31e03          	lh	t3,12(t1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:325
	li 	t4,1
   1caf6:	4e85                	li	t4,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:326
	sll	t4,t4,a1				/* t4=待操作GPIO_ODR掩码（为1的位由a1决定） */
   1caf8:	00be9eb3          	sll	t4,t4,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:327
	and t4,t3,t4				/* 进行与运算，(gpio_ptr->OUTDR & (1u<<pin))*/
   1cafc:	01de7eb3          	and	t4,t3,t4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:330

/* 判断t3与t4运算结果是否等于0x00 */
	beqz t4, gpio_reverse_BSHR	/* t4=0,跳转 gpio_reverse_BSHR*/
   1cb00:	020e8163          	beqz	t4,1cb22 <gpio_reverse_BSHR>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:334
/* 当t4不等于0时进入BCR寄存器进行清零操作 *

  	/* 就算出GPIOx的BCR地址给 ->t0  */
	li t1,GPIOA_BASE		/* 加载GPIOA的BSHR寄存器地址 */
   1cb04:	40011337          	lui	t1,0x40011
   1cb08:	80030313          	addi	t1,t1,-2048 # 40010800 <GPIOA_BASE>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:335
	add t1,t1,t0				/* t0=GPIOx端口的BSHR寄存器地址*/
   1cb0c:	9316                	add	t1,t1,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:336
	lh t3, 20(t1)				/* 将t0地址中的内容加载到t3 */
   1cb0e:	01431e03          	lh	t3,20(t1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:338

	li t2,1						/* t2=1 */
   1cb12:	4385                	li	t2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:339
	sll t2,t2,a1				/* t2=1<<a1=引脚位 */
   1cb14:	00b393b3          	sll	t2,t2,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:340
	or t2,t2,t3					/* t3或t2 */
   1cb18:	01c3e3b3          	or	t2,t2,t3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:341
	sw t2,20(t1)				/* t0地址中写入t2的内容 */
   1cb1c:	00732a23          	sw	t2,20(t1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:342
	j gpio_reverse_exit
   1cb20:	a005                	j	1cb40 <gpio_reverse_exit>

0001cb22 <gpio_reverse_BSHR>:
gpio_reverse_BSHR():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:346

gpio_reverse_BSHR:
/* 就算出GPIOx的BSHR地址给 ->t0  */
	li t1,GPIOA_BASE			/* 加载GPIOA的BSHR寄存器地址 */
   1cb22:	40011337          	lui	t1,0x40011
   1cb26:	80030313          	addi	t1,t1,-2048 # 40010800 <GPIOA_BASE>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:347
	add t1,t1,t0				/* t0=GPIOx端口的BSHR寄存器地址*/
   1cb2a:	9316                	add	t1,t1,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:348
	lh t3,16(t1)				/* 将t0地址中的内容加载到t3 */
   1cb2c:	01031e03          	lh	t3,16(t1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:350

	li t2,1						/* t2=1 */
   1cb30:	4385                	li	t2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:351
	sll t2,t2,a1				/* t2=1<<a1=引脚位 */
   1cb32:	00b393b3          	sll	t2,t2,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:352
	or t2,t2,t3					/* t3或t2 */
   1cb36:	01c3e3b3          	or	t2,t2,t3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:353
	sw t2,16(t1)				/* t0地址中写入t2的内容 */
   1cb3a:	00732823          	sw	t2,16(t1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:354
	j gpio_reverse_exit
   1cb3e:	a009                	j	1cb40 <gpio_reverse_exit>

0001cb40 <gpio_reverse_exit>:
gpio_reverse_exit():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:357

gpio_reverse_exit:
	lw ra, 12(sp)               /* 恢复返回地址 */
   1cb40:	40b2                	lw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:358
    addi sp, sp, 16             /* 释放栈空间 */
   1cb42:	0141                	addi	sp,sp,16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:359
    ret							/* 返回 */
   1cb44:	8082                	ret

0001cb46 <gpio_get>:
gpio_get():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:373
.global gpio_get                /*将gpio_get定义成全局函数，便于芯片初始化之后调用*/
gpio_get:
/* 通过调整栈指针分配出出栈空间用于存放局部变量和存放调用函数返回地址，
      主函数中栈空间分出16字节，   ra为返回地址寄存器，占用4个字节，将ra
      中的返回地址放入sp指针地址偏移16个字节的位置*/
	addi sp, sp, -16			/* 分配堆栈框架*/
   1cb46:	1141                	addi	sp,sp,-16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:374
	sw ra, 12(sp)				/* 将寄存器地址写到堆栈上*/
   1cb48:	c606                	sw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:377

	/* 计算出GPIO端口号和引脚号 */
	srli t4,a0,0x8				/* t4=a0=端口号 */
   1cb4a:	00855e93          	srli	t4,a0,0x8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:378
	andi t5,a0,255				/* t5=a0=引脚号 */
   1cb4e:	0ff57f13          	andi	t5,a0,255
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:379
	mv a2,t4					/* a2=端口号 */
   1cb52:	8676                	mv	a2,t4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:380
	mv a3,t5					/* a3=引脚号 */
   1cb54:	86fa                	mv	a3,t5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:383

	/* 算出GPIOx相对于GPIOA的偏移地址 */
	mv t0,a2					/* t0=a0=端口号 */
   1cb56:	82b2                	mv	t0,a2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:384
	li t1,0x400					/* t1=各端口基地址差值(0x400)*/
   1cb58:	40000313          	li	t1,1024
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:385
	mul t0,t0,t1				/* t0=待操作端口相对于GPIO_A的偏移地址 */
   1cb5c:	026282b3          	mul	t0,t0,t1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:388

	/* 就算出GPIOx的地址给 ->t0  */
	li t1,GPIOA_BASE			/* 加载GPIOA的OUTDR寄存器地址 */
   1cb60:	40011337          	lui	t1,0x40011
   1cb64:	80030313          	addi	t1,t1,-2048 # 40010800 <GPIOA_BASE>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:389
	add t1,t1,t0				/* t0=GPIOx端口的OUTDR寄存器地址*/
   1cb68:	9316                	add	t1,t1,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:391

	lh t3,8(t1)					/* t3=端口GPIOx->INDR寄存器的地址  */
   1cb6a:	00831e03          	lh	t3,8(t1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:392
	li t4,1						/* t4=1 */
   1cb6e:	4e85                	li	t4,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:393
	sll t4,t4,a3				/* t4=待操作GPIO_INDR掩码（为1的位由a3=引脚号决定） */
   1cb70:	00de9eb3          	sll	t4,t4,a3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:394
	and t4,t4,t3				/* 与运算设GPIO_INDR */
   1cb74:	01cefeb3          	and	t4,t4,t3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:396
/* 判断与运算结果t4是否为0 */
	li t4,0
   1cb78:	4e81                	li	t4,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:397
	beqz t4,gpio_get_OUTDR		/* 与运算t4=0跳转 gpio_get_OUTDR*/
   1cb7a:	000e8363          	beqz	t4,1cb80 <gpio_get_OUTDR>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:399
/*	li a0,1						/* a0=1返回 */
	j gpio_get_exit
   1cb7e:	a029                	j	1cb88 <gpio_get_exit>

0001cb80 <gpio_get_OUTDR>:
gpio_get_OUTDR():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:402

gpio_get_OUTDR:
	lw ra, 12(sp)               /* 恢复返回地址 */
   1cb80:	40b2                	lw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:403
    addi sp, sp, 16             /* 释放栈空间 */
   1cb82:	0141                	addi	sp,sp,16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:404
    li  a0,1					/* 返回值1 */
   1cb84:	4505                	li	a0,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:405
    ret							/* 返回 */
   1cb86:	8082                	ret

0001cb88 <gpio_get_exit>:
gpio_get_exit():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:408

gpio_get_exit:
	lw ra, 12(sp)               /* 恢复返回地址 */
   1cb88:	40b2                	lw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:409
    addi sp, sp, 16             /* 释放栈空间*/
   1cb8a:	0141                	addi	sp,sp,16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:410
    li  a0,0					/* 返回值0 */
   1cb8c:	4501                	li	a0,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/gpio.s:411
    ret							/* 返回 */
   1cb8e:	8082                	ret
	...

0001cba0 <UART2_Handler>:
UART2_Handler():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:30
/* ===================================================================*/
UART_User_Handler:
/*（1）通过调整栈指针给出栈空间用于存放局部变量和保存调用函数的返回地址，
	     中断中栈空间分出32字节，ra为返回地址寄存器，占用4个字节，将ra中
	     的返回地址放入sp指针地址偏移28个字节的位置*/
	ADDI sp,sp,-32                	/* 分配栈空间 */
   1cba0:	1101                	addi	sp,sp,-32
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:31
    SW ra,28(sp)                	/* 存储返回地址 */
   1cba2:	ce06                	sw	ra,28(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:34
/*（2）关总中断：对mstatus（Machine Status）的MIE位（Machine Interrupt Enable）
       即第3位，  */
	LI t0, 0x8						/* t0←0x8 */
   1cba4:	42a1                	li	t0,8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:35
	CSRC mstatus, t0				/* 将mstatus寄存器中对应t0中对应为1的位清零*/
   1cba6:	3002b073          	csrc	mstatus,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:38

/*（3）取出串口发来的一个字节数据 */
	LI a0,UART_User_IRQ 		/* a0←串口号 */
   1cbaa:	4509                	li	a0,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:39
	LA t1,flag			/* 将flag地址赋给t1 */
   1cbac:	1ffe8317          	auipc	t1,0x1ffe8
   1cbb0:	50430313          	addi	t1,t1,1284 # 200050b0 <flag>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:40
	LB a1,0(t1)			/* 将t1地址中的数据赋给a1 */
   1cbb4:	00030583          	lb	a1,0(t1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:41
	CALL uart_re1		/* 调用uart_re1 */
   1cbb8:	79c000ef          	jal	ra,1d354 <uart_re1>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:42
	SB a0,0(t1)			/* 将a0中数据写入t1中地址 */
   1cbbc:	00a30023          	sb	a0,0(t1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:45

/*（4）发送字节 */
	LI a0,UART_User_IRQ	  /* a0←串口号 */
   1cbc0:	4509                	li	a0,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:46
	LB a1,0(t1)			   /* 将t1地址中的数据赋给a1 */
   1cbc2:	00030583          	lb	a1,0(t1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:47
	CALL uart_send1		   /* 调用uart_send1 */
   1cbc6:	273d                	jal	1d2f4 <uart_send1>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:50

/*（5）开总中断，恢复现场 */
	LI t0, 0x8			/*t0←0x8*/
   1cbc8:	42a1                	li	t0,8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:51
	CSRS mstatus, t0	/* 将mstatus寄存器中于t0中相对应为1的位置1*/
   1cbca:	3002a073          	csrs	mstatus,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:54

/*（6）释放栈空间 */
	LW ra, 28(sp)       /* Restore the return address 恢复返回地址 */
   1cbce:	40f2                	lw	ra,28(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:55
    ADDI sp, sp, 32     /* Deallocating the stack frame 释放栈帧 */
   1cbd0:	6105                	addi	sp,sp,32
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/isr.s:56
    RET					/* 返回 */
   1cbd2:	8082                	ret
   1cbd4:	0000                	unimp
	...

0001cbd8 <memset>:
memset():
   1cbd8:	433d                	li	t1,15
   1cbda:	872a                	mv	a4,a0
   1cbdc:	02c37363          	bgeu	t1,a2,1cc02 <memset+0x2a>
   1cbe0:	00f77793          	andi	a5,a4,15
   1cbe4:	efbd                	bnez	a5,1cc62 <memset+0x8a>
   1cbe6:	e5ad                	bnez	a1,1cc50 <memset+0x78>
   1cbe8:	ff067693          	andi	a3,a2,-16
   1cbec:	8a3d                	andi	a2,a2,15
   1cbee:	96ba                	add	a3,a3,a4
   1cbf0:	c30c                	sw	a1,0(a4)
   1cbf2:	c34c                	sw	a1,4(a4)
   1cbf4:	c70c                	sw	a1,8(a4)
   1cbf6:	c74c                	sw	a1,12(a4)
   1cbf8:	0741                	addi	a4,a4,16
   1cbfa:	fed76be3          	bltu	a4,a3,1cbf0 <memset+0x18>
   1cbfe:	e211                	bnez	a2,1cc02 <memset+0x2a>
   1cc00:	8082                	ret
   1cc02:	40c306b3          	sub	a3,t1,a2
   1cc06:	068a                	slli	a3,a3,0x2
   1cc08:	00000297          	auipc	t0,0x0
   1cc0c:	9696                	add	a3,a3,t0
   1cc0e:	00a68067          	jr	10(a3)
   1cc12:	00b70723          	sb	a1,14(a4)
   1cc16:	00b706a3          	sb	a1,13(a4)
   1cc1a:	00b70623          	sb	a1,12(a4)
   1cc1e:	00b705a3          	sb	a1,11(a4)
   1cc22:	00b70523          	sb	a1,10(a4)
   1cc26:	00b704a3          	sb	a1,9(a4)
   1cc2a:	00b70423          	sb	a1,8(a4)
   1cc2e:	00b703a3          	sb	a1,7(a4)
   1cc32:	00b70323          	sb	a1,6(a4)
   1cc36:	00b702a3          	sb	a1,5(a4)
   1cc3a:	00b70223          	sb	a1,4(a4)
   1cc3e:	00b701a3          	sb	a1,3(a4)
   1cc42:	00b70123          	sb	a1,2(a4)
   1cc46:	00b700a3          	sb	a1,1(a4)
   1cc4a:	00b70023          	sb	a1,0(a4)
   1cc4e:	8082                	ret
   1cc50:	0ff5f593          	andi	a1,a1,255
   1cc54:	00859693          	slli	a3,a1,0x8
   1cc58:	8dd5                	or	a1,a1,a3
   1cc5a:	01059693          	slli	a3,a1,0x10
   1cc5e:	8dd5                	or	a1,a1,a3
   1cc60:	b761                	j	1cbe8 <memset+0x10>
   1cc62:	00279693          	slli	a3,a5,0x2
   1cc66:	00000297          	auipc	t0,0x0
   1cc6a:	9696                	add	a3,a3,t0
   1cc6c:	8286                	mv	t0,ra
   1cc6e:	fa8680e7          	jalr	-88(a3)
   1cc72:	8096                	mv	ra,t0
   1cc74:	17c1                	addi	a5,a5,-16
   1cc76:	8f1d                	sub	a4,a4,a5
   1cc78:	963e                	add	a2,a2,a5
   1cc7a:	f8c374e3          	bgeu	t1,a2,1cc02 <memset+0x2a>
   1cc7e:	b7a5                	j	1cbe6 <memset+0xe>

0001cc80 <SetSysClockTo72>:
SetSysClockTo72():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:468
* Description    : Sets System clock frequency to 72MHz and configure HCLK, PCLK2 and PCLK1 prescalers.
* Input          : None
* Return         : None
*******************************************************************************************/
static void SetSysClockTo72(void)
{
   1cc80:	1141                	addi	sp,sp,-16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:469
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
   1cc82:	c602                	sw	zero,12(sp)
   1cc84:	c402                	sw	zero,8(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:471
     
  RCC->CTLR |= ((uint32_t)RCC_HSEON);
   1cc86:	40021737          	lui	a4,0x40021
   1cc8a:	431c                	lw	a5,0(a4)
   1cc8c:	66c1                	lui	a3,0x10
   1cc8e:	8fd5                	or	a5,a5,a3
   1cc90:	c31c                	sw	a5,0(a4)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:476 (discriminator 2)
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CTLR & RCC_HSERDY;
   1cc92:	400217b7          	lui	a5,0x40021
   1cc96:	439c                	lw	a5,0(a5)
   1cc98:	00020737          	lui	a4,0x20
   1cc9c:	8ff9                	and	a5,a5,a4
   1cc9e:	c43e                	sw	a5,8(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:477 (discriminator 2)
    StartUpCounter++;  
   1cca0:	47b2                	lw	a5,12(sp)
   1cca2:	0785                	addi	a5,a5,1
   1cca4:	c63e                	sw	a5,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:478 (discriminator 2)
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
   1cca6:	47a2                	lw	a5,8(sp)
   1cca8:	e791                	bnez	a5,1ccb4 <SetSysClockTo72+0x34>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:478 (discriminator 1)
   1ccaa:	4732                	lw	a4,12(sp)
   1ccac:	50000793          	li	a5,1280
   1ccb0:	fef711e3          	bne	a4,a5,1cc92 <SetSysClockTo72+0x12>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:480

  if ((RCC->CTLR & RCC_HSERDY) != RESET)
   1ccb4:	400217b7          	lui	a5,0x40021
   1ccb8:	439c                	lw	a5,0(a5)
   1ccba:	00e79713          	slli	a4,a5,0xe
   1ccbe:	00075a63          	bgez	a4,1ccd2 <SetSysClockTo72+0x52>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:482
  {
    HSEStatus = (uint32_t)0x01;
   1ccc2:	4785                	li	a5,1
   1ccc4:	c43e                	sw	a5,8(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:489
  else
  {
    HSEStatus = (uint32_t)0x00;
  }  

  if (HSEStatus == (uint32_t)0x01)
   1ccc6:	4722                	lw	a4,8(sp)
   1ccc8:	4785                	li	a5,1
   1ccca:	00f70663          	beq	a4,a5,1ccd6 <SetSysClockTo72+0x56>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:530
		/* 
		 * If HSE fails to start-up, the application will have wrong clock 
     * configuration. User can add here some code to deal with this error 
		 */
  }
}
   1ccce:	0141                	addi	sp,sp,16
   1ccd0:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:486
    HSEStatus = (uint32_t)0x00;
   1ccd2:	c402                	sw	zero,8(sp)
   1ccd4:	bfcd                	j	1ccc6 <SetSysClockTo72+0x46>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:492
    FLASH->ACTLR |= FLASH_ACTLR_PRFTBE;
   1ccd6:	400227b7          	lui	a5,0x40022
   1ccda:	4398                	lw	a4,0(a5)
   1ccdc:	01076713          	ori	a4,a4,16
   1cce0:	c398                	sw	a4,0(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:495
    FLASH->ACTLR &= (uint32_t)((uint32_t)~FLASH_ACTLR_LATENCY);
   1cce2:	4398                	lw	a4,0(a5)
   1cce4:	9b71                	andi	a4,a4,-4
   1cce6:	c398                	sw	a4,0(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:496
    FLASH->ACTLR |= (uint32_t)FLASH_ACTLR_LATENCY_2;    
   1cce8:	4398                	lw	a4,0(a5)
   1ccea:	00276713          	ori	a4,a4,2
   1ccee:	c398                	sw	a4,0(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:499
    RCC->CFGR0 |= (uint32_t)RCC_HPRE_DIV1; 
   1ccf0:	400217b7          	lui	a5,0x40021
   1ccf4:	43d8                	lw	a4,4(a5)
   1ccf6:	c3d8                	sw	a4,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:501
    RCC->CFGR0 |= (uint32_t)RCC_PPRE2_DIV1; 
   1ccf8:	43d8                	lw	a4,4(a5)
   1ccfa:	c3d8                	sw	a4,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:503
    RCC->CFGR0 |= (uint32_t)RCC_PPRE1_DIV2;
   1ccfc:	43d8                	lw	a4,4(a5)
   1ccfe:	40076713          	ori	a4,a4,1024
   1cd02:	c3d8                	sw	a4,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:506
    RCC->CFGR0 &= (uint32_t)((uint32_t)~(RCC_PLLSRC | RCC_PLLXTPRE |
   1cd04:	43d8                	lw	a4,4(a5)
   1cd06:	ffc106b7          	lui	a3,0xffc10
   1cd0a:	16fd                	addi	a3,a3,-1
   1cd0c:	8f75                	and	a4,a4,a3
   1cd0e:	c3d8                	sw	a4,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:508
    RCC->CFGR0 |= (uint32_t)(RCC_PLLSRC_HSE | RCC_PLLMULL9);
   1cd10:	43d8                	lw	a4,4(a5)
   1cd12:	001d06b7          	lui	a3,0x1d0
   1cd16:	8f55                	or	a4,a4,a3
   1cd18:	c3d8                	sw	a4,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:510
    RCC->CTLR |= RCC_PLLON;
   1cd1a:	4398                	lw	a4,0(a5)
   1cd1c:	010006b7          	lui	a3,0x1000
   1cd20:	8f55                	or	a4,a4,a3
   1cd22:	c398                	sw	a4,0(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:512 (discriminator 1)
    while((RCC->CTLR & RCC_PLLRDY) == 0)
   1cd24:	400217b7          	lui	a5,0x40021
   1cd28:	439c                	lw	a5,0(a5)
   1cd2a:	00679713          	slli	a4,a5,0x6
   1cd2e:	fe075be3          	bgez	a4,1cd24 <SetSysClockTo72+0xa4>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:516
    RCC->CFGR0 &= (uint32_t)((uint32_t)~(RCC_SW));
   1cd32:	400217b7          	lui	a5,0x40021
   1cd36:	43d8                	lw	a4,4(a5)
   1cd38:	9b71                	andi	a4,a4,-4
   1cd3a:	c3d8                	sw	a4,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:517
    RCC->CFGR0 |= (uint32_t)RCC_SW_PLL;    
   1cd3c:	43d8                	lw	a4,4(a5)
   1cd3e:	00276713          	ori	a4,a4,2
   1cd42:	c3d8                	sw	a4,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:519 (discriminator 1)
    while ((RCC->CFGR0 & (uint32_t)RCC_SWS) != (uint32_t)0x08)
   1cd44:	400217b7          	lui	a5,0x40021
   1cd48:	43dc                	lw	a5,4(a5)
   1cd4a:	8bb1                	andi	a5,a5,12
   1cd4c:	4721                	li	a4,8
   1cd4e:	fee79be3          	bne	a5,a4,1cd44 <SetSysClockTo72+0xc4>
   1cd52:	bfb5                	j	1ccce <SetSysClockTo72+0x4e>

0001cd54 <SetSysClock>:
SetSysClock():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:153
{
   1cd54:	1141                	addi	sp,sp,-16
   1cd56:	c606                	sw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:163
  SetSysClockTo72();
   1cd58:	3725                	jal	1cc80 <SetSysClockTo72>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:178
}
   1cd5a:	40b2                	lw	ra,12(sp)
   1cd5c:	0141                	addi	sp,sp,16
   1cd5e:	8082                	ret

0001cd60 <SystemInit>:
SystemInit():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:82
{
   1cd60:	1141                	addi	sp,sp,-16
   1cd62:	c606                	sw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:83
  RCC->CTLR |= (uint32_t)0x00000001;
   1cd64:	400217b7          	lui	a5,0x40021
   1cd68:	4398                	lw	a4,0(a5)
   1cd6a:	00176713          	ori	a4,a4,1
   1cd6e:	c398                	sw	a4,0(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:84
  RCC->CFGR0 &= (uint32_t)0xF8FF0000;
   1cd70:	43d8                	lw	a4,4(a5)
   1cd72:	f8ff06b7          	lui	a3,0xf8ff0
   1cd76:	8f75                	and	a4,a4,a3
   1cd78:	c3d8                	sw	a4,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:85
  RCC->CTLR &= (uint32_t)0xFEF6FFFF;
   1cd7a:	4398                	lw	a4,0(a5)
   1cd7c:	fef706b7          	lui	a3,0xfef70
   1cd80:	16fd                	addi	a3,a3,-1
   1cd82:	8f75                	and	a4,a4,a3
   1cd84:	c398                	sw	a4,0(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:86
  RCC->CTLR &= (uint32_t)0xFFFBFFFF;
   1cd86:	4398                	lw	a4,0(a5)
   1cd88:	fffc06b7          	lui	a3,0xfffc0
   1cd8c:	16fd                	addi	a3,a3,-1
   1cd8e:	8f75                	and	a4,a4,a3
   1cd90:	c398                	sw	a4,0(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:87
  RCC->CFGR0 &= (uint32_t)0xFF80FFFF;
   1cd92:	43d8                	lw	a4,4(a5)
   1cd94:	ff8106b7          	lui	a3,0xff810
   1cd98:	16fd                	addi	a3,a3,-1
   1cd9a:	8f75                	and	a4,a4,a3
   1cd9c:	c3d8                	sw	a4,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:88
  RCC->INTR = 0x009F0000;    
   1cd9e:	009f0737          	lui	a4,0x9f0
   1cda2:	c798                	sw	a4,8(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:89
  SetSysClock();
   1cda4:	3f45                	jal	1cd54 <SetSysClock>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/system_ch32v30x.c:90
}
   1cda6:	40b2                	lw	ra,12(sp)
   1cda8:	0141                	addi	sp,sp,16
   1cdaa:	8082                	ret

0001cdac <flash_init>:
flash_init():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:43
//功能概要：初始化flash模块
//======================================================================
void flash_init(void)
{
    //清除所有错误标志位
    FLASH->STATR &= 0xFFFFFFFF;
   1cdac:	400227b7          	lui	a5,0x40022
   1cdb0:	47d8                	lw	a4,12(a5)
   1cdb2:	c7d8                	sw	a4,12(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:46

    //解锁Flash控制寄存器
    if((FLASH->CTLR & FLASH_CTLR_LOCK )!= 0u)
   1cdb4:	4b9c                	lw	a5,16(a5)
   1cdb6:	0807f793          	andi	a5,a5,128
   1cdba:	cf99                	beqz	a5,1cdd8 <flash_init+0x2c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:48
    {
        FLASH->KEYR = (uint32_t)FLASH_KEY1;
   1cdbc:	400227b7          	lui	a5,0x40022
   1cdc0:	456706b7          	lui	a3,0x45670
   1cdc4:	12368693          	addi	a3,a3,291 # 45670123 <RCC_APB2PCENR_BASE+0x564f10b>
   1cdc8:	c3d4                	sw	a3,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:49
        FLASH->KEYR = (uint32_t)FLASH_KEY2;
   1cdca:	cdef9737          	lui	a4,0xcdef9
   1cdce:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <RCC_APB2PCENR_BASE+0x8ded7993>
   1cdd2:	c3d8                	sw	a4,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:51

        FLASH->MODEKEYR = FLASH_KEY1;
   1cdd4:	d3d4                	sw	a3,36(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:52
        FLASH->MODEKEYR = FLASH_KEY2;
   1cdd6:	d3d8                	sw	a4,36(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:56 (discriminator 1)

    }
    //等待之前最后一个flash操作完成
    while((FLASH->STATR & FLASH_STATR_BSY) != 0U);
   1cdd8:	400227b7          	lui	a5,0x40022
   1cddc:	47dc                	lw	a5,12(a5)
   1cdde:	8b85                	andi	a5,a5,1
   1cde0:	ffe5                	bnez	a5,1cdd8 <flash_init+0x2c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:59

    //清数据缓冲区
    FLASH->ACTLR &= ~FLASH_ACTLR_PRFTBE;
   1cde2:	400227b7          	lui	a5,0x40022
   1cde6:	4398                	lw	a4,0(a5)
   1cde8:	9b3d                	andi	a4,a4,-17
   1cdea:	c398                	sw	a4,0(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:61
    //清flash快速编程位
    FLASH->CTLR &= ~FLASH_CTLR_PAGE_PG;
   1cdec:	4b98                	lw	a4,16(a5)
   1cdee:	cb98                	sw	a4,16(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:63

}
   1cdf0:	8082                	ret

0001cdf2 <flash_erase>:
flash_erase():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:72
//函数返回：函数执行执行状态：0=正常；1=异常。
//参数说明：sect：目标扇区号（范围取决于实际芯片，例如 STM32L433:0~127,每扇区2KB;
//功能概要：擦除flash存储器的sect扇区
//======================================================================
uint8_t flash_erase(uint32_t sect)
{
   1cdf2:	1141                	addi	sp,sp,-16
   1cdf4:	c606                	sw	ra,12(sp)
   1cdf6:	c422                	sw	s0,8(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:75
    uint32_t address;

    address = (uint32_t)(sect*FLASH_PAGE_SIZE + FLASH_ADDR_START);
   1cdf8:	00080437          	lui	s0,0x80
   1cdfc:	942a                	add	s0,s0,a0
   1cdfe:	0422                	slli	s0,s0,0x8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:76
    flash_init();
   1ce00:	3775                	jal	1cdac <flash_init>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:78 (discriminator 1)
    //等待之前最后一个flash操作完成
    while((FLASH->STATR & STATR_BSY) != 0U);
   1ce02:	400227b7          	lui	a5,0x40022
   1ce06:	47dc                	lw	a5,12(a5)
   1ce08:	8b85                	andi	a5,a5,1
   1ce0a:	ffe5                	bnez	a5,1ce02 <flash_erase+0x10>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:80
    //清闪存即时编程位
    FLASH->CTLR &= ~FLASH_CTLR_PG_set;
   1ce0c:	400227b7          	lui	a5,0x40022
   1ce10:	4b98                	lw	a4,16(a5)
   1ce12:	9b79                	andi	a4,a4,-2
   1ce14:	cb98                	sw	a4,16(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:82
    //使能扇区快速擦除
    FLASH->CTLR |= FLASH_CTLR_PAGE_SET;
   1ce16:	4b98                	lw	a4,16(a5)
   1ce18:	000206b7          	lui	a3,0x20
   1ce1c:	8f55                	or	a4,a4,a3
   1ce1e:	cb98                	sw	a4,16(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:84
    //设置擦除扇区
    FLASH->ADDR = address;
   1ce20:	cbc0                	sw	s0,20(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:86
    //开始扇区擦除
    FLASH->CTLR |= FLASH_CTLR_START;
   1ce22:	4b98                	lw	a4,16(a5)
   1ce24:	04076713          	ori	a4,a4,64
   1ce28:	cb98                	sw	a4,16(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:88 (discriminator 1)
    //等待擦出完成
    while((FLASH->STATR & STATR_BSY) != 0U);
   1ce2a:	400227b7          	lui	a5,0x40022
   1ce2e:	47dc                	lw	a5,12(a5)
   1ce30:	8b85                	andi	a5,a5,1
   1ce32:	ffe5                	bnez	a5,1ce2a <flash_erase+0x38>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:90
    //禁止扇区擦除
    FLASH->CTLR &= ~FLASH_CTLR_PAGE_SET;
   1ce34:	400226b7          	lui	a3,0x40022
   1ce38:	4a9c                	lw	a5,16(a3)
   1ce3a:	7701                	lui	a4,0xfffe0
   1ce3c:	177d                	addi	a4,a4,-1
   1ce3e:	8ff9                	and	a5,a5,a4
   1ce40:	ca9c                	sw	a5,16(a3)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:92
    return 0;  //成功返回
}
   1ce42:	4501                	li	a0,0
   1ce44:	40b2                	lw	ra,12(sp)
   1ce46:	4422                	lw	s0,8(sp)
   1ce48:	0141                	addi	sp,sp,16
   1ce4a:	8082                	ret

0001ce4c <flash_read_logic>:
flash_read_logic():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:309
//       offset:扇区内部偏移地址（0~2024，要求为0,4,8,12，......）
//       N：读字节数目（4~2048,要求为4,8,12,......）//
//功能概要：读取flash存储器的sect扇区的 offset处开始的N字节，到RAM区dest处
//=======================================================================
void flash_read_logic(uint8_t *dest,uint16_t sect,uint16_t offset,uint16_t N)
{
   1ce4c:	1141                	addi	sp,sp,-16
   1ce4e:	c606                	sw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:311
    uint8_t *src;
    src = (uint8_t *)(FLASH_BASE + ((uint32_t)(sect*FLASH_PAGE_SIZE)) + offset);
   1ce50:	000807b7          	lui	a5,0x80
   1ce54:	95be                	add	a1,a1,a5
   1ce56:	05a2                	slli	a1,a1,0x8
   1ce58:	95b2                	add	a1,a1,a2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:312
    memcpy(dest,src,N);
   1ce5a:	8636                	mv	a2,a3
   1ce5c:	466020ef          	jal	ra,1f2c2 <memcpy>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:313
}
   1ce60:	40b2                	lw	ra,12(sp)
   1ce62:	0141                	addi	sp,sp,16
   1ce64:	8082                	ret

0001ce66 <flash_read_physical>:
flash_read_physical():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:345
//       addr：目标地址，要求为4的倍数（例如：0x00000004）
//       N：读字节数目（0~1020,要求为4，8,12,......）
//功能概要：读取flash指定地址的内容
//======================================================================
void flash_read_physical(uint8_t *dest,uint32_t addr,uint16_t N)
{
   1ce66:	1141                	addi	sp,sp,-16
   1ce68:	c606                	sw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:349

    uint8_t *src;
    src=(uint8_t *)addr;
    memcpy(dest,src,N);
   1ce6a:	458020ef          	jal	ra,1f2c2 <memcpy>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:350
}
   1ce6e:	40b2                	lw	ra,12(sp)
   1ce70:	0141                	addi	sp,sp,16
   1ce72:	8082                	ret

0001ce74 <flash_isempty>:
flash_isempty():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:479
{
    uint16_t i,flag;
    uint32_t* buff;

    flag = 1;
    for(i = 0; i<N; i++)   //遍历区域内字节
   1ce74:	4701                	li	a4,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:479 (discriminator 1)
   1ce76:	02b77163          	bgeu	a4,a1,1ce98 <flash_isempty+0x24>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:481
    {
        buff=(uint32_t*)(sect*FLASH_PAGE_SIZE + FLASH_ADDR_START );
   1ce7a:	000807b7          	lui	a5,0x80
   1ce7e:	97aa                	add	a5,a5,a0
   1ce80:	07a2                	slli	a5,a5,0x8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:483

        if(buff[i]!=0xFFFFFFFF)   //非空
   1ce82:	00271693          	slli	a3,a4,0x2
   1ce86:	97b6                	add	a5,a5,a3
   1ce88:	4394                	lw	a3,0(a5)
   1ce8a:	57fd                	li	a5,-1
   1ce8c:	00f69863          	bne	a3,a5,1ce9c <flash_isempty+0x28>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:479 (discriminator 2)
    for(i = 0; i<N; i++)   //遍历区域内字节
   1ce90:	0705                	addi	a4,a4,1
   1ce92:	0742                	slli	a4,a4,0x10
   1ce94:	8341                	srli	a4,a4,0x10
   1ce96:	b7c5                	j	1ce76 <flash_isempty+0x2>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:489
        {
            return flag=0;
            break;
        }
    }
    return flag;
   1ce98:	4505                	li	a0,1
   1ce9a:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:485
            return flag=0;
   1ce9c:	4501                	li	a0,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:490
}
   1ce9e:	8082                	ret

0001cea0 <flash_Best>:
flash_Best():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:666
uint8_t flash_Best(uint16_t sect,uint16_t offset,uint16_t N,uint8_t *buf)
{
    uint32_t temp;
    uint32_t addr;
    uint16_t i;
    addr = (uint32_t)(sect * FLASH_PAGE_SIZE + FLASH_ADDR_START + offset);
   1cea0:	000807b7          	lui	a5,0x80
   1cea4:	97aa                	add	a5,a5,a0
   1cea6:	07a2                	slli	a5,a5,0x8
   1cea8:	95be                	add	a1,a1,a5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:668

    FLASH->CTLR |= FLASH_CTLR_FTPG_PG;
   1ceaa:	40022737          	lui	a4,0x40022
   1ceae:	4b1c                	lw	a5,16(a4)
   1ceb0:	6541                	lui	a0,0x10
   1ceb2:	8fc9                	or	a5,a5,a0
   1ceb4:	cb1c                	sw	a5,16(a4)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:669 (discriminator 1)
    while(FLASH->STATR & STATR_BSY);
   1ceb6:	400227b7          	lui	a5,0x40022
   1ceba:	47dc                	lw	a5,12(a5)
   1cebc:	8b85                	andi	a5,a5,1
   1cebe:	ffe5                	bnez	a5,1ceb6 <flash_Best+0x16>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:670 (discriminator 1)
    while(FLASH->STATR & STATR_SW_BSY);
   1cec0:	400227b7          	lui	a5,0x40022
   1cec4:	47dc                	lw	a5,12(a5)
   1cec6:	8b89                	andi	a5,a5,2
   1cec8:	ffe5                	bnez	a5,1cec0 <flash_Best+0x20>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:672

    for(i = 0; i < N; i+=4)
   1ceca:	4701                	li	a4,0
   1cecc:	a021                	j	1ced4 <flash_Best+0x34>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:672 (discriminator 2)
   1cece:	0711                	addi	a4,a4,4
   1ced0:	0742                	slli	a4,a4,0x10
   1ced2:	8341                	srli	a4,a4,0x10
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:672 (discriminator 1)
   1ced4:	02c77c63          	bgeu	a4,a2,1cf0c <flash_Best+0x6c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:675
    {
      //低位字赋值
      temp = (uint32_t)((buf[i])|(buf[i+1]<<8)|(buf[i+2]<<16)|(buf[i+3]<<24));
   1ced8:	00e68533          	add	a0,a3,a4
   1cedc:	00054783          	lbu	a5,0(a0) # 10000 <GPIO_PINS_3+0xe000>
   1cee0:	00154803          	lbu	a6,1(a0)
   1cee4:	0822                	slli	a6,a6,0x8
   1cee6:	0107e7b3          	or	a5,a5,a6
   1ceea:	00254803          	lbu	a6,2(a0)
   1ceee:	0842                	slli	a6,a6,0x10
   1cef0:	0107e7b3          	or	a5,a5,a6
   1cef4:	00354503          	lbu	a0,3(a0)
   1cef8:	0562                	slli	a0,a0,0x18
   1cefa:	8fc9                	or	a5,a5,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:677
      //在绝对地址(addr+i)，实现双字写入
      *(vuint32_t*)addr = temp;
   1cefc:	c19c                	sw	a5,0(a1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:678
      addr += 4;
   1cefe:	0591                	addi	a1,a1,4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:679 (discriminator 1)
      while (FLASH->STATR & STATR_SW_BSY);
   1cf00:	400227b7          	lui	a5,0x40022
   1cf04:	47dc                	lw	a5,12(a5)
   1cf06:	8b89                	andi	a5,a5,2
   1cf08:	ffe5                	bnez	a5,1cf00 <flash_Best+0x60>
   1cf0a:	b7d1                	j	1cece <flash_Best+0x2e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:682
    }

    FLASH->CTLR |= FLASH_CTLR_PG_STRT;
   1cf0c:	40022737          	lui	a4,0x40022
   1cf10:	4b1c                	lw	a5,16(a4)
   1cf12:	002006b7          	lui	a3,0x200
   1cf16:	8fd5                	or	a5,a5,a3
   1cf18:	cb1c                	sw	a5,16(a4)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:683 (discriminator 1)
    while(FLASH->STATR & STATR_BSY);
   1cf1a:	400227b7          	lui	a5,0x40022
   1cf1e:	47dc                	lw	a5,12(a5)
   1cf20:	8b85                	andi	a5,a5,1
   1cf22:	ffe5                	bnez	a5,1cf1a <flash_Best+0x7a>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:684
    FLASH->CTLR &= ~FLASH_CTLR_FTPG_PG;
   1cf24:	400226b7          	lui	a3,0x40022
   1cf28:	4a9c                	lw	a5,16(a3)
   1cf2a:	7741                	lui	a4,0xffff0
   1cf2c:	177d                	addi	a4,a4,-1
   1cf2e:	8ff9                	and	a5,a5,a4
   1cf30:	ca9c                	sw	a5,16(a3)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:687

    return 0;
}
   1cf32:	4501                	li	a0,0
   1cf34:	8082                	ret

0001cf36 <flash_write>:
flash_write():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:180
{
   1cf36:	712d                	addi	sp,sp,-288
   1cf38:	10112e23          	sw	ra,284(sp)
   1cf3c:	10812c23          	sw	s0,280(sp)
   1cf40:	10912a23          	sw	s1,276(sp)
   1cf44:	11212823          	sw	s2,272(sp)
   1cf48:	11312623          	sw	s3,268(sp)
   1cf4c:	11412423          	sw	s4,264(sp)
   1cf50:	8a2a                	mv	s4,a0
   1cf52:	89ae                	mv	s3,a1
   1cf54:	8432                	mv	s0,a2
   1cf56:	84b6                	mv	s1,a3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:210
    if(offset+N>MCU_SECTORSIZE)
   1cf58:	00b60733          	add	a4,a2,a1
   1cf5c:	10000793          	li	a5,256
   1cf60:	04e7c363          	blt	a5,a4,1cfa6 <flash_write+0x70>
   1cf64:	892e                	mv	s2,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:221
        if(offset%4==0&&N%4==0)
   1cf66:	0035f793          	andi	a5,a1,3
   1cf6a:	e781                	bnez	a5,1cf72 <flash_write+0x3c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:221 (discriminator 1)
   1cf6c:	00367793          	andi	a5,a2,3
   1cf70:	c7ad                	beqz	a5,1cfda <flash_write+0xa4>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:229
            flash_read_logic(data,sect,0,MCU_SECTORSIZE); //将当前扇区的全部值读入数组中
   1cf72:	10000693          	li	a3,256
   1cf76:	4601                	li	a2,0
   1cf78:	85d2                	mv	a1,s4
   1cf7a:	850a                	mv	a0,sp
   1cf7c:	3dc1                	jal	1ce4c <flash_read_logic>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:231
            for(i = 0;i<N;i++)
   1cf7e:	4781                	li	a5,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:231 (discriminator 1)
   1cf80:	01079713          	slli	a4,a5,0x10
   1cf84:	8341                	srli	a4,a4,0x10
   1cf86:	04877c63          	bgeu	a4,s0,1cfde <flash_write+0xa8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:233 (discriminator 3)
                data[offset+i] = buf[i];
   1cf8a:	01278733          	add	a4,a5,s2
   1cf8e:	00f486b3          	add	a3,s1,a5
   1cf92:	0006c683          	lbu	a3,0(a3) # 40022000 <RCC_APB2PCENR_BASE+0xfe8>
   1cf96:	0210                	addi	a2,sp,256
   1cf98:	9732                	add	a4,a4,a2
   1cf9a:	f0d70023          	sb	a3,-256(a4) # fffeff00 <RCC_APB2PCENR_BASE+0xbffceee8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:231 (discriminator 3)
            for(i = 0;i<N;i++)
   1cf9e:	0785                	addi	a5,a5,1
   1cfa0:	0ff7f793          	andi	a5,a5,255
   1cfa4:	bff1                	j	1cf80 <flash_write+0x4a>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:213
        flash_write(sect,offset,MCU_SECTORSIZE-offset,buf);
   1cfa6:	10000613          	li	a2,256
   1cfaa:	8e0d                	sub	a2,a2,a1
   1cfac:	0642                	slli	a2,a2,0x10
   1cfae:	8241                	srli	a2,a2,0x10
   1cfb0:	3759                	jal	1cf36 <flash_write>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:215
        flash_write(sect+1,0,N-(MCU_SECTORSIZE-offset),buf+(MCU_SECTORSIZE-offset));
   1cfb2:	00898633          	add	a2,s3,s0
   1cfb6:	0642                	slli	a2,a2,0x10
   1cfb8:	8241                	srli	a2,a2,0x10
   1cfba:	10000693          	li	a3,256
   1cfbe:	413686b3          	sub	a3,a3,s3
   1cfc2:	f0060613          	addi	a2,a2,-256
   1cfc6:	001a0513          	addi	a0,s4,1
   1cfca:	96a6                	add	a3,a3,s1
   1cfcc:	0642                	slli	a2,a2,0x10
   1cfce:	8241                	srli	a2,a2,0x10
   1cfd0:	4581                	li	a1,0
   1cfd2:	0542                	slli	a0,a0,0x10
   1cfd4:	8141                	srli	a0,a0,0x10
   1cfd6:	3785                	jal	1cf36 <flash_write>
   1cfd8:	a819                	j	1cfee <flash_write+0xb8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:223
            flash_Best(sect,offset,N,buf);
   1cfda:	35d9                	jal	1cea0 <flash_Best>
   1cfdc:	a809                	j	1cfee <flash_write+0xb8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:236
            flash_erase(sect);
   1cfde:	8552                	mv	a0,s4
   1cfe0:	3d09                	jal	1cdf2 <flash_erase>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:238
            flash_Best(sect,0,MCU_SECTORSIZE,data);
   1cfe2:	868a                	mv	a3,sp
   1cfe4:	10000613          	li	a2,256
   1cfe8:	4581                	li	a1,0
   1cfea:	8552                	mv	a0,s4
   1cfec:	3d55                	jal	1cea0 <flash_Best>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:242
}
   1cfee:	4501                	li	a0,0
   1cff0:	11c12083          	lw	ra,284(sp)
   1cff4:	11812403          	lw	s0,280(sp)
   1cff8:	11412483          	lw	s1,276(sp)
   1cffc:	11012903          	lw	s2,272(sp)
   1d000:	10c12983          	lw	s3,268(sp)
   1d004:	10812a03          	lw	s4,264(sp)
   1d008:	6115                	addi	sp,sp,288
   1d00a:	8082                	ret

0001d00c <flash_write_physical>:
flash_write_physical():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:284
{
   1d00c:	1141                	addi	sp,sp,-16
   1d00e:	c606                	sw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:290
    sect = (addr-MCU_FLASH_ADDR_START)/MCU_SECTORSIZE;
   1d010:	f80007b7          	lui	a5,0xf8000
   1d014:	97aa                	add	a5,a5,a0
   1d016:	83a1                	srli	a5,a5,0x8
   1d018:	07c2                	slli	a5,a5,0x10
   1d01a:	83c1                	srli	a5,a5,0x10
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:291
    offset = addr-(sect*MCU_SECTORSIZE)-MCU_FLASH_ADDR_START;
   1d01c:	0542                	slli	a0,a0,0x10
   1d01e:	8141                	srli	a0,a0,0x10
   1d020:	00879713          	slli	a4,a5,0x8
   1d024:	0742                	slli	a4,a4,0x10
   1d026:	8341                	srli	a4,a4,0x10
   1d028:	8d19                	sub	a0,a0,a4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:293
    flash_write(sect,offset,N,buf);
   1d02a:	86b2                	mv	a3,a2
   1d02c:	862e                	mv	a2,a1
   1d02e:	01051593          	slli	a1,a0,0x10
   1d032:	81c1                	srli	a1,a1,0x10
   1d034:	853e                	mv	a0,a5
   1d036:	3701                	jal	1cf36 <flash_write>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:295 (discriminator 1)
    while( (FLASH->STATR & STATR_BSY) != 0U);
   1d038:	400227b7          	lui	a5,0x40022
   1d03c:	47dc                	lw	a5,12(a5)
   1d03e:	8b85                	andi	a5,a5,1
   1d040:	ffe5                	bnez	a5,1d038 <flash_write_physical+0x2c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/flash.c:297
}
   1d042:	4501                	li	a0,0
   1d044:	40b2                	lw	ra,12(sp)
   1d046:	0141                	addi	sp,sp,16
   1d048:	8082                	ret

0001d04a <Vectors_Init>:
Vectors_Init():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:16
//参数说明：无
//功能概要：User对BIOS中断向量表的部分继承,构件库函数指针初始化
//修改信息：WYH，20200805，规范
//======================================================================
void  Vectors_Init()
{
   1d04a:	bf010113          	addi	sp,sp,-1040
   1d04e:	40112623          	sw	ra,1036(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:20
    //有用户程序，编译本段代码
    #if (GEC_USER_SECTOR_START!=0)
    //（1）若Flash倒数1扇区的前24字节为空，则写入设备序列号及软件版本号初值
    if(flash_isempty(MCU_SECTOR_NUM-1,24))
   1d052:	45e1                	li	a1,24
   1d054:	77f00513          	li	a0,1919
   1d058:	3d31                	jal	1ce74 <flash_isempty>
   1d05a:	e521                	bnez	a0,1d0a2 <Vectors_Init+0x58>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:30

    //（2）继承BIOS的中断
    void ** bios = (void *)MCU_FLASH_ADDR_START;    //BIOS向量表起始地址
    uint32_t user[MCU_SECTORSIZE];                 //User向量表变量数组
    //（2.1）读取User程序的中断向量表各中断处理程序首地址赋并给user数组
    flash_read_physical((uint8_t *)user,GEC_USER_SECTOR_START*
   1d05c:	20000613          	li	a2,512
   1d060:	0801c5b7          	lui	a1,0x801c
   1d064:	40058593          	addi	a1,a1,1024 # 801c400 <SystemCoreClock+0x3b72200>
   1d068:	850a                	mv	a0,sp
   1d06a:	3bf5                	jal	1ce66 <flash_read_physical>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:33
               MCU_SECTORSIZE+MCU_FLASH_ADDR_START,MCU_SECTORSIZE*2);
 	//（2.2）读取User程序的中断向量表各中断处理程序首地址赋并给user数组
    if (user[BIOS_UPDATE_IRQn] != (uint32_t)bios[BIOS_UPDATE_IRQn])
   1d06c:	10c12703          	lw	a4,268(sp)
   1d070:	080007b7          	lui	a5,0x8000
   1d074:	10c7a783          	lw	a5,268(a5) # 800010c <SystemCoreClock+0x3b55f0c>
   1d078:	04f71063          	bne	a4,a5,1d0b8 <Vectors_Init+0x6e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:54
        flash_write_physical(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
               MCU_FLASH_ADDR_START,MCU_SECTORSIZE*2,(uint8_t *)user);
    }

    //（3）给component_fun赋值，SYSTEM_FUNCTION函数用
    component_fun=(void **)(MCU_FLASH_ADDR_START+GEC_COMPONENT_LST_START*MCU_SECTORSIZE);
   1d07c:	20005737          	lui	a4,0x20005
   1d080:	080117b7          	lui	a5,0x8011
   1d084:	40078793          	addi	a5,a5,1024 # 8011400 <SystemCoreClock+0x3b67200>
   1d088:	0af72c23          	sw	a5,184(a4) # 200050b8 <_edata>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:57

    //（4）printf提示
    printf("  【User提示】：将进入User的main函数执行...\r\n\n");
   1d08c:	0001f537          	lui	a0,0x1f
   1d090:	3c450513          	addi	a0,a0,964 # 1f3c4 <strlen+0x4c>
   1d094:	3bd000ef          	jal	ra,1dc50 <myprintf>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:61
    
 
    #endif
}
   1d098:	40c12083          	lw	ra,1036(sp)
   1d09c:	41010113          	addi	sp,sp,1040
   1d0a0:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:22
        flash_write_physical((MCU_SECTOR_NUM-1)*MCU_SECTORSIZE+
   1d0a2:	0001f637          	lui	a2,0x1f
   1d0a6:	38c60613          	addi	a2,a2,908 # 1f38c <strlen+0x14>
   1d0aa:	45e1                	li	a1,24
   1d0ac:	08078537          	lui	a0,0x8078
   1d0b0:	f0050513          	addi	a0,a0,-256 # 8077f00 <SystemCoreClock+0x3bcdd00>
   1d0b4:	3fa1                	jal	1d00c <flash_write_physical>
   1d0b6:	b75d                	j	1d05c <Vectors_Init+0x12>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:35
        printf("  【User提示】：中断继承\r\n");
   1d0b8:	0001f537          	lui	a0,0x1f
   1d0bc:	3a850513          	addi	a0,a0,936 # 1f3a8 <strlen+0x30>
   1d0c0:	391000ef          	jal	ra,1dc50 <myprintf>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:37
        flash_erase(GEC_USER_SECTOR_START);
   1d0c4:	1c400513          	li	a0,452
   1d0c8:	332d                	jal	1cdf2 <flash_erase>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:38
        flash_erase(GEC_USER_SECTOR_START+1);
   1d0ca:	1c500513          	li	a0,453
   1d0ce:	3315                	jal	1cdf2 <flash_erase>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:42
        user[BIOS_UPDATE_IRQn]=(uint32_t)bios[BIOS_UPDATE_IRQn];
   1d0d0:	080007b7          	lui	a5,0x8000
   1d0d4:	10c7a783          	lw	a5,268(a5) # 800010c <SystemCoreClock+0x3b55f0c>
   1d0d8:	10f12623          	sw	a5,268(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/gec.c:49
        flash_write_physical(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
   1d0dc:	860a                	mv	a2,sp
   1d0de:	20000593          	li	a1,512
   1d0e2:	0801c537          	lui	a0,0x801c
   1d0e6:	40050513          	addi	a0,a0,1024 # 801c400 <SystemCoreClock+0x3b72200>
   1d0ea:	370d                	jal	1d00c <flash_write_physical>
   1d0ec:	bf41                	j	1d07c <Vectors_Init+0x32>

0001d0ee <uart_is_uartNo>:
uart_is_uartNo():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:507
//参数说明：串口号uartNo  :UART_1、UART_2、UART_3
//功能概要：为程序健壮性而判断uartNo是否在串口数字范围内
//=====================================================================
uint8_t uart_is_uartNo(uint8_t uartNo)
{
    if(uartNo < UART_1 || uartNo > UART_3)
   1d0ee:	157d                	addi	a0,a0,-1
   1d0f0:	0ff57513          	andi	a0,a0,255
   1d0f4:	4789                	li	a5,2
   1d0f6:	00a7f463          	bgeu	a5,a0,1d0fe <uart_is_uartNo+0x10>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:508
        return 0;
   1d0fa:	4501                	li	a0,0
   1d0fc:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:510
    else
        return 1;
   1d0fe:	4505                	li	a0,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:511
}
   1d100:	8082                	ret

0001d102 <uart_init>:
uart_init():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:31
{
   1d102:	1141                	addi	sp,sp,-16
   1d104:	c606                	sw	ra,12(sp)
   1d106:	c422                	sw	s0,8(sp)
   1d108:	c226                	sw	s1,4(sp)
   1d10a:	84aa                	mv	s1,a0
   1d10c:	842e                	mv	s0,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:35
    if(!uart_is_uartNo(uartNo))
   1d10e:	37c5                	jal	1d0ee <uart_is_uartNo>
   1d110:	cd71                	beqz	a0,1d1ec <uart_init+0xea>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:41
    switch(uartNo)
   1d112:	4789                	li	a5,2
   1d114:	12f48463          	beq	s1,a5,1d23c <uart_init+0x13a>
   1d118:	478d                	li	a5,3
   1d11a:	14f48f63          	beq	s1,a5,1d278 <uart_init+0x176>
   1d11e:	4785                	li	a5,1
   1d120:	0cf48b63          	beq	s1,a5,1d1f6 <uart_init+0xf4>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:136
    USART_ARR[uartNo-1]->CTLR1 &= ~USART_CTLR1_UE;
   1d124:	14fd                	addi	s1,s1,-1
   1d126:	00249793          	slli	a5,s1,0x2
   1d12a:	20005737          	lui	a4,0x20005
   1d12e:	00070713          	mv	a4,a4
   1d132:	973e                	add	a4,a4,a5
   1d134:	4318                	lw	a4,0(a4)
   1d136:	00c75783          	lhu	a5,12(a4) # 2000500c <table_irq_uart>
   1d13a:	76f9                	lui	a3,0xffffe
   1d13c:	16fd                	addi	a3,a3,-1
   1d13e:	8efd                	and	a3,a3,a5
   1d140:	00d71623          	sh	a3,12(a4)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:138
    USART_ARR[uartNo-1]->CTLR1 &= ~(USART_CTLR1_TE|USART_CTLR1_RE);
   1d144:	00c75783          	lhu	a5,12(a4)
   1d148:	07c2                	slli	a5,a5,0x10
   1d14a:	83c1                	srli	a5,a5,0x10
   1d14c:	9bcd                	andi	a5,a5,-13
   1d14e:	07c2                	slli	a5,a5,0x10
   1d150:	83c1                	srli	a5,a5,0x10
   1d152:	00f71623          	sh	a5,12(a4)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:141
    if(USART_ARR[uartNo-1]==(USART_TypeDef*)USART1_BASE)
   1d156:	400147b7          	lui	a5,0x40014
   1d15a:	80078793          	addi	a5,a5,-2048 # 40013800 <GPIOC_BSHR+0x27f0>
   1d15e:	14f70b63          	beq	a4,a5,1d2b4 <uart_init+0x1b2>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:149
        DIV_M = (uint16_t)(SYSCLK_FREQ_72MHz/(16*2*baud_rate));
   1d162:	0416                	slli	s0,s0,0x5
   1d164:	044aa7b7          	lui	a5,0x44aa
   1d168:	20078793          	addi	a5,a5,512 # 44aa200 <SystemCoreClock>
   1d16c:	0287d7b3          	divu	a5,a5,s0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:150
        DIV_F = (uint16_t)((((100000*SYSCLK_FREQ_72MHz/(16*2*baud_rate))%100000)*16)/100000);
   1d170:	617146b7          	lui	a3,0x61714
   1d174:	0286d6b3          	divu	a3,a3,s0
   1d178:	6661                	lui	a2,0x18
   1d17a:	6a060613          	addi	a2,a2,1696 # 186a0 <GPIO_PINS_3+0x166a0>
   1d17e:	02c6f6b3          	remu	a3,a3,a2
   1d182:	0692                	slli	a3,a3,0x4
   1d184:	02c6d6b3          	divu	a3,a3,a2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:151
        USART_ARR[uartNo-1]->BRR = (uint16_t)((DIV_M)<<4|DIV_F);
   1d188:	0792                	slli	a5,a5,0x4
   1d18a:	00100637          	lui	a2,0x100
   1d18e:	1641                	addi	a2,a2,-16
   1d190:	8ff1                	and	a5,a5,a2
   1d192:	8fd5                	or	a5,a5,a3
   1d194:	07c2                	slli	a5,a5,0x10
   1d196:	83c1                	srli	a5,a5,0x10
   1d198:	00f71423          	sh	a5,8(a4)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:154
    USART_ARR[uartNo-1]->STATR = 0;
   1d19c:	048a                	slli	s1,s1,0x2
   1d19e:	200057b7          	lui	a5,0x20005
   1d1a2:	00078793          	mv	a5,a5
   1d1a6:	97a6                	add	a5,a5,s1
   1d1a8:	4398                	lw	a4,0(a5)
   1d1aa:	00071023          	sh	zero,0(a4)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:155
    USART_ARR[uartNo-1]->CTLR2 &= ~(USART_CTLR2_LINEN | USART_CTLR2_CLKEN);
   1d1ae:	439c                	lw	a5,0(a5)
   1d1b0:	0107d683          	lhu	a3,16(a5) # 20005010 <table_irq_uart+0x4>
   1d1b4:	776d                	lui	a4,0xffffb
   1d1b6:	7ff70713          	addi	a4,a4,2047 # ffffb7ff <RCC_APB2PCENR_BASE+0xbffda7e7>
   1d1ba:	8f75                	and	a4,a4,a3
   1d1bc:	00e79823          	sh	a4,16(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:156
    USART_ARR[uartNo-1]->CTLR3 &= ~(USART_CTLR3_SCEN | USART_CTLR3_HDSEL | USART_CTLR3_IREN);
   1d1c0:	0147d703          	lhu	a4,20(a5)
   1d1c4:	0742                	slli	a4,a4,0x10
   1d1c6:	8341                	srli	a4,a4,0x10
   1d1c8:	fd577713          	andi	a4,a4,-43
   1d1cc:	0742                	slli	a4,a4,0x10
   1d1ce:	8341                	srli	a4,a4,0x10
   1d1d0:	00e79a23          	sh	a4,20(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:158
    USART_ARR[uartNo-1]->CTLR1 |= (USART_CTLR1_TE|USART_CTLR1_RE);
   1d1d4:	00c7d703          	lhu	a4,12(a5)
   1d1d8:	00c76713          	ori	a4,a4,12
   1d1dc:	00e79623          	sh	a4,12(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:161
    USART_ARR[uartNo-1]->CTLR1 |= USART_CTLR1_UE;
   1d1e0:	00c7d703          	lhu	a4,12(a5)
   1d1e4:	6689                	lui	a3,0x2
   1d1e6:	8f55                	or	a4,a4,a3
   1d1e8:	00e79623          	sh	a4,12(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:163
}
   1d1ec:	40b2                	lw	ra,12(sp)
   1d1ee:	4422                	lw	s0,8(sp)
   1d1f0:	4492                	lw	s1,4(sp)
   1d1f2:	0141                	addi	sp,sp,16
   1d1f4:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:50
            RCC->APB2PCENR |= RCC_USART1EN;
   1d1f6:	400217b7          	lui	a5,0x40021
   1d1fa:	4f98                	lw	a4,24(a5)
   1d1fc:	6691                	lui	a3,0x4
   1d1fe:	8f55                	or	a4,a4,a3
   1d200:	cf98                	sw	a4,24(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:51
            RCC->APB2PCENR |= RCC_AFIOEN;
   1d202:	4f98                	lw	a4,24(a5)
   1d204:	00176713          	ori	a4,a4,1
   1d208:	cf98                	sw	a4,24(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:52
            RCC->APB2PCENR |= RCC_IOPAEN;
   1d20a:	4f98                	lw	a4,24(a5)
   1d20c:	00476713          	ori	a4,a4,4
   1d210:	cf98                	sw	a4,24(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:54
            GPIOA->CFGHR &= ~(GPIO_CFGHR_MODE9|GPIO_CFGHR_MODE10);
   1d212:	400117b7          	lui	a5,0x40011
   1d216:	8047a703          	lw	a4,-2044(a5) # 40010804 <GPIOA_CFGHR>
   1d21a:	ccf77713          	andi	a4,a4,-817
   1d21e:	80e7a223          	sw	a4,-2044(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:55
            GPIOA->CFGHR |= ((GPIO_CFGHR_MODE9_1|GPIO_CFGHR_CNF9_1)|(GPIO_CFGHR_CNF10_1));
   1d222:	8047a703          	lw	a4,-2044(a5)
   1d226:	6685                	lui	a3,0x1
   1d228:	8a068693          	addi	a3,a3,-1888 # 8a0 <__stack_size+0xa0>
   1d22c:	8f55                	or	a4,a4,a3
   1d22e:	80e7a223          	sw	a4,-2044(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:56
            AFIO->PCFR1 |= 0;
   1d232:	400107b7          	lui	a5,0x40010
   1d236:	43d8                	lw	a4,4(a5)
   1d238:	c3d8                	sw	a4,4(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:73
        break;
   1d23a:	b5ed                	j	1d124 <uart_init+0x22>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:82
            RCC->APB1PCENR |= RCC_USART2EN;
   1d23c:	400217b7          	lui	a5,0x40021
   1d240:	4fd8                	lw	a4,28(a5)
   1d242:	000206b7          	lui	a3,0x20
   1d246:	8f55                	or	a4,a4,a3
   1d248:	cfd8                	sw	a4,28(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:83
            RCC->APB2PCENR |= RCC_IOPAEN;
   1d24a:	4f98                	lw	a4,24(a5)
   1d24c:	00476713          	ori	a4,a4,4
   1d250:	cf98                	sw	a4,24(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:85
            GPIOA->CFGLR &= ~(GPIO_CFGLR_CNF2|GPIO_CFGLR_CNF3);
   1d252:	400117b7          	lui	a5,0x40011
   1d256:	8007a703          	lw	a4,-2048(a5) # 40010800 <GPIOA_BASE>
   1d25a:	76cd                	lui	a3,0xffff3
   1d25c:	3ff68693          	addi	a3,a3,1023 # ffff33ff <RCC_APB2PCENR_BASE+0xbffd23e7>
   1d260:	8f75                	and	a4,a4,a3
   1d262:	80e7a023          	sw	a4,-2048(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:86
            GPIOA->CFGLR |= ((GPIO_CFGLR_CNF2_1|GPIO_CFGLR_MODE2_1)|(GPIO_CFGLR_CNF3_0));
   1d266:	8007a703          	lw	a4,-2048(a5)
   1d26a:	6695                	lui	a3,0x5
   1d26c:	a0068693          	addi	a3,a3,-1536 # 4a00 <GPIO_PINS_3+0x2a00>
   1d270:	8f55                	or	a4,a4,a3
   1d272:	80e7a023          	sw	a4,-2048(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:103
        break;
   1d276:	b57d                	j	1d124 <uart_init+0x22>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:112
            RCC->APB1PCENR |= RCC_USART3EN;
   1d278:	400217b7          	lui	a5,0x40021
   1d27c:	4fd8                	lw	a4,28(a5)
   1d27e:	000406b7          	lui	a3,0x40
   1d282:	8f55                	or	a4,a4,a3
   1d284:	cfd8                	sw	a4,28(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:113
            RCC->APB2PCENR |= RCC_IOPBEN;
   1d286:	4f98                	lw	a4,24(a5)
   1d288:	00876713          	ori	a4,a4,8
   1d28c:	cf98                	sw	a4,24(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:115
            GPIOB->CFGHR &= ~(GPIO_CFGHR_CNF10|GPIO_CFGHR_CNF11);
   1d28e:	400117b7          	lui	a5,0x40011
   1d292:	c047a703          	lw	a4,-1020(a5) # 40010c04 <GPIOB_CFGHR>
   1d296:	76cd                	lui	a3,0xffff3
   1d298:	3ff68693          	addi	a3,a3,1023 # ffff33ff <RCC_APB2PCENR_BASE+0xbffd23e7>
   1d29c:	8f75                	and	a4,a4,a3
   1d29e:	c0e7a223          	sw	a4,-1020(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:116
            GPIOB->CFGHR |= ((GPIO_CFGHR_CNF10_1|GPIO_CFGHR_MODE10_1)|(GPIO_CFGHR_CNF11_0));
   1d2a2:	c047a703          	lw	a4,-1020(a5)
   1d2a6:	6695                	lui	a3,0x5
   1d2a8:	a0068693          	addi	a3,a3,-1536 # 4a00 <GPIO_PINS_3+0x2a00>
   1d2ac:	8f55                	or	a4,a4,a3
   1d2ae:	c0e7a223          	sw	a4,-1020(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:133
        break;
   1d2b2:	bd8d                	j	1d124 <uart_init+0x22>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:143
        DIV_M = (uint16_t)(SYSCLK_FREQ_72MHz/(16*baud_rate));
   1d2b4:	0412                	slli	s0,s0,0x4
   1d2b6:	044aa7b7          	lui	a5,0x44aa
   1d2ba:	20078793          	addi	a5,a5,512 # 44aa200 <SystemCoreClock>
   1d2be:	0287d7b3          	divu	a5,a5,s0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:144
        DIV_F = (uint16_t)((((10000*SYSCLK_FREQ_72MHz/(16*baud_rate))%10000)*16)/1000);
   1d2c2:	a35826b7          	lui	a3,0xa3582
   1d2c6:	0286d6b3          	divu	a3,a3,s0
   1d2ca:	6409                	lui	s0,0x2
   1d2cc:	71040413          	addi	s0,s0,1808 # 2710 <GPIO_PINS_3+0x710>
   1d2d0:	0286f6b3          	remu	a3,a3,s0
   1d2d4:	0692                	slli	a3,a3,0x4
   1d2d6:	3e800613          	li	a2,1000
   1d2da:	02c6d6b3          	divu	a3,a3,a2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:145
        USART_ARR[uartNo-1]->BRR = (uint16_t)(DIV_M<<4|DIV_F);
   1d2de:	0792                	slli	a5,a5,0x4
   1d2e0:	00100637          	lui	a2,0x100
   1d2e4:	1641                	addi	a2,a2,-16
   1d2e6:	8ff1                	and	a5,a5,a2
   1d2e8:	8fd5                	or	a5,a5,a3
   1d2ea:	07c2                	slli	a5,a5,0x10
   1d2ec:	83c1                	srli	a5,a5,0x10
   1d2ee:	00f71423          	sh	a5,8(a4)
   1d2f2:	b56d                	j	1d19c <uart_init+0x9a>

0001d2f4 <uart_send1>:
uart_send1():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:173
{
   1d2f4:	1141                	addi	sp,sp,-16
   1d2f6:	c606                	sw	ra,12(sp)
   1d2f8:	c422                	sw	s0,8(sp)
   1d2fa:	c226                	sw	s1,4(sp)
   1d2fc:	842a                	mv	s0,a0
   1d2fe:	84ae                	mv	s1,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:177
    if(!uart_is_uartNo(uartNo))
   1d300:	33fd                	jal	1d0ee <uart_is_uartNo>
   1d302:	c131                	beqz	a0,1d346 <uart_send1+0x52>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:181
    for(t = 0; t< 0xFBBB; t++)
   1d304:	4681                	li	a3,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:181 (discriminator 1)
   1d306:	67c1                	lui	a5,0x10
   1d308:	bba78793          	addi	a5,a5,-1094 # fbba <GPIO_PINS_3+0xdbba>
   1d30c:	02d7e763          	bltu	a5,a3,1d33a <uart_send1+0x46>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:184
        if(USART_ARR[uartNo-1]->STATR & USART_STATR_TXE)
   1d310:	fff40793          	addi	a5,s0,-1
   1d314:	00279713          	slli	a4,a5,0x2
   1d318:	200057b7          	lui	a5,0x20005
   1d31c:	00078793          	mv	a5,a5
   1d320:	97ba                	add	a5,a5,a4
   1d322:	4398                	lw	a4,0(a5)
   1d324:	00075783          	lhu	a5,0(a4)
   1d328:	0807f793          	andi	a5,a5,128
   1d32c:	e399                	bnez	a5,1d332 <uart_send1+0x3e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:181 (discriminator 2)
    for(t = 0; t< 0xFBBB; t++)
   1d32e:	0685                	addi	a3,a3,1
   1d330:	bfd9                	j	1d306 <uart_send1+0x12>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:186
            USART_ARR[uartNo-1]->DATAR = (ch & USART_DATAR_DR);
   1d332:	04c2                	slli	s1,s1,0x10
   1d334:	80c1                	srli	s1,s1,0x10
   1d336:	00971223          	sh	s1,4(a4)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:190
    if(t >= 0xFBBB)
   1d33a:	67c1                	lui	a5,0x10
   1d33c:	bba78793          	addi	a5,a5,-1094 # fbba <GPIO_PINS_3+0xdbba>
   1d340:	00d7f863          	bgeu	a5,a3,1d350 <uart_send1+0x5c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:192
        return 0; //发送超时，发送失败
   1d344:	4501                	li	a0,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:197
}
   1d346:	40b2                	lw	ra,12(sp)
   1d348:	4422                	lw	s0,8(sp)
   1d34a:	4492                	lw	s1,4(sp)
   1d34c:	0141                	addi	sp,sp,16
   1d34e:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:196
        return 1;
   1d350:	4505                	li	a0,1
   1d352:	bfd5                	j	1d346 <uart_send1+0x52>

0001d354 <uart_re1>:
uart_re1():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:266
{
   1d354:	1141                	addi	sp,sp,-16
   1d356:	c606                	sw	ra,12(sp)
   1d358:	c422                	sw	s0,8(sp)
   1d35a:	c226                	sw	s1,4(sp)
   1d35c:	842a                	mv	s0,a0
   1d35e:	84ae                	mv	s1,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:271
    if(!uart_is_uartNo(uartNo))
   1d360:	3379                	jal	1d0ee <uart_is_uartNo>
   1d362:	c905                	beqz	a0,1d392 <uart_re1+0x3e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:277
    for(t=0; t< 0xFBBB; t++)
   1d364:	4681                	li	a3,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:277 (discriminator 1)
   1d366:	67c1                	lui	a5,0x10
   1d368:	bba78793          	addi	a5,a5,-1094 # fbba <GPIO_PINS_3+0xdbba>
   1d36c:	02d7ed63          	bltu	a5,a3,1d3a6 <uart_re1+0x52>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:280
        if(USART_ARR[uartNo-1]->STATR & USART_STATR_RXNE)
   1d370:	fff40793          	addi	a5,s0,-1
   1d374:	00279713          	slli	a4,a5,0x2
   1d378:	200057b7          	lui	a5,0x20005
   1d37c:	00078793          	mv	a5,a5
   1d380:	97ba                	add	a5,a5,a4
   1d382:	4398                	lw	a4,0(a5)
   1d384:	00075783          	lhu	a5,0(a4)
   1d388:	0207f793          	andi	a5,a5,32
   1d38c:	e791                	bnez	a5,1d398 <uart_re1+0x44>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:277 (discriminator 2)
    for(t=0; t< 0xFBBB; t++)
   1d38e:	0685                	addi	a3,a3,1
   1d390:	bfd9                	j	1d366 <uart_re1+0x12>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:273
        *fp = 0;
   1d392:	00048023          	sb	zero,0(s1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:274
        return 0;
   1d396:	a829                	j	1d3b0 <uart_re1+0x5c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:282
            dat = (USART_ARR[uartNo-1]->DATAR & USART_DATAR_DR); // 获取数据，清接收中断位
   1d398:	00475503          	lhu	a0,4(a4)
   1d39c:	0ff57513          	andi	a0,a0,255
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:283
            *fp = 1; //接收成功
   1d3a0:	4785                	li	a5,1
   1d3a2:	00f48023          	sb	a5,0(s1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:287
    if(t>=0xFBBB)
   1d3a6:	67c1                	lui	a5,0x10
   1d3a8:	bba78793          	addi	a5,a5,-1094 # fbba <GPIO_PINS_3+0xdbba>
   1d3ac:	00d7e763          	bltu	a5,a3,1d3ba <uart_re1+0x66>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:295
}
   1d3b0:	40b2                	lw	ra,12(sp)
   1d3b2:	4422                	lw	s0,8(sp)
   1d3b4:	4492                	lw	s1,4(sp)
   1d3b6:	0141                	addi	sp,sp,16
   1d3b8:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:290
        *fp = 0;
   1d3ba:	00048023          	sb	zero,0(s1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:289
        dat = 0xFF;
   1d3be:	0ff00513          	li	a0,255
   1d3c2:	b7fd                	j	1d3b0 <uart_re1+0x5c>

0001d3c4 <uart_enable_re_int>:
uart_enable_re_int():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:337
{
   1d3c4:	1141                	addi	sp,sp,-16
   1d3c6:	c606                	sw	ra,12(sp)
   1d3c8:	c422                	sw	s0,8(sp)
   1d3ca:	842a                	mv	s0,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:339
    if(!uart_is_uartNo(uartNo))
   1d3cc:	330d                	jal	1d0ee <uart_is_uartNo>
   1d3ce:	c131                	beqz	a0,1d412 <uart_enable_re_int+0x4e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:344
    USART_ARR[uartNo-1]->CTLR1 |= USART_CTLR1_RXNEIE;    //开放UART接收中断
   1d3d0:	fff40513          	addi	a0,s0,-1
   1d3d4:	050a                	slli	a0,a0,0x2
   1d3d6:	200057b7          	lui	a5,0x20005
   1d3da:	00078793          	mv	a5,a5
   1d3de:	97aa                	add	a5,a5,a0
   1d3e0:	4398                	lw	a4,0(a5)
   1d3e2:	00c75783          	lhu	a5,12(a4)
   1d3e6:	0207e793          	ori	a5,a5,32
   1d3ea:	00f71623          	sh	a5,12(a4)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:347
    NVIC_EnableIRQ(table_irq_uart[uartNo-1]);            //开中断控制器IRQ中断
   1d3ee:	200057b7          	lui	a5,0x20005
   1d3f2:	00c78793          	addi	a5,a5,12 # 2000500c <table_irq_uart>
   1d3f6:	953e                	add	a0,a0,a5
   1d3f8:	4118                	lw	a4,0(a0)
NVIC_EnableIRQ():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\02_CPU/core_riscv.h:122
* Description    : Enable Interrupt
* Input          : IRQn: Interrupt Numbers
* Return         : None
*******************************************************************************/
RV_STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn){
  NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
   1d3fa:	00575793          	srli	a5,a4,0x5
   1d3fe:	4685                	li	a3,1
   1d400:	00e696b3          	sll	a3,a3,a4
   1d404:	04078793          	addi	a5,a5,64
   1d408:	078a                	slli	a5,a5,0x2
   1d40a:	e000e737          	lui	a4,0xe000e
   1d40e:	97ba                	add	a5,a5,a4
   1d410:	c394                	sw	a3,0(a5)
uart_enable_re_int():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/uart.c:349
}
   1d412:	40b2                	lw	ra,12(sp)
   1d414:	4422                	lw	s0,8(sp)
   1d416:	0141                	addi	sp,sp,16
   1d418:	8082                	ret

0001d41a <USART2_IRQHandler>:
USART2_IRQHandler():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/user.c:13


void USART2_IRQHandler(void) __attribute__((interrupt("WCH-Interrupt-fast")));
void USART2_IRQHandler()
{
    if(UART2_Handler != 0) UART2_Handler();
   1d41a:	f86ff0ef          	jal	ra,1cba0 <UART2_Handler>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/user.c:14
}
   1d41e:	30200073          	mret

0001d422 <printk_putc>:
printk_putc():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:28
//功能概要：通过串口打出一个字符
//参数说明：data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================
static void printk_putc(int c, int *count, PRINTK_INFO *info)
{
   1d422:	1141                	addi	sp,sp,-16
   1d424:	c606                	sw	ra,12(sp)
   1d426:	c422                	sw	s0,8(sp)
   1d428:	842e                	mv	s0,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:29
	switch (info->dest) {
   1d42a:	421c                	lw	a5,0(a2)
   1d42c:	4705                	li	a4,1
   1d42e:	00e78c63          	beq	a5,a4,1d446 <printk_putc+0x24>
   1d432:	4709                	li	a4,2
   1d434:	00e78e63          	beq	a5,a4,1d450 <printk_putc+0x2e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:40
		++(info->loc);
		break;
	default:
		break;
	}
	*count += 1;
   1d438:	401c                	lw	a5,0(s0)
   1d43a:	0785                	addi	a5,a5,1
   1d43c:	c01c                	sw	a5,0(s0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:41
}
   1d43e:	40b2                	lw	ra,12(sp)
   1d440:	4422                	lw	s0,8(sp)
   1d442:	0141                	addi	sp,sp,16
   1d444:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:31
		info->func((char) c);
   1d446:	425c                	lw	a5,4(a2)
   1d448:	0562                	slli	a0,a0,0x18
   1d44a:	8561                	srai	a0,a0,0x18
   1d44c:	9782                	jalr	a5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:32
		break;
   1d44e:	b7ed                	j	1d438 <printk_putc+0x16>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:34
		*(info->loc) = (unsigned char) c;
   1d450:	461c                	lw	a5,8(a2)
   1d452:	00a78023          	sb	a0,0(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:35
		++(info->loc);
   1d456:	461c                	lw	a5,8(a2)
   1d458:	0785                	addi	a5,a5,1
   1d45a:	c61c                	sw	a5,8(a2)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:36
		break;
   1d45c:	bff1                	j	1d438 <printk_putc+0x16>

0001d45e <printk_mknumstr>:
printk_mknumstr():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:139
	int nlen;
	char *nstrp;

	nlen = 0;
	nstrp = numstr;
	*nstrp++ = '\0';
   1d45e:	00150713          	addi	a4,a0,1
   1d462:	00050023          	sb	zero,0(a0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:141

	if (neg) {
   1d466:	ce1d                	beqz	a2,1d4a4 <printk_mknumstr+0x46>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:142
		a = *(int *) nump;
   1d468:	419c                	lw	a5,0(a1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:143
		if (a == 0) {
   1d46a:	c399                	beqz	a5,1d470 <printk_mknumstr+0x12>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:137
	nlen = 0;
   1d46c:	4501                	li	a0,0
   1d46e:	a005                	j	1d48e <printk_mknumstr+0x30>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:144
			*nstrp = '0';
   1d470:	03000793          	li	a5,48
   1d474:	00f500a3          	sb	a5,1(a0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:145
			++nlen;
   1d478:	4505                	li	a0,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:146
			goto done;
   1d47a:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:152
		}
		while (a != 0) {
			b = (int) a / (int) radix;
			c = (int) a - ((int) b * (int) radix);
			if (c < 0) {
				c = ~c + 1 + '0';
   1d47c:	03000593          	li	a1,48
   1d480:	40f587b3          	sub	a5,a1,a5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:157
			} else {
				c = c + '0';
			}
			a = b;
			*nstrp++ = (char) c;
   1d484:	00f70023          	sb	a5,0(a4) # e000e000 <RCC_APB2PCENR_BASE+0x9ffecfe8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:158
			++nlen;
   1d488:	0505                	addi	a0,a0,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:157
			*nstrp++ = (char) c;
   1d48a:	0705                	addi	a4,a4,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:156
			a = b;
   1d48c:	87b2                	mv	a5,a2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:148
		while (a != 0) {
   1d48e:	cb91                	beqz	a5,1d4a2 <printk_mknumstr+0x44>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:149
			b = (int) a / (int) radix;
   1d490:	02d7c633          	div	a2,a5,a3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:150
			c = (int) a - ((int) b * (int) radix);
   1d494:	02d7e7b3          	rem	a5,a5,a3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:151
			if (c < 0) {
   1d498:	fe07c2e3          	bltz	a5,1d47c <printk_mknumstr+0x1e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:154
				c = c + '0';
   1d49c:	03078793          	addi	a5,a5,48
   1d4a0:	b7d5                	j	1d484 <printk_mknumstr+0x26>
   1d4a2:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:161
		}
	} else {
		ua = *(unsigned int *) nump;
   1d4a4:	419c                	lw	a5,0(a1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:162
		if (ua == 0) {
   1d4a6:	ef91                	bnez	a5,1d4c2 <printk_mknumstr+0x64>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:163
			*nstrp = '0';
   1d4a8:	03000793          	li	a5,48
   1d4ac:	00f500a3          	sb	a5,1(a0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:164
			++nlen;
   1d4b0:	4505                	li	a0,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:165
			goto done;
   1d4b2:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:173
			ub = (unsigned int) ua / (unsigned int) radix;
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
			if (uc < 10) {
				uc = uc + '0';
			} else {
				uc = uc - 10 + 'A';
   1d4b4:	03778793          	addi	a5,a5,55
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:176
			}
			ua = ub;
			*nstrp++ = (char) uc;
   1d4b8:	00f70023          	sb	a5,0(a4)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:177
			++nlen;
   1d4bc:	0605                	addi	a2,a2,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:176
			*nstrp++ = (char) uc;
   1d4be:	0705                	addi	a4,a4,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:175
			ua = ub;
   1d4c0:	87ae                	mv	a5,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:167
		while (ua != 0) {
   1d4c2:	cf81                	beqz	a5,1d4da <printk_mknumstr+0x7c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:168
			ub = (unsigned int) ua / (unsigned int) radix;
   1d4c4:	02d7d5b3          	divu	a1,a5,a3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:169
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
   1d4c8:	02b68533          	mul	a0,a3,a1
   1d4cc:	8f89                	sub	a5,a5,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:170
			if (uc < 10) {
   1d4ce:	4525                	li	a0,9
   1d4d0:	fef562e3          	bltu	a0,a5,1d4b4 <printk_mknumstr+0x56>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:171
				uc = uc + '0';
   1d4d4:	03078793          	addi	a5,a5,48
   1d4d8:	b7c5                	j	1d4b8 <printk_mknumstr+0x5a>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:180
		}
	}
	done: return nlen;
   1d4da:	8532                	mv	a0,a2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:181
}
   1d4dc:	8082                	ret

0001d4de <printk_pad_zero>:
printk_pad_zero():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:184
/********************************************************************/
static void printk_pad_zero(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
   1d4de:	1101                	addi	sp,sp,-32
   1d4e0:	ce06                	sw	ra,28(sp)
   1d4e2:	cc22                	sw	s0,24(sp)
   1d4e4:	ca26                	sw	s1,20(sp)
   1d4e6:	c84a                	sw	s2,16(sp)
   1d4e8:	c64e                	sw	s3,12(sp)
   1d4ea:	842a                	mv	s0,a0
   1d4ec:	84ae                	mv	s1,a1
   1d4ee:	89b2                	mv	s3,a2
   1d4f0:	8936                	mv	s2,a3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:187 (discriminator 1)
	int i;

	for (i = curlen; i < field_width; i++) {
   1d4f2:	00945963          	bge	s0,s1,1d504 <printk_pad_zero+0x26>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:188 (discriminator 3)
		printk_putc('0', count, info);
   1d4f6:	864a                	mv	a2,s2
   1d4f8:	85ce                	mv	a1,s3
   1d4fa:	03000513          	li	a0,48
   1d4fe:	3715                	jal	1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:187 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
   1d500:	0405                	addi	s0,s0,1
   1d502:	bfc5                	j	1d4f2 <printk_pad_zero+0x14>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:190
	}
}
   1d504:	40f2                	lw	ra,28(sp)
   1d506:	4462                	lw	s0,24(sp)
   1d508:	44d2                	lw	s1,20(sp)
   1d50a:	4942                	lw	s2,16(sp)
   1d50c:	49b2                	lw	s3,12(sp)
   1d50e:	6105                	addi	sp,sp,32
   1d510:	8082                	ret

0001d512 <printk_pad_space>:
printk_pad_space():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:194

/********************************************************************/
static void printk_pad_space(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
   1d512:	1101                	addi	sp,sp,-32
   1d514:	ce06                	sw	ra,28(sp)
   1d516:	cc22                	sw	s0,24(sp)
   1d518:	ca26                	sw	s1,20(sp)
   1d51a:	c84a                	sw	s2,16(sp)
   1d51c:	c64e                	sw	s3,12(sp)
   1d51e:	842a                	mv	s0,a0
   1d520:	84ae                	mv	s1,a1
   1d522:	89b2                	mv	s3,a2
   1d524:	8936                	mv	s2,a3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:197 (discriminator 1)
	int i;

	for (i = curlen; i < field_width; i++) {
   1d526:	00945963          	bge	s0,s1,1d538 <printk_pad_space+0x26>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:198 (discriminator 3)
		printk_putc(' ', count, info);
   1d52a:	864a                	mv	a2,s2
   1d52c:	85ce                	mv	a1,s3
   1d52e:	02000513          	li	a0,32
   1d532:	3dc5                	jal	1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:197 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
   1d534:	0405                	addi	s0,s0,1
   1d536:	bfc5                	j	1d526 <printk_pad_space+0x14>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:200
	}
}
   1d538:	40f2                	lw	ra,28(sp)
   1d53a:	4462                	lw	s0,24(sp)
   1d53c:	44d2                	lw	s1,20(sp)
   1d53e:	4942                	lw	s2,16(sp)
   1d540:	49b2                	lw	s3,12(sp)
   1d542:	6105                	addi	sp,sp,32
   1d544:	8082                	ret

0001d546 <out_char>:
out_char():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:18
void out_char(char data) {
   1d546:	1141                	addi	sp,sp,-16
   1d548:	c606                	sw	ra,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:19
	uart_send1(UART_printf, data);
   1d54a:	0ff57593          	andi	a1,a0,255
   1d54e:	4505                	li	a0,1
   1d550:	3355                	jal	1d2f4 <uart_send1>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:20
}
   1d552:	40b2                	lw	ra,12(sp)
   1d554:	0141                	addi	sp,sp,16
   1d556:	8082                	ret

0001d558 <printk_mkfloatstr>:
printk_mkfloatstr():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:50
{
   1d558:	7119                	addi	sp,sp,-128
   1d55a:	de86                	sw	ra,124(sp)
   1d55c:	dca2                	sw	s0,120(sp)
   1d55e:	daa6                	sw	s1,116(sp)
   1d560:	d8ca                	sw	s2,112(sp)
   1d562:	d6ce                	sw	s3,108(sp)
   1d564:	d4d2                	sw	s4,104(sp)
   1d566:	d2d6                	sw	s5,100(sp)
   1d568:	d0da                	sw	s6,96(sp)
   1d56a:	892a                	mv	s2,a0
   1d56c:	84ae                	mv	s1,a1
   1d56e:	8432                	mv	s0,a2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:51
	uint32_t p,i,j,k,a[5]={0},b[19]={0};
   1d570:	c682                	sw	zero,76(sp)
   1d572:	c882                	sw	zero,80(sp)
   1d574:	ca82                	sw	zero,84(sp)
   1d576:	cc82                	sw	zero,88(sp)
   1d578:	ce82                	sw	zero,92(sp)
   1d57a:	04c00613          	li	a2,76
   1d57e:	4581                	li	a1,0
   1d580:	850a                	mv	a0,sp
   1d582:	e56ff0ef          	jal	ra,1cbd8 <memset>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:58
	p=(uint32_t)*f;//整数部分
   1d586:	00492983          	lw	s3,4(s2)
   1d58a:	00092903          	lw	s2,0(s2)
   1d58e:	854a                	mv	a0,s2
   1d590:	85ce                	mv	a1,s3
   1d592:	35b010ef          	jal	ra,1f0ec <__fixunsdfsi>
   1d596:	8aaa                	mv	s5,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:59
	tempf=(*f-p);
   1d598:	3b1010ef          	jal	ra,1f148 <__floatunsidf>
   1d59c:	862a                	mv	a2,a0
   1d59e:	86ae                	mv	a3,a1
   1d5a0:	854a                	mv	a0,s2
   1d5a2:	85ce                	mv	a1,s3
   1d5a4:	40e010ef          	jal	ra,1e9b2 <__subdf3>
   1d5a8:	8a2a                	mv	s4,a0
   1d5aa:	8b2e                	mv	s6,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:60
	if(precision_width==0)
   1d5ac:	e831                	bnez	s0,1d600 <printk_mkfloatstr+0xa8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:61
	q=(*f-p)*100000000000000000;//小数部分
   1d5ae:	0001f7b7          	lui	a5,0x1f
   1d5b2:	4c07a603          	lw	a2,1216(a5) # 1f4c0 <strlen+0x148>
   1d5b6:	4c47a683          	lw	a3,1220(a5)
   1d5ba:	8552                	mv	a0,s4
   1d5bc:	85da                	mv	a1,s6
   1d5be:	73d000ef          	jal	ra,1e4fa <__muldf3>
   1d5c2:	3ed010ef          	jal	ra,1f1ae <__fixunsdfdi>
   1d5c6:	892a                	mv	s2,a0
   1d5c8:	89ae                	mv	s3,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:69
	k=0;
   1d5ca:	4401                	li	s0,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:70
	while(m<1)
   1d5cc:	0001f7b7          	lui	a5,0x1f
   1d5d0:	4d07a603          	lw	a2,1232(a5) # 1f4d0 <strlen+0x158>
   1d5d4:	4d47a683          	lw	a3,1236(a5)
   1d5d8:	8552                	mv	a0,s4
   1d5da:	85da                	mv	a1,s6
   1d5dc:	669000ef          	jal	ra,1e444 <__ledf2>
   1d5e0:	04055263          	bgez	a0,1d624 <printk_mkfloatstr+0xcc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:72
		m=m*10;
   1d5e4:	0001f7b7          	lui	a5,0x1f
   1d5e8:	4c87a603          	lw	a2,1224(a5) # 1f4c8 <strlen+0x150>
   1d5ec:	4cc7a683          	lw	a3,1228(a5)
   1d5f0:	8552                	mv	a0,s4
   1d5f2:	85da                	mv	a1,s6
   1d5f4:	707000ef          	jal	ra,1e4fa <__muldf3>
   1d5f8:	8a2a                	mv	s4,a0
   1d5fa:	8b2e                	mv	s6,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:73
		k++;
   1d5fc:	0405                	addi	s0,s0,1
   1d5fe:	b7f9                	j	1d5cc <printk_mkfloatstr+0x74>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:64
		while(precision_width--)
   1d600:	fff40913          	addi	s2,s0,-1
   1d604:	c819                	beqz	s0,1d61a <printk_mkfloatstr+0xc2>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:65
		tempf*=10;
   1d606:	0001f7b7          	lui	a5,0x1f
   1d60a:	4c87a603          	lw	a2,1224(a5) # 1f4c8 <strlen+0x150>
   1d60e:	4cc7a683          	lw	a3,1228(a5)
   1d612:	6e9000ef          	jal	ra,1e4fa <__muldf3>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:64
		while(precision_width--)
   1d616:	844a                	mv	s0,s2
   1d618:	b7e5                	j	1d600 <printk_mkfloatstr+0xa8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:66
		q=tempf;
   1d61a:	395010ef          	jal	ra,1f1ae <__fixunsdfdi>
   1d61e:	892a                	mv	s2,a0
   1d620:	89ae                	mv	s3,a1
   1d622:	b765                	j	1d5ca <printk_mkfloatstr+0x72>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:75
	k--;          //记录小数点后到第一位不为零的小数之前 有多少个0.
   1d624:	fff40b13          	addi	s6,s0,-1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:78
	if(0==p)//整数部分为0
   1d628:	040a9763          	bnez	s5,1d676 <printk_mkfloatstr+0x11e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:79
		c[i++]='0';
   1d62c:	03000793          	li	a5,48
   1d630:	00f48023          	sb	a5,0(s1)
   1d634:	4a85                	li	s5,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:94
	c[i++]='.';//小数点
   1d636:	001a8a13          	addi	s4,s5,1
   1d63a:	015487b3          	add	a5,s1,s5
   1d63e:	02e00713          	li	a4,46
   1d642:	00e78023          	sb	a4,0(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:95
	if(0==q)//小数部分为0
   1d646:	013967b3          	or	a5,s2,s3
   1d64a:	e7b5                	bnez	a5,1d6b6 <printk_mkfloatstr+0x15e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:96
		c[i++]='0';
   1d64c:	9a26                	add	s4,s4,s1
   1d64e:	03000793          	li	a5,48
   1d652:	00fa0023          	sb	a5,0(s4)
   1d656:	002a8a13          	addi	s4,s5,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:117
	c[i]='\0';
   1d65a:	94d2                	add	s1,s1,s4
   1d65c:	00048023          	sb	zero,0(s1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:119
}
   1d660:	8552                	mv	a0,s4
   1d662:	50f6                	lw	ra,124(sp)
   1d664:	5466                	lw	s0,120(sp)
   1d666:	54d6                	lw	s1,116(sp)
   1d668:	5946                	lw	s2,112(sp)
   1d66a:	59b6                	lw	s3,108(sp)
   1d66c:	5a26                	lw	s4,104(sp)
   1d66e:	5a96                	lw	s5,100(sp)
   1d670:	5b06                	lw	s6,96(sp)
   1d672:	6109                	addi	sp,sp,128
   1d674:	8082                	ret
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:82
		j=0;
   1d676:	4781                	li	a5,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:83
		while(p!=0)//倒序的数字
   1d678:	020a8d63          	beqz	s5,1d6b2 <printk_mkfloatstr+0x15a>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:85
			a[j++]=p%10;
   1d67c:	46a9                	li	a3,10
   1d67e:	02daf633          	remu	a2,s5,a3
   1d682:	00279713          	slli	a4,a5,0x2
   1d686:	108c                	addi	a1,sp,96
   1d688:	972e                	add	a4,a4,a1
   1d68a:	fec72623          	sw	a2,-20(a4)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:86
			p/=10;
   1d68e:	02dadab3          	divu	s5,s5,a3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:85
			a[j++]=p%10;
   1d692:	0785                	addi	a5,a5,1
   1d694:	b7d5                	j	1d678 <printk_mkfloatstr+0x120>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:90
			c[i++]=a[j-1]+'0';
   1d696:	17fd                	addi	a5,a5,-1
   1d698:	00279713          	slli	a4,a5,0x2
   1d69c:	1094                	addi	a3,sp,96
   1d69e:	9736                	add	a4,a4,a3
   1d6a0:	fec72703          	lw	a4,-20(a4)
   1d6a4:	015486b3          	add	a3,s1,s5
   1d6a8:	03070713          	addi	a4,a4,48
   1d6ac:	00e68023          	sb	a4,0(a3) # a3582000 <RCC_APB2PCENR_BASE+0x63560fe8>
   1d6b0:	0a85                	addi	s5,s5,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:88
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
   1d6b2:	f3f5                	bnez	a5,1d696 <printk_mkfloatstr+0x13e>
   1d6b4:	b749                	j	1d636 <printk_mkfloatstr+0xde>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:99
		j=0;
   1d6b6:	4401                	li	s0,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:101
		while(q!=0)//倒序的数字
   1d6b8:	013967b3          	or	a5,s2,s3
   1d6bc:	c79d                	beqz	a5,1d6ea <printk_mkfloatstr+0x192>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:103
			b[j++]=q%10;
   1d6be:	4629                	li	a2,10
   1d6c0:	4681                	li	a3,0
   1d6c2:	854a                	mv	a0,s2
   1d6c4:	85ce                	mv	a1,s3
   1d6c6:	1f1000ef          	jal	ra,1e0b6 <__umoddi3>
   1d6ca:	00140a93          	addi	s5,s0,1
   1d6ce:	040a                	slli	s0,s0,0x2
   1d6d0:	109c                	addi	a5,sp,96
   1d6d2:	943e                	add	s0,s0,a5
   1d6d4:	faa42023          	sw	a0,-96(s0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:104
			q/=10;
   1d6d8:	4629                	li	a2,10
   1d6da:	4681                	li	a3,0
   1d6dc:	854a                	mv	a0,s2
   1d6de:	85ce                	mv	a1,s3
   1d6e0:	2d3d                	jal	1dd1e <__udivdi3>
   1d6e2:	892a                	mv	s2,a0
   1d6e4:	89ae                	mv	s3,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:103
			b[j++]=q%10;
   1d6e6:	8456                	mv	s0,s5
   1d6e8:	bfc1                	j	1d6b8 <printk_mkfloatstr+0x160>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:106
		while(k!=0)
   1d6ea:	020b0963          	beqz	s6,1d71c <printk_mkfloatstr+0x1c4>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:108
			b[j++]=0;
   1d6ee:	00241793          	slli	a5,s0,0x2
   1d6f2:	1098                	addi	a4,sp,96
   1d6f4:	97ba                	add	a5,a5,a4
   1d6f6:	fa07a023          	sw	zero,-96(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:109
			k--;
   1d6fa:	1b7d                	addi	s6,s6,-1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:108
			b[j++]=0;
   1d6fc:	0405                	addi	s0,s0,1
   1d6fe:	b7f5                	j	1d6ea <printk_mkfloatstr+0x192>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:113
			c[i++]=b[j-1]+'0';
   1d700:	147d                	addi	s0,s0,-1
   1d702:	00241793          	slli	a5,s0,0x2
   1d706:	1098                	addi	a4,sp,96
   1d708:	97ba                	add	a5,a5,a4
   1d70a:	fa07a783          	lw	a5,-96(a5)
   1d70e:	01448733          	add	a4,s1,s4
   1d712:	03078793          	addi	a5,a5,48
   1d716:	00f70023          	sb	a5,0(a4)
   1d71a:	0a05                	addi	s4,s4,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:111
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
   1d71c:	f075                	bnez	s0,1d700 <printk_mkfloatstr+0x1a8>
   1d71e:	bf35                	j	1d65a <printk_mkfloatstr+0x102>

0001d720 <printk>:
printk():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:210
//       fmt:输出格式信息
//       ap:va_list指针指向格式信息输出
//函数返回：无
//======================================================================
int printk(PRINTK_INFO *info, const char *fmt, char * ap)
{
   1d720:	7159                	addi	sp,sp,-112
   1d722:	d686                	sw	ra,108(sp)
   1d724:	d4a2                	sw	s0,104(sp)
   1d726:	d2a6                	sw	s1,100(sp)
   1d728:	d0ca                	sw	s2,96(sp)
   1d72a:	cece                	sw	s3,92(sp)
   1d72c:	ccd2                	sw	s4,88(sp)
   1d72e:	cad6                	sw	s5,84(sp)
   1d730:	c8da                	sw	s6,80(sp)
   1d732:	c6de                	sw	s7,76(sp)
   1d734:	c4e2                	sw	s8,72(sp)
   1d736:	c2e6                	sw	s9,68(sp)
   1d738:	c0ea                	sw	s10,64(sp)
   1d73a:	892a                	mv	s2,a0
   1d73c:	842e                	mv	s0,a1
   1d73e:	89b2                	mv	s3,a2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:234

	}un1;*/
	char *p;
	int c;
	//char temp1;
	char vstr[33]={'0'};
   1d740:	ce02                	sw	zero,28(sp)
   1d742:	d002                	sw	zero,32(sp)
   1d744:	d202                	sw	zero,36(sp)
   1d746:	d402                	sw	zero,40(sp)
   1d748:	d602                	sw	zero,44(sp)
   1d74a:	d802                	sw	zero,48(sp)
   1d74c:	da02                	sw	zero,52(sp)
   1d74e:	dc02                	sw	zero,56(sp)
   1d750:	02010e23          	sb	zero,60(sp)
   1d754:	03000793          	li	a5,48
   1d758:	00f10e23          	sb	a5,28(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:255
	int *ivalp;
	char *sval;
	int cval;
	unsigned int uval;

	count = 0;
   1d75c:	cc02                	sw	zero,24(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:257
	length_modifier=0;
	precision_used=TRUE;
   1d75e:	4a85                	li	s5,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:256
	length_modifier=0;
   1d760:	4a01                	li	s4,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:259
	//从格式字符串第一个字符开始格式化输出数据
	for (p = (char *) fmt; (c = *p) != 0; p++)
   1d762:	a811                	j	1d776 <printk+0x56>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:271
			if (c != '\n') {
				printk_putc(c, &count, info);
			}
			//输出换行符
			else {
				printk_putc(0x0D /* CR */, &count, info);
   1d764:	864a                	mv	a2,s2
   1d766:	082c                	addi	a1,sp,24
   1d768:	4535                	li	a0,13
   1d76a:	3965                	jal	1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:272
				printk_putc(0x0A /* LF */, &count, info);
   1d76c:	864a                	mv	a2,s2
   1d76e:	082c                	addi	a1,sp,24
   1d770:	4529                	li	a0,10
   1d772:	3945                	jal	1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:259 (discriminator 2)
	for (p = (char *) fmt; (c = *p) != 0; p++)
   1d774:	0405                	addi	s0,s0,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:259 (discriminator 1)
   1d776:	00040503          	lb	a0,0(s0)
   1d77a:	4a050c63          	beqz	a0,1dc32 <printk+0x512>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:262
		if (c != '%')
   1d77e:	02500793          	li	a5,37
   1d782:	04f50c63          	beq	a0,a5,1d7da <printk+0xba>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:266
			if (c != '\n') {
   1d786:	47a9                	li	a5,10
   1d788:	fcf50ee3          	beq	a0,a5,1d764 <printk+0x44>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:267
				printk_putc(c, &count, info);
   1d78c:	864a                	mv	a2,s2
   1d78e:	082c                	addi	a1,sp,24
   1d790:	3949                	jal	1d422 <printk_putc>
   1d792:	b7cd                	j	1d774 <printk+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:289
		flags_used = 0;
		done = FALSE;
		while (!done) {
			switch (/* c = */*++p) {
			case '-':
				flags_used |= FLAGS_MINUS;
   1d794:	0014e493          	ori	s1,s1,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:210
{
   1d798:	8432                	mv	s0,a2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:286
		while (!done) {
   1d79a:	e5a9                	bnez	a1,1d7e4 <printk+0xc4>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:287
			switch (/* c = */*++p) {
   1d79c:	00140613          	addi	a2,s0,1
   1d7a0:	00140783          	lb	a5,1(s0)
   1d7a4:	1781                	addi	a5,a5,-32
   1d7a6:	0ff7f693          	andi	a3,a5,255
   1d7aa:	4741                	li	a4,16
   1d7ac:	02d76a63          	bltu	a4,a3,1d7e0 <printk+0xc0>
   1d7b0:	00269793          	slli	a5,a3,0x2
   1d7b4:	0001f737          	lui	a4,0x1f
   1d7b8:	3f470713          	addi	a4,a4,1012 # 1f3f4 <strlen+0x7c>
   1d7bc:	97ba                	add	a5,a5,a4
   1d7be:	439c                	lw	a5,0(a5)
   1d7c0:	8782                	jr	a5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:292
				break;
			case '+':
				flags_used |= FLAGS_PLUS;
   1d7c2:	0024e493          	ori	s1,s1,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:293
				break;
   1d7c6:	bfc9                	j	1d798 <printk+0x78>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:295
			case ' ':
				flags_used |= FLAGS_SPACE;
   1d7c8:	0044e493          	ori	s1,s1,4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:296
				break;
   1d7cc:	b7f1                	j	1d798 <printk+0x78>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:298
			case '0':
				flags_used |= FLAGS_ZERO;
   1d7ce:	0084e493          	ori	s1,s1,8
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:299
				break;
   1d7d2:	b7d9                	j	1d798 <printk+0x78>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:301
			case '#':
				flags_used |= FLAGS_POUND;
   1d7d4:	0104e493          	ori	s1,s1,16
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:302
				break;
   1d7d8:	b7c1                	j	1d798 <printk+0x78>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:284
		flags_used = 0;
   1d7da:	4481                	li	s1,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:285
		done = FALSE;
   1d7dc:	4581                	li	a1,0
   1d7de:	bf75                	j	1d79a <printk+0x7a>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:306
			default:
				/* we've gone one char too far */
				--p;
				done = TRUE;
   1d7e0:	4585                	li	a1,1
   1d7e2:	bf65                	j	1d79a <printk+0x7a>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:313
			}
		}


		//检查%后再下一个字符 确定输出长度
		field_width = 0;
   1d7e4:	4b01                	li	s6,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:314
		done = FALSE;
   1d7e6:	4b81                	li	s7,0
   1d7e8:	a011                	j	1d7ec <printk+0xcc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:332
				field_width = (field_width * 10) + (c - '0');
				break;
			default:
				/* we've gone one char too far */
				--p;
				done = TRUE;
   1d7ea:	8bae                	mv	s7,a1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:315
		while (!done) {
   1d7ec:	020b9363          	bnez	s7,1d812 <printk+0xf2>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:316
			switch (c = *++p) {
   1d7f0:	00140693          	addi	a3,s0,1
   1d7f4:	00140783          	lb	a5,1(s0)
   1d7f8:	fd078793          	addi	a5,a5,-48
   1d7fc:	4725                	li	a4,9
   1d7fe:	fef766e3          	bltu	a4,a5,1d7ea <printk+0xca>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:327
				field_width = (field_width * 10) + (c - '0');
   1d802:	002b1713          	slli	a4,s6,0x2
   1d806:	975a                	add	a4,a4,s6
   1d808:	00171b13          	slli	s6,a4,0x1
   1d80c:	9b3e                	add	s6,s6,a5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:316
			switch (c = *++p) {
   1d80e:	8436                	mv	s0,a3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:328
				break;
   1d810:	bff1                	j	1d7ec <printk+0xcc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:337
				break;
			}
		}
		//此时字符为%看是否有.输入
		if (/* (c = *++p) */*++p == '.') {
   1d812:	00140713          	addi	a4,s0,1
   1d816:	00140683          	lb	a3,1(s0)
   1d81a:	02e00793          	li	a5,46
   1d81e:	04f68a63          	beq	a3,a5,1d872 <printk+0x152>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:374
		} else {
			/* we've gone one char too far */
			--p;
#if 1
			precision_used = FALSE;
			precision_width = 0;
   1d822:	4c01                	li	s8,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:373
			precision_used = FALSE;
   1d824:	4a81                	li	s5,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:378
#endif
		}
		//判断 输出的是否有lf、LF等
		switch (/* c = */*++p) {
   1d826:	00140713          	addi	a4,s0,1
   1d82a:	00140783          	lb	a5,1(s0)
   1d82e:	06800693          	li	a3,104
   1d832:	00d78b63          	beq	a5,a3,1d848 <printk+0x128>
   1d836:	06c00693          	li	a3,108
   1d83a:	06d78463          	beq	a5,a3,1d8a2 <printk+0x182>
   1d83e:	04c00693          	li	a3,76
   1d842:	06d78363          	beq	a5,a3,1d8a8 <printk+0x188>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:390
		case 'L':
			 length_modifier |= LENMOD_L;
			break;
		default:
			/* we've gone one char too far */
			--p;
   1d846:	8722                	mv	a4,s0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:395
			break;
		}

		//p为格式字符串的首地址
		switch (c = *++p) {
   1d848:	00170413          	addi	s0,a4,1
   1d84c:	00170503          	lb	a0,1(a4)
   1d850:	fa850793          	addi	a5,a0,-88
   1d854:	0ff7f693          	andi	a3,a5,255
   1d858:	02000713          	li	a4,32
   1d85c:	3cd76463          	bltu	a4,a3,1dc24 <printk+0x504>
   1d860:	00269793          	slli	a5,a3,0x2
   1d864:	0001f737          	lui	a4,0x1f
   1d868:	43870713          	addi	a4,a4,1080 # 1f438 <strlen+0xc0>
   1d86c:	97ba                	add	a5,a5,a4
   1d86e:	439c                	lw	a5,0(a5)
   1d870:	8782                	jr	a5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:343
			precision_width = 0;
   1d872:	4c01                	li	s8,0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:344
			done = FALSE;
   1d874:	4581                	li	a1,0
   1d876:	a011                	j	1d87a <printk+0x15a>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:365
					done = TRUE;
   1d878:	85de                	mv	a1,s7
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:345
			while (!done) {
   1d87a:	e195                	bnez	a1,1d89e <printk+0x17e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:346
				switch ( c = *++p) {
   1d87c:	00170613          	addi	a2,a4,1
   1d880:	00170783          	lb	a5,1(a4)
   1d884:	fd078793          	addi	a5,a5,-48
   1d888:	46a5                	li	a3,9
   1d88a:	fef6e7e3          	bltu	a3,a5,1d878 <printk+0x158>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:358
				precision_width = (precision_width * 10) +	(c - '0');
   1d88e:	002c1713          	slli	a4,s8,0x2
   1d892:	9762                	add	a4,a4,s8
   1d894:	00171c13          	slli	s8,a4,0x1
   1d898:	9c3e                	add	s8,s8,a5
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:346
				switch ( c = *++p) {
   1d89a:	8732                	mv	a4,a2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:361
					break;
   1d89c:	bff9                	j	1d87a <printk+0x15a>
   1d89e:	843a                	mv	s0,a4
   1d8a0:	b759                	j	1d826 <printk+0x106>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:383
			 length_modifier |= LENMOD_l;
   1d8a2:	001a6a13          	ori	s4,s4,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:384
			break;
   1d8a6:	b74d                	j	1d848 <printk+0x128>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:386
			 length_modifier |= LENMOD_L;
   1d8a8:	002a6a13          	ori	s4,s4,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:387
			break;
   1d8ac:	bf71                	j	1d848 <printk+0x128>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:399
		case 'd':
		case 'i':
			 //此时ap为指向可变参数列表的第一个参数
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   1d8ae:	00498b93          	addi	s7,s3,4
   1d8b2:	0009a783          	lw	a5,0(s3)
   1d8b6:	ca3e                	sw	a5,20(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:400
			vlen = printk_mknumstr(vstr, &ival, TRUE, 10);//将整型转换成字符型保存在vstr中，返回字符数vlen
   1d8b8:	46a9                	li	a3,10
   1d8ba:	4605                	li	a2,1
   1d8bc:	084c                	addi	a1,sp,20
   1d8be:	0868                	addi	a0,sp,28
   1d8c0:	3e79                	jal	1d45e <printk_mknumstr>
   1d8c2:	8caa                	mv	s9,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:401
			vstrp = &vstr[vlen];  //指向转换后的最后一个字符
   1d8c4:	087c                	addi	a5,sp,28
   1d8c6:	00a78c33          	add	s8,a5,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:404

			//若参数小于0，添加'-'号，并将字符长度加1
			if (ival < 0) {
   1d8ca:	47d2                	lw	a5,20(sp)
   1d8cc:	0007ca63          	bltz	a5,1d8e0 <printk+0x1c0>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:410
				schar = '-';
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
   1d8d0:	0024f793          	andi	a5,s1,2
   1d8d4:	c79d                	beqz	a5,1d902 <printk+0x1e2>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:412
					schar = '+';
					++vlen;
   1d8d6:	00150c93          	addi	s9,a0,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:411
					schar = '+';
   1d8da:	02b00993          	li	s3,43
   1d8de:	a029                	j	1d8e8 <printk+0x1c8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:406
				++vlen;
   1d8e0:	00150c93          	addi	s9,a0,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:405
				schar = '-';
   1d8e4:	02d00993          	li	s3,45
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:427
			dschar = FALSE;

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
   1d8e8:	0084f793          	andi	a5,s1,8
   1d8ec:	cb8d                	beqz	a5,1d91e <printk+0x1fe>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:428
				if (schar)
   1d8ee:	02099363          	bnez	s3,1d914 <printk+0x1f4>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:431
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
   1d8f2:	86ca                	mv	a3,s2
   1d8f4:	0830                	addi	a2,sp,24
   1d8f6:	85da                	mv	a1,s6
   1d8f8:	8566                	mv	a0,s9
   1d8fa:	36d5                	jal	1d4de <printk_pad_zero>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:432
				vlen = field_width;
   1d8fc:	8cda                	mv	s9,s6
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:399
			ival = (int) va_arg1(ap, int);  //返回当前参数，并将ap指向下一个参数
   1d8fe:	89de                	mv	s3,s7
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:448
			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
				printk_putc(schar, &count, info);
			}
			goto cont_xd;  //开始跳转
   1d900:	a459                	j	1db86 <printk+0x466>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:414
					if (IS_FLAG_SPACE(flags_used)) {
   1d902:	0044f993          	andi	s3,s1,4
   1d906:	fe0981e3          	beqz	s3,1d8e8 <printk+0x1c8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:416
						++vlen;
   1d90a:	00150c93          	addi	s9,a0,1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:415
						schar = ' ';
   1d90e:	02000993          	li	s3,32
   1d912:	bfd9                	j	1d8e8 <printk+0x1c8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:429
					printk_putc(schar, &count, info);  //输出符号
   1d914:	864a                	mv	a2,s2
   1d916:	082c                	addi	a1,sp,24
   1d918:	854e                	mv	a0,s3
   1d91a:	3621                	jal	1d422 <printk_putc>
   1d91c:	bfd9                	j	1d8f2 <printk+0x1d2>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:434
				if (!IS_FLAG_MINUS(flags_used)) {
   1d91e:	0014f793          	andi	a5,s1,1
   1d922:	cb81                	beqz	a5,1d932 <printk+0x212>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:445
			if (!dschar && schar) {
   1d924:	fc098de3          	beqz	s3,1d8fe <printk+0x1de>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:446
				printk_putc(schar, &count, info);
   1d928:	864a                	mv	a2,s2
   1d92a:	082c                	addi	a1,sp,24
   1d92c:	854e                	mv	a0,s3
   1d92e:	3cd5                	jal	1d422 <printk_putc>
   1d930:	b7f9                	j	1d8fe <printk+0x1de>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:435
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
   1d932:	86ca                	mv	a3,s2
   1d934:	0830                	addi	a2,sp,24
   1d936:	85da                	mv	a1,s6
   1d938:	8566                	mv	a0,s9
   1d93a:	3ee1                	jal	1d512 <printk_pad_space>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:437
					if (schar)
   1d93c:	fc0981e3          	beqz	s3,1d8fe <printk+0x1de>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:438
						printk_putc(schar, &count, info);
   1d940:	864a                	mv	a2,s2
   1d942:	082c                	addi	a1,sp,24
   1d944:	854e                	mv	a0,s3
   1d946:	3cf1                	jal	1d422 <printk_putc>
   1d948:	bf5d                	j	1d8fe <printk+0x1de>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:460
			//实际传入变参数 函数后 浮点数变为:0x6000000040091EB8 实际是将其转化为double型数据
			//但是顺序反了，我们要做的是将后四字节提前，然后把0x60移到紧接着前四个字节后的位置。
			
			//【20200816】  XSX，解决浮点数不优化问题
			ap=ap+4;
			fval= (double)va_arg1(ap,double);
   1d94a:	00c98b93          	addi	s7,s3,12
   1d94e:	0049ac83          	lw	s9,4(s3)
   1d952:	0089a983          	lw	s3,8(s3)
   1d956:	c466                	sw	s9,8(sp)
   1d958:	c64e                	sw	s3,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:464
			
			//【20200816】  XSX，解决负数的浮点数输出问题
			//若参数小于0，添加'-'号，并将字符长度加1
			if (fval < 0) {
   1d95a:	4601                	li	a2,0
   1d95c:	4681                	li	a3,0
   1d95e:	8566                	mv	a0,s9
   1d960:	85ce                	mv	a1,s3
   1d962:	2e3000ef          	jal	ra,1e444 <__ledf2>
   1d966:	00054c63          	bltz	a0,1d97e <printk+0x25e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:471
				fval = -fval;				//负数取它的正数
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
   1d96a:	0024f793          	andi	a5,s1,2
   1d96e:	e7b9                	bnez	a5,1d9bc <printk+0x29c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:475
					schar = '+';
					++vlen;
				} else {
					if (IS_FLAG_SPACE(flags_used)) {
   1d970:	0044f993          	andi	s3,s1,4
   1d974:	00098d63          	beqz	s3,1d98e <printk+0x26e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:476
						schar = ' ';
   1d978:	02000993          	li	s3,32
   1d97c:	a809                	j	1d98e <printk+0x26e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:466
				fval = -fval;				//负数取它的正数
   1d97e:	800007b7          	lui	a5,0x80000
   1d982:	0137c7b3          	xor	a5,a5,s3
   1d986:	c466                	sw	s9,8(sp)
   1d988:	c63e                	sw	a5,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:465
				schar = '-';
   1d98a:	02d00993          	li	s3,45
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:486
				}
			}
			dschar = FALSE;
			
			//确定是否使用小数点精度数值
			if(precision_used)
   1d98e:	020a9a63          	bnez	s5,1d9c2 <printk+0x2a2>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:493
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);//将整型转换成字符型保存在vstr中，返回字符数vlen
				vstrp = &vstr[0];  //指向转换后的第一个字符
			}
			else
			{
				if(length_modifier==0)   //浮点型精度到小数点后8位
   1d992:	020a1e63          	bnez	s4,1d9ce <printk+0x2ae>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:495
				{
					vlen = printk_mkfloatstr(&fval,vstr,6);//将整型转换成字符型保存在vstr中，返回字符数vlen
   1d996:	4619                	li	a2,6
   1d998:	086c                	addi	a1,sp,28
   1d99a:	0028                	addi	a0,sp,8
   1d99c:	3e75                	jal	1d558 <printk_mkfloatstr>
   1d99e:	8c2a                	mv	s8,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:511
			

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
   1d9a0:	0084f793          	andi	a5,s1,8
   1d9a4:	c3a1                	beqz	a5,1d9e4 <printk+0x2c4>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:512
				if (schar)
   1d9a6:	02099a63          	bnez	s3,1d9da <printk+0x2ba>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:515
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
   1d9aa:	86ca                	mv	a3,s2
   1d9ac:	0830                	addi	a2,sp,24
   1d9ae:	85da                	mv	a1,s6
   1d9b0:	8562                	mv	a0,s8
   1d9b2:	3635                	jal	1d4de <printk_pad_zero>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:516
				vlen = field_width;
   1d9b4:	8c5a                	mv	s8,s6
   1d9b6:	01c10993          	addi	s3,sp,28
   1d9ba:	a8b9                	j	1da18 <printk+0x2f8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:472
					schar = '+';
   1d9bc:	02b00993          	li	s3,43
   1d9c0:	b7f9                	j	1d98e <printk+0x26e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:488
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);//将整型转换成字符型保存在vstr中，返回字符数vlen
   1d9c2:	8662                	mv	a2,s8
   1d9c4:	086c                	addi	a1,sp,28
   1d9c6:	0028                	addi	a0,sp,8
   1d9c8:	3e41                	jal	1d558 <printk_mkfloatstr>
   1d9ca:	8c2a                	mv	s8,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:489
				vstrp = &vstr[0];  //指向转换后的第一个字符
   1d9cc:	bfd1                	j	1d9a0 <printk+0x280>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:500
					vlen = printk_mkfloatstr(&fval,vstr,6);//将整型转换成字符型保存在vstr中，返回字符数vlen
   1d9ce:	4619                	li	a2,6
   1d9d0:	086c                	addi	a1,sp,28
   1d9d2:	0028                	addi	a0,sp,8
   1d9d4:	3651                	jal	1d558 <printk_mkfloatstr>
   1d9d6:	8c2a                	mv	s8,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:501
					vstrp = &vstr[0];  //指向转换后的第一个字符
   1d9d8:	b7e1                	j	1d9a0 <printk+0x280>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:513
					printk_putc(schar, &count, info);  //输出符号
   1d9da:	864a                	mv	a2,s2
   1d9dc:	082c                	addi	a1,sp,24
   1d9de:	854e                	mv	a0,s3
   1d9e0:	3489                	jal	1d422 <printk_putc>
   1d9e2:	b7e1                	j	1d9aa <printk+0x28a>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:518
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
   1d9e4:	0014f793          	andi	a5,s1,1
   1d9e8:	cb81                	beqz	a5,1d9f8 <printk+0x2d8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:529
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
   1d9ea:	fc0986e3          	beqz	s3,1d9b6 <printk+0x296>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:530
				printk_putc(schar, &count, info);
   1d9ee:	864a                	mv	a2,s2
   1d9f0:	082c                	addi	a1,sp,24
   1d9f2:	854e                	mv	a0,s3
   1d9f4:	343d                	jal	1d422 <printk_putc>
   1d9f6:	b7c1                	j	1d9b6 <printk+0x296>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:519
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
   1d9f8:	86ca                	mv	a3,s2
   1d9fa:	0830                	addi	a2,sp,24
   1d9fc:	85da                	mv	a1,s6
   1d9fe:	8562                	mv	a0,s8
   1da00:	3e09                	jal	1d512 <printk_pad_space>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:521
					if (schar)
   1da02:	fa098ae3          	beqz	s3,1d9b6 <printk+0x296>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:522
						printk_putc(schar, &count, info);
   1da06:	864a                	mv	a2,s2
   1da08:	082c                	addi	a1,sp,24
   1da0a:	854e                	mv	a0,s3
   1da0c:	3c19                	jal	1d422 <printk_putc>
   1da0e:	b765                	j	1d9b6 <printk+0x296>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:533
			}
			while (*vstrp)
				printk_putc(*vstrp++, &count, info);
   1da10:	0985                	addi	s3,s3,1
   1da12:	864a                	mv	a2,s2
   1da14:	082c                	addi	a1,sp,24
   1da16:	3431                	jal	1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:532
			while (*vstrp)
   1da18:	00098503          	lb	a0,0(s3)
   1da1c:	f975                	bnez	a0,1da10 <printk+0x2f0>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:534
			if (IS_FLAG_MINUS(flags_used)) {
   1da1e:	8885                	andi	s1,s1,1
   1da20:	e099                	bnez	s1,1da26 <printk+0x306>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:460
			fval= (double)va_arg1(ap,double);
   1da22:	89de                	mv	s3,s7
   1da24:	bb81                	j	1d774 <printk+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:535
				printk_pad_space(vlen, field_width, &count, info);
   1da26:	86ca                	mv	a3,s2
   1da28:	0830                	addi	a2,sp,24
   1da2a:	85da                	mv	a1,s6
   1da2c:	8562                	mv	a0,s8
   1da2e:	34d5                	jal	1d512 <printk_pad_space>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:460
			fval= (double)va_arg1(ap,double);
   1da30:	89de                	mv	s3,s7
   1da32:	b389                	j	1d774 <printk+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:541
			}
            break;
        //以下是16进制整形输出
		case 'x':
		case 'X':
			uval = (unsigned int) va_arg1(ap, unsigned int);
   1da34:	00498d13          	addi	s10,s3,4
   1da38:	0009a783          	lw	a5,0(s3)
   1da3c:	c23e                	sw	a5,4(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:542
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
   1da3e:	46c1                	li	a3,16
   1da40:	4601                	li	a2,0
   1da42:	004c                	addi	a1,sp,4
   1da44:	0868                	addi	a0,sp,28
   1da46:	3c21                	jal	1d45e <printk_mknumstr>
   1da48:	8caa                	mv	s9,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:543
			vstrp = &vstr[vlen];
   1da4a:	087c                	addi	a5,sp,28
   1da4c:	00a78c33          	add	s8,a5,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:546

			dschar = FALSE;
			if (IS_FLAG_ZERO(flags_used)) {
   1da50:	0084f993          	andi	s3,s1,8
   1da54:	02098f63          	beqz	s3,1da92 <printk+0x372>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:547
				if (IS_FLAG_POUND(flags_used)) {
   1da58:	0104f993          	andi	s3,s1,16
   1da5c:	00099f63          	bnez	s3,1da7a <printk+0x35a>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:553
					printk_putc('0', &count, info);
					printk_putc('x', &count, info);
					/*vlen += 2;*/
					dschar = TRUE;
				}
				printk_pad_zero(vlen, field_width, &count, info);
   1da60:	86ca                	mv	a3,s2
   1da62:	0830                	addi	a2,sp,24
   1da64:	85da                	mv	a1,s6
   1da66:	8566                	mv	a0,s9
   1da68:	3c9d                	jal	1d4de <printk_pad_zero>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:554
				vlen = field_width;
   1da6a:	8cda                	mv	s9,s6
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:569
						dschar = TRUE;
					}
				}
			}

			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
   1da6c:	0104f793          	andi	a5,s1,16
   1da70:	c399                	beqz	a5,1da76 <printk+0x356>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:569 (discriminator 1)
   1da72:	04098c63          	beqz	s3,1daca <printk+0x3aa>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:541
			uval = (unsigned int) va_arg1(ap, unsigned int);
   1da76:	89ea                	mv	s3,s10
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:574
				printk_putc('0', &count, info);
				printk_putc('x', &count, info);
				vlen += 2;
			}
			goto cont_xd;
   1da78:	a239                	j	1db86 <printk+0x466>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:548
					printk_putc('0', &count, info);
   1da7a:	864a                	mv	a2,s2
   1da7c:	082c                	addi	a1,sp,24
   1da7e:	03000513          	li	a0,48
   1da82:	3245                	jal	1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:549
					printk_putc('x', &count, info);
   1da84:	864a                	mv	a2,s2
   1da86:	082c                	addi	a1,sp,24
   1da88:	07800513          	li	a0,120
   1da8c:	3a59                	jal	1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:551
					dschar = TRUE;
   1da8e:	89de                	mv	s3,s7
   1da90:	bfc1                	j	1da60 <printk+0x340>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:556
				if (!IS_FLAG_MINUS(flags_used)) {
   1da92:	0014f793          	andi	a5,s1,1
   1da96:	fbf9                	bnez	a5,1da6c <printk+0x34c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:557
					if (IS_FLAG_POUND(flags_used)) {
   1da98:	0104f993          	andi	s3,s1,16
   1da9c:	00098463          	beqz	s3,1daa4 <printk+0x384>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:558
						vlen += 2;
   1daa0:	00250c93          	addi	s9,a0,2
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:560
					printk_pad_space(vlen, field_width, &count, info);
   1daa4:	86ca                	mv	a3,s2
   1daa6:	0830                	addi	a2,sp,24
   1daa8:	85da                	mv	a1,s6
   1daaa:	8566                	mv	a0,s9
   1daac:	349d                	jal	1d512 <printk_pad_space>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:561
					if (IS_FLAG_POUND(flags_used)) {
   1daae:	fa098fe3          	beqz	s3,1da6c <printk+0x34c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:562
						printk_putc('0', &count, info);
   1dab2:	864a                	mv	a2,s2
   1dab4:	082c                	addi	a1,sp,24
   1dab6:	03000513          	li	a0,48
   1daba:	32a5                	jal	1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:563
						printk_putc('x', &count, info);
   1dabc:	864a                	mv	a2,s2
   1dabe:	082c                	addi	a1,sp,24
   1dac0:	07800513          	li	a0,120
   1dac4:	3ab9                	jal	1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:564
						dschar = TRUE;
   1dac6:	89de                	mv	s3,s7
   1dac8:	b755                	j	1da6c <printk+0x34c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:570
				printk_putc('0', &count, info);
   1daca:	864a                	mv	a2,s2
   1dacc:	082c                	addi	a1,sp,24
   1dace:	03000513          	li	a0,48
   1dad2:	3a81                	jal	1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:571
				printk_putc('x', &count, info);
   1dad4:	864a                	mv	a2,s2
   1dad6:	082c                	addi	a1,sp,24
   1dad8:	07800513          	li	a0,120
   1dadc:	947ff0ef          	jal	ra,1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:572
				vlen += 2;
   1dae0:	0c89                	addi	s9,s9,2
   1dae2:	bf51                	j	1da76 <printk+0x356>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:577
		//无符号以八进制表示的整数输出
		case 'o':
			uval = (unsigned int) va_arg1(ap, unsigned int);
   1dae4:	00498b93          	addi	s7,s3,4
   1dae8:	0009a783          	lw	a5,0(s3)
   1daec:	c23e                	sw	a5,4(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:578
			vlen = printk_mknumstr(vstr, &uval, FALSE, 8);
   1daee:	46a1                	li	a3,8
   1daf0:	4601                	li	a2,0
   1daf2:	004c                	addi	a1,sp,4
   1daf4:	0868                	addi	a0,sp,28
   1daf6:	32a5                	jal	1d45e <printk_mknumstr>
   1daf8:	8caa                	mv	s9,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:577
			uval = (unsigned int) va_arg1(ap, unsigned int);
   1dafa:	89de                	mv	s3,s7
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:594
			goto cont_u;
		case 'u':
			uval = (unsigned int) va_arg1(ap, unsigned int);
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);

			cont_u: vstrp = &vstr[vlen];
   1dafc:	087c                	addi	a5,sp,28
   1dafe:	01978c33          	add	s8,a5,s9
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:596

			if (IS_FLAG_ZERO(flags_used)) {
   1db02:	0084f793          	andi	a5,s1,8
   1db06:	e7a5                	bnez	a5,1db6e <printk+0x44e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:600
				printk_pad_zero(vlen, field_width, &count, info);
				vlen = field_width;
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
   1db08:	0014f793          	andi	a5,s1,1
   1db0c:	efad                	bnez	a5,1db86 <printk+0x466>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:601
					printk_pad_space(vlen, field_width, &count, info);
   1db0e:	86ca                	mv	a3,s2
   1db10:	0830                	addi	a2,sp,24
   1db12:	85da                	mv	a1,s6
   1db14:	8566                	mv	a0,s9
   1db16:	3af5                	jal	1d512 <printk_pad_space>
   1db18:	a0bd                	j	1db86 <printk+0x466>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:582
			uval = (unsigned int) va_arg1(ap, unsigned int);
   1db1a:	00498b93          	addi	s7,s3,4
   1db1e:	0009a783          	lw	a5,0(s3)
   1db22:	c23e                	sw	a5,4(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:583
			vlen = printk_mknumstr(vstr, &uval, FALSE, 2);
   1db24:	4689                	li	a3,2
   1db26:	4601                	li	a2,0
   1db28:	004c                	addi	a1,sp,4
   1db2a:	0868                	addi	a0,sp,28
   1db2c:	933ff0ef          	jal	ra,1d45e <printk_mknumstr>
   1db30:	8caa                	mv	s9,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:582
			uval = (unsigned int) va_arg1(ap, unsigned int);
   1db32:	89de                	mv	s3,s7
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:584
			goto cont_u;
   1db34:	b7e1                	j	1dafc <printk+0x3dc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:587
			uval = (unsigned int) va_arg1(ap, void *);
   1db36:	00498b93          	addi	s7,s3,4
   1db3a:	0009a783          	lw	a5,0(s3)
   1db3e:	c23e                	sw	a5,4(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:588
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
   1db40:	46c1                	li	a3,16
   1db42:	4601                	li	a2,0
   1db44:	004c                	addi	a1,sp,4
   1db46:	0868                	addi	a0,sp,28
   1db48:	917ff0ef          	jal	ra,1d45e <printk_mknumstr>
   1db4c:	8caa                	mv	s9,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:587
			uval = (unsigned int) va_arg1(ap, void *);
   1db4e:	89de                	mv	s3,s7
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:589
			goto cont_u;
   1db50:	b775                	j	1dafc <printk+0x3dc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:591
			uval = (unsigned int) va_arg1(ap, unsigned int);
   1db52:	00498b93          	addi	s7,s3,4
   1db56:	0009a783          	lw	a5,0(s3)
   1db5a:	c23e                	sw	a5,4(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:592
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);
   1db5c:	46a9                	li	a3,10
   1db5e:	4601                	li	a2,0
   1db60:	004c                	addi	a1,sp,4
   1db62:	0868                	addi	a0,sp,28
   1db64:	8fbff0ef          	jal	ra,1d45e <printk_mknumstr>
   1db68:	8caa                	mv	s9,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:591
			uval = (unsigned int) va_arg1(ap, unsigned int);
   1db6a:	89de                	mv	s3,s7
   1db6c:	bf41                	j	1dafc <printk+0x3dc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:597
				printk_pad_zero(vlen, field_width, &count, info);
   1db6e:	86ca                	mv	a3,s2
   1db70:	0830                	addi	a2,sp,24
   1db72:	85da                	mv	a1,s6
   1db74:	8566                	mv	a0,s9
   1db76:	32a5                	jal	1d4de <printk_pad_zero>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:598
				vlen = field_width;
   1db78:	8cda                	mv	s9,s6
   1db7a:	a031                	j	1db86 <printk+0x466>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:606
				}
			}

			cont_xd: while (*vstrp)
				printk_putc(*vstrp--, &count, info);
   1db7c:	1c7d                	addi	s8,s8,-1
   1db7e:	864a                	mv	a2,s2
   1db80:	082c                	addi	a1,sp,24
   1db82:	8a1ff0ef          	jal	ra,1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:605 (discriminator 1)
			cont_xd: while (*vstrp)
   1db86:	000c0503          	lb	a0,0(s8)
   1db8a:	f96d                	bnez	a0,1db7c <printk+0x45c>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:608

			if (IS_FLAG_MINUS(flags_used)) {
   1db8c:	8885                	andi	s1,s1,1
   1db8e:	be0483e3          	beqz	s1,1d774 <printk+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:609
				printk_pad_space(vlen, field_width, &count, info);
   1db92:	86ca                	mv	a3,s2
   1db94:	0830                	addi	a2,sp,24
   1db96:	85da                	mv	a1,s6
   1db98:	8566                	mv	a0,s9
   1db9a:	3aa5                	jal	1d512 <printk_pad_space>
   1db9c:	bee1                	j	1d774 <printk+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:615
			}

			break;
        //字符型输出
		case 'c':
			cval = (char) va_arg1(ap, unsigned int);
   1db9e:	00498493          	addi	s1,s3,4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:616
			printk_putc(cval, &count, info);
   1dba2:	864a                	mv	a2,s2
   1dba4:	082c                	addi	a1,sp,24
   1dba6:	00098503          	lb	a0,0(s3)
   1dbaa:	879ff0ef          	jal	ra,1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:615
			cval = (char) va_arg1(ap, unsigned int);
   1dbae:	89a6                	mv	s3,s1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:617
			break;
   1dbb0:	b6d1                	j	1d774 <printk+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:619
		case 's':
			sval = (char *) va_arg1(ap, char *);
   1dbb2:	00498b93          	addi	s7,s3,4
   1dbb6:	0009a983          	lw	s3,0(s3)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:620
			if (sval) {
   1dbba:	06098a63          	beqz	s3,1dc2e <printk+0x50e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:621
				vlen = strlen(sval);
   1dbbe:	854e                	mv	a0,s3
   1dbc0:	7b8010ef          	jal	ra,1f378 <strlen>
   1dbc4:	8caa                	mv	s9,a0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:622
				if (!IS_FLAG_MINUS(flags_used)) {
   1dbc6:	8885                	andi	s1,s1,1
   1dbc8:	cc99                	beqz	s1,1dbe6 <printk+0x4c6>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:625
					printk_pad_space(vlen, field_width, &count, info);
				}
				if(precision_width!=0)
   1dbca:	020c0963          	beqz	s8,1dbfc <printk+0x4dc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:627
				{
					while (*sval)
   1dbce:	00098503          	lb	a0,0(s3)
   1dbd2:	c905                	beqz	a0,1dc02 <printk+0x4e2>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:629
					{
						if(precision_width>=1)
   1dbd4:	ff805de3          	blez	s8,1dbce <printk+0x4ae>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:631
						{
							precision_width--;
   1dbd8:	1c7d                	addi	s8,s8,-1
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:632
							printk_putc(*sval++, &count, info);
   1dbda:	0985                	addi	s3,s3,1
   1dbdc:	864a                	mv	a2,s2
   1dbde:	082c                	addi	a1,sp,24
   1dbe0:	843ff0ef          	jal	ra,1d422 <printk_putc>
   1dbe4:	b7ed                	j	1dbce <printk+0x4ae>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:623
					printk_pad_space(vlen, field_width, &count, info);
   1dbe6:	86ca                	mv	a3,s2
   1dbe8:	0830                	addi	a2,sp,24
   1dbea:	85da                	mv	a1,s6
   1dbec:	927ff0ef          	jal	ra,1d512 <printk_pad_space>
   1dbf0:	bfe9                	j	1dbca <printk+0x4aa>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:639
					}
				}
				else    //precision_width=0情况
				{
					while (*sval)
					   printk_putc(*sval++, &count, info);
   1dbf2:	0985                	addi	s3,s3,1
   1dbf4:	864a                	mv	a2,s2
   1dbf6:	082c                	addi	a1,sp,24
   1dbf8:	82bff0ef          	jal	ra,1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:638
					while (*sval)
   1dbfc:	00098503          	lb	a0,0(s3)
   1dc00:	f96d                	bnez	a0,1dbf2 <printk+0x4d2>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:641
				}
				if (IS_FLAG_MINUS(flags_used)) {
   1dc02:	e099                	bnez	s1,1dc08 <printk+0x4e8>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:619
			sval = (char *) va_arg1(ap, char *);
   1dc04:	89de                	mv	s3,s7
   1dc06:	b6bd                	j	1d774 <printk+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:642
					printk_pad_space(vlen, field_width, &count, info);
   1dc08:	86ca                	mv	a3,s2
   1dc0a:	0830                	addi	a2,sp,24
   1dc0c:	85da                	mv	a1,s6
   1dc0e:	8566                	mv	a0,s9
   1dc10:	903ff0ef          	jal	ra,1d512 <printk_pad_space>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:619
			sval = (char *) va_arg1(ap, char *);
   1dc14:	89de                	mv	s3,s7
   1dc16:	beb9                	j	1d774 <printk+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:647
				}
			}
			break;
		case 'n':
			ivalp = (int *) va_arg1(ap, int *);
   1dc18:	0009a783          	lw	a5,0(s3)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:648
			*ivalp = count;
   1dc1c:	4762                	lw	a4,24(sp)
   1dc1e:	c398                	sw	a4,0(a5)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:647
			ivalp = (int *) va_arg1(ap, int *);
   1dc20:	0991                	addi	s3,s3,4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:649
			break;
   1dc22:	be89                	j	1d774 <printk+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:652

		default:
			printk_putc(c, &count, info);
   1dc24:	864a                	mv	a2,s2
   1dc26:	082c                	addi	a1,sp,24
   1dc28:	ffaff0ef          	jal	ra,1d422 <printk_putc>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:653
			break;
   1dc2c:	b6a1                	j	1d774 <printk+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:619
			sval = (char *) va_arg1(ap, char *);
   1dc2e:	89de                	mv	s3,s7
   1dc30:	b691                	j	1d774 <printk+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:657
		}
	}
	return count;
}
   1dc32:	4562                	lw	a0,24(sp)
   1dc34:	50b6                	lw	ra,108(sp)
   1dc36:	5426                	lw	s0,104(sp)
   1dc38:	5496                	lw	s1,100(sp)
   1dc3a:	5906                	lw	s2,96(sp)
   1dc3c:	49f6                	lw	s3,92(sp)
   1dc3e:	4a66                	lw	s4,88(sp)
   1dc40:	4ad6                	lw	s5,84(sp)
   1dc42:	4b46                	lw	s6,80(sp)
   1dc44:	4bb6                	lw	s7,76(sp)
   1dc46:	4c26                	lw	s8,72(sp)
   1dc48:	4c96                	lw	s9,68(sp)
   1dc4a:	4d06                	lw	s10,64(sp)
   1dc4c:	6165                	addi	sp,sp,112
   1dc4e:	8082                	ret

0001dc50 <myprintf>:
myprintf():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:666
//参数说明：const char *:打印参数字符串：对输入的字符串进行解析并按格式输出
//       例如： printf("c=%c\n",c); 将c按char型进行输出
//函数返回：字符串长度
//======================================================================
int myprintf(const char *fmt, ...)
{
   1dc50:	7139                	addi	sp,sp,-64
   1dc52:	ce06                	sw	ra,28(sp)
   1dc54:	d22e                	sw	a1,36(sp)
   1dc56:	d432                	sw	a2,40(sp)
   1dc58:	d636                	sw	a3,44(sp)
   1dc5a:	d83a                	sw	a4,48(sp)
   1dc5c:	da3e                	sw	a5,52(sp)
   1dc5e:	dc42                	sw	a6,56(sp)
   1dc60:	de46                	sw	a7,60(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:671
//	char * ap;
	va_list ap;
	int rvalue;
	PRINTK_INFO info;
	info.dest = DEST_CONSOLE;  //宏定义为1
   1dc62:	4785                	li	a5,1
   1dc64:	c03e                	sw	a5,0(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:672
	info.func = &out_char;     //调用的串口输出函数
   1dc66:	0001d7b7          	lui	a5,0x1d
   1dc6a:	54678793          	addi	a5,a5,1350 # 1d546 <out_char>
   1dc6e:	c23e                	sw	a5,4(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:673
	va_start(ap, fmt);  //对ap 进行初始化，让它指向可变参数表里面的第一个参数
   1dc70:	1050                	addi	a2,sp,36
   1dc72:	c632                	sw	a2,12(sp)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:674
	rvalue = printk(&info, fmt, ap);
   1dc74:	85aa                	mv	a1,a0
   1dc76:	850a                	mv	a0,sp
   1dc78:	3465                	jal	1d720 <printk>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcc/printf.c:679

	va_end(ap);

	return rvalue;
}
   1dc7a:	40f2                	lw	ra,28(sp)
   1dc7c:	6121                	addi	sp,sp,64
   1dc7e:	8082                	ret

0001dc80 <handle_reset>:
handle_reset():
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:242
	.weak	handle_reset
	.align	1
handle_reset:
.option push 
.option	norelax 
    csrw mepc, t0
   1dc80:	34129073          	csrw	mepc,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:243
	la gp, __global_pointer$
   1dc84:	1ffe8197          	auipc	gp,0x1ffe8
   1dc88:	c3418193          	addi	gp,gp,-972 # 200058b8 <__global_pointer$>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:246
.option	pop 
1:
	la sp, _eusrstack
   1dc8c:	20002117          	auipc	sp,0x20002
   1dc90:	37410113          	addi	sp,sp,884 # 20020000 <GEC_USER_RAM_END>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:249
2:
	/* Load data section from flash to RAM */
	la a0, _data_lma
   1dc94:	00002517          	auipc	a0,0x2
   1dc98:	98450513          	addi	a0,a0,-1660 # 1f618 <_data_lma>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:250
	la a1, _data_vma
   1dc9c:	1ffe7597          	auipc	a1,0x1ffe7
   1dca0:	36458593          	addi	a1,a1,868 # 20005000 <GEC_USER_RAM_START>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:251
	la a2, _edata
   1dca4:	1ffe7617          	auipc	a2,0x1ffe7
   1dca8:	41460613          	addi	a2,a2,1044 # 200050b8 <_edata>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:252
	bgeu a1, a2, 2f
   1dcac:	00c5fa63          	bgeu	a1,a2,1dcc0 <handle_reset+0x40>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:254
1:
	lw t0, (a0)
   1dcb0:	00052283          	lw	t0,0(a0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:255
	sw t0, (a1)
   1dcb4:	0055a023          	sw	t0,0(a1)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:256
	addi a0, a0, 4
   1dcb8:	0511                	addi	a0,a0,4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:257
	addi a1, a1, 4
   1dcba:	0591                	addi	a1,a1,4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:258
	bltu a1, a2, 1b
   1dcbc:	fec5eae3          	bltu	a1,a2,1dcb0 <handle_reset+0x30>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:261
2:
	/* clear bss section */
	la a0, _sbss
   1dcc0:	1ffe7517          	auipc	a0,0x1ffe7
   1dcc4:	3f850513          	addi	a0,a0,1016 # 200050b8 <_edata>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:262
	la a1, _ebss
   1dcc8:	1ffe7597          	auipc	a1,0x1ffe7
   1dccc:	3f458593          	addi	a1,a1,1012 # 200050bc <_ebss>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:263
	bgeu a0, a1, 2f
   1dcd0:	00b57763          	bgeu	a0,a1,1dcde <handle_reset+0x5e>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:265
1:
	sw zero, (a0)
   1dcd4:	00052023          	sw	zero,0(a0)
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:266
	addi a0, a0, 4
   1dcd8:	0511                	addi	a0,a0,4
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:267
	bltu a0, a1, 1b
   1dcda:	feb56de3          	bltu	a0,a1,1dcd4 <handle_reset+0x54>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:270
2:
    /* pipe config */
    li t0, 0x1f
   1dcde:	42fd                	li	t0,31
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:271
    csrw 0xbc0, t0
   1dce0:	bc029073          	csrw	0xbc0,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:273

	li t0, 0x1f
   1dce4:	42fd                	li	t0,31
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:274
	csrw 0x804, t0
   1dce6:	80429073          	csrw	0x804,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:276

   	li t0, 0x6088           
   1dcea:	000062b7          	lui	t0,0x6
   1dcee:	08828293          	addi	t0,t0,136 # 6088 <GPIO_PINS_3+0x4088>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:277
   	csrs mstatus, t0
   1dcf2:	3002a073          	csrs	mstatus,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:279

 	la t0, _vector_base
   1dcf6:	ffffe297          	auipc	t0,0xffffe
   1dcfa:	74228293          	addi	t0,t0,1858 # 1c438 <_einit>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:280
    ori t0, t0, 3           
   1dcfe:	0032e293          	ori	t0,t0,3
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:281
	csrw mtvec, t0
   1dd02:	30529073          	csrw	mtvec,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:283

    jal  SystemInit
   1dd06:	85aff0ef          	jal	ra,1cd60 <SystemInit>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:284
    jal  Vectors_Init		/* 【固定】中断继承，.s文件仅修改此处 */
   1dd0a:	b40ff0ef          	jal	ra,1d04a <Vectors_Init>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:285
	la t0, main
   1dd0e:	fffff297          	auipc	t0,0xfffff
   1dd12:	a2a28293          	addi	t0,t0,-1494 # 1c738 <main>
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:286
	csrw mepc, t0
   1dd16:	34129073          	csrw	mepc,t0
C:\Users\ASUS\Desktop\三色灯的二组合和三组合\Debug/srcs/startup_ch32v30x.s:287
	mret
   1dd1a:	30200073          	mret

0001dd1e <__udivdi3>:
__udivdi3():
   1dd1e:	87b6                	mv	a5,a3
   1dd20:	88b2                	mv	a7,a2
   1dd22:	832a                	mv	t1,a0
   1dd24:	882e                	mv	a6,a1
   1dd26:	14069d63          	bnez	a3,1de80 <__udivdi3+0x162>
   1dd2a:	0ac5f963          	bgeu	a1,a2,1dddc <__udivdi3+0xbe>
   1dd2e:	6741                	lui	a4,0x10
   1dd30:	1ae66e63          	bltu	a2,a4,1deec <__udivdi3+0x1ce>
   1dd34:	010007b7          	lui	a5,0x1000
   1dd38:	34f66363          	bltu	a2,a5,1e07e <__udivdi3+0x360>
   1dd3c:	01865693          	srli	a3,a2,0x18
   1dd40:	47e1                	li	a5,24
   1dd42:	00001717          	auipc	a4,0x1
   1dd46:	7d670713          	addi	a4,a4,2006 # 1f518 <__clz_tab>
   1dd4a:	9736                	add	a4,a4,a3
   1dd4c:	00074703          	lbu	a4,0(a4)
   1dd50:	97ba                	add	a5,a5,a4
   1dd52:	02000713          	li	a4,32
   1dd56:	8f1d                	sub	a4,a4,a5
   1dd58:	cb19                	beqz	a4,1dd6e <__udivdi3+0x50>
   1dd5a:	00e59833          	sll	a6,a1,a4
   1dd5e:	00f557b3          	srl	a5,a0,a5
   1dd62:	00e618b3          	sll	a7,a2,a4
   1dd66:	0107e833          	or	a6,a5,a6
   1dd6a:	00e51333          	sll	t1,a0,a4
   1dd6e:	0108d613          	srli	a2,a7,0x10
   1dd72:	02c85533          	divu	a0,a6,a2
   1dd76:	01089693          	slli	a3,a7,0x10
   1dd7a:	82c1                	srli	a3,a3,0x10
   1dd7c:	01035793          	srli	a5,t1,0x10
   1dd80:	02c87733          	remu	a4,a6,a2
   1dd84:	02a685b3          	mul	a1,a3,a0
   1dd88:	0742                	slli	a4,a4,0x10
   1dd8a:	00f76833          	or	a6,a4,a5
   1dd8e:	00b87a63          	bgeu	a6,a1,1dda2 <__udivdi3+0x84>
   1dd92:	9846                	add	a6,a6,a7
   1dd94:	fff50793          	addi	a5,a0,-1
   1dd98:	01186463          	bltu	a6,a7,1dda0 <__udivdi3+0x82>
   1dd9c:	30b86763          	bltu	a6,a1,1e0aa <__udivdi3+0x38c>
   1dda0:	853e                	mv	a0,a5
   1dda2:	40b80833          	sub	a6,a6,a1
   1dda6:	02c85733          	divu	a4,a6,a2
   1ddaa:	0342                	slli	t1,t1,0x10
   1ddac:	01035313          	srli	t1,t1,0x10
   1ddb0:	02c87833          	remu	a6,a6,a2
   1ddb4:	02e686b3          	mul	a3,a3,a4
   1ddb8:	0842                	slli	a6,a6,0x10
   1ddba:	00686833          	or	a6,a6,t1
   1ddbe:	00d87b63          	bgeu	a6,a3,1ddd4 <__udivdi3+0xb6>
   1ddc2:	9846                	add	a6,a6,a7
   1ddc4:	fff70793          	addi	a5,a4,-1
   1ddc8:	01186563          	bltu	a6,a7,1ddd2 <__udivdi3+0xb4>
   1ddcc:	1779                	addi	a4,a4,-2
   1ddce:	00d86363          	bltu	a6,a3,1ddd4 <__udivdi3+0xb6>
   1ddd2:	873e                	mv	a4,a5
   1ddd4:	0542                	slli	a0,a0,0x10
   1ddd6:	8d59                	or	a0,a0,a4
   1ddd8:	4581                	li	a1,0
   1ddda:	8082                	ret
   1dddc:	e601                	bnez	a2,1dde4 <__udivdi3+0xc6>
   1ddde:	4705                	li	a4,1
   1dde0:	02c758b3          	divu	a7,a4,a2
   1dde4:	6741                	lui	a4,0x10
   1dde6:	0ee8ea63          	bltu	a7,a4,1deda <__udivdi3+0x1bc>
   1ddea:	010007b7          	lui	a5,0x1000
   1ddee:	28f8ec63          	bltu	a7,a5,1e086 <__udivdi3+0x368>
   1ddf2:	0188d693          	srli	a3,a7,0x18
   1ddf6:	47e1                	li	a5,24
   1ddf8:	00001717          	auipc	a4,0x1
   1ddfc:	72070713          	addi	a4,a4,1824 # 1f518 <__clz_tab>
   1de00:	9736                	add	a4,a4,a3
   1de02:	00074683          	lbu	a3,0(a4)
   1de06:	96be                	add	a3,a3,a5
   1de08:	02000793          	li	a5,32
   1de0c:	8f95                	sub	a5,a5,a3
   1de0e:	ebe5                	bnez	a5,1defe <__udivdi3+0x1e0>
   1de10:	01089e93          	slli	t4,a7,0x10
   1de14:	41158733          	sub	a4,a1,a7
   1de18:	0108df13          	srli	t5,a7,0x10
   1de1c:	010ede93          	srli	t4,t4,0x10
   1de20:	4585                	li	a1,1
   1de22:	01035793          	srli	a5,t1,0x10
   1de26:	03e75533          	divu	a0,a4,t5
   1de2a:	03e77733          	remu	a4,a4,t5
   1de2e:	03d506b3          	mul	a3,a0,t4
   1de32:	0742                	slli	a4,a4,0x10
   1de34:	8fd9                	or	a5,a5,a4
   1de36:	00d7fa63          	bgeu	a5,a3,1de4a <__udivdi3+0x12c>
   1de3a:	97c6                	add	a5,a5,a7
   1de3c:	fff50713          	addi	a4,a0,-1
   1de40:	0117e463          	bltu	a5,a7,1de48 <__udivdi3+0x12a>
   1de44:	26d7e663          	bltu	a5,a3,1e0b0 <__udivdi3+0x392>
   1de48:	853a                	mv	a0,a4
   1de4a:	8f95                	sub	a5,a5,a3
   1de4c:	03e7d733          	divu	a4,a5,t5
   1de50:	0342                	slli	t1,t1,0x10
   1de52:	01035313          	srli	t1,t1,0x10
   1de56:	03e7f7b3          	remu	a5,a5,t5
   1de5a:	03d70eb3          	mul	t4,a4,t4
   1de5e:	07c2                	slli	a5,a5,0x10
   1de60:	0067e7b3          	or	a5,a5,t1
   1de64:	01d7fb63          	bgeu	a5,t4,1de7a <__udivdi3+0x15c>
   1de68:	97c6                	add	a5,a5,a7
   1de6a:	fff70693          	addi	a3,a4,-1
   1de6e:	0117e563          	bltu	a5,a7,1de78 <__udivdi3+0x15a>
   1de72:	1779                	addi	a4,a4,-2
   1de74:	01d7e363          	bltu	a5,t4,1de7a <__udivdi3+0x15c>
   1de78:	8736                	mv	a4,a3
   1de7a:	0542                	slli	a0,a0,0x10
   1de7c:	8d59                	or	a0,a0,a4
   1de7e:	8082                	ret
   1de80:	04d5e263          	bltu	a1,a3,1dec4 <__udivdi3+0x1a6>
   1de84:	67c1                	lui	a5,0x10
   1de86:	04f6e263          	bltu	a3,a5,1deca <__udivdi3+0x1ac>
   1de8a:	010007b7          	lui	a5,0x1000
   1de8e:	1ef6e463          	bltu	a3,a5,1e076 <__udivdi3+0x358>
   1de92:	0186d713          	srli	a4,a3,0x18
   1de96:	4861                	li	a6,24
   1de98:	00001797          	auipc	a5,0x1
   1de9c:	68078793          	addi	a5,a5,1664 # 1f518 <__clz_tab>
   1dea0:	97ba                	add	a5,a5,a4
   1dea2:	0007c703          	lbu	a4,0(a5)
   1dea6:	02000e13          	li	t3,32
   1deaa:	9742                	add	a4,a4,a6
   1deac:	40ee0e33          	sub	t3,t3,a4
   1deb0:	0c0e1a63          	bnez	t3,1df84 <__udivdi3+0x266>
   1deb4:	1cb6ed63          	bltu	a3,a1,1e08e <__udivdi3+0x370>
   1deb8:	00c53533          	sltu	a0,a0,a2
   1debc:	00154513          	xori	a0,a0,1
   1dec0:	4581                	li	a1,0
   1dec2:	8082                	ret
   1dec4:	4581                	li	a1,0
   1dec6:	4501                	li	a0,0
   1dec8:	8082                	ret
   1deca:	0ff00793          	li	a5,255
   1dece:	1cd7f363          	bgeu	a5,a3,1e094 <__udivdi3+0x376>
   1ded2:	0086d713          	srli	a4,a3,0x8
   1ded6:	4821                	li	a6,8
   1ded8:	b7c1                	j	1de98 <__udivdi3+0x17a>
   1deda:	0ff00713          	li	a4,255
   1dede:	86c6                	mv	a3,a7
   1dee0:	f1177ce3          	bgeu	a4,a7,1ddf8 <__udivdi3+0xda>
   1dee4:	0088d693          	srli	a3,a7,0x8
   1dee8:	47a1                	li	a5,8
   1deea:	b739                	j	1ddf8 <__udivdi3+0xda>
   1deec:	0ff00713          	li	a4,255
   1def0:	86b2                	mv	a3,a2
   1def2:	e4c778e3          	bgeu	a4,a2,1dd42 <__udivdi3+0x24>
   1def6:	00865693          	srli	a3,a2,0x8
   1defa:	47a1                	li	a5,8
   1defc:	b599                	j	1dd42 <__udivdi3+0x24>
   1defe:	00f898b3          	sll	a7,a7,a5
   1df02:	00d5d633          	srl	a2,a1,a3
   1df06:	0108df13          	srli	t5,a7,0x10
   1df0a:	03e65e33          	divu	t3,a2,t5
   1df0e:	00f59733          	sll	a4,a1,a5
   1df12:	00d556b3          	srl	a3,a0,a3
   1df16:	8f55                	or	a4,a4,a3
   1df18:	01089e93          	slli	t4,a7,0x10
   1df1c:	010ede93          	srli	t4,t4,0x10
   1df20:	00f51333          	sll	t1,a0,a5
   1df24:	01075593          	srli	a1,a4,0x10
   1df28:	03e676b3          	remu	a3,a2,t5
   1df2c:	03ce87b3          	mul	a5,t4,t3
   1df30:	06c2                	slli	a3,a3,0x10
   1df32:	8ecd                	or	a3,a3,a1
   1df34:	00f6fb63          	bgeu	a3,a5,1df4a <__udivdi3+0x22c>
   1df38:	96c6                	add	a3,a3,a7
   1df3a:	fffe0613          	addi	a2,t3,-1
   1df3e:	1716e463          	bltu	a3,a7,1e0a6 <__udivdi3+0x388>
   1df42:	16f6f263          	bgeu	a3,a5,1e0a6 <__udivdi3+0x388>
   1df46:	1e79                	addi	t3,t3,-2
   1df48:	96c6                	add	a3,a3,a7
   1df4a:	8e9d                	sub	a3,a3,a5
   1df4c:	03e6d633          	divu	a2,a3,t5
   1df50:	01071793          	slli	a5,a4,0x10
   1df54:	83c1                	srli	a5,a5,0x10
   1df56:	03e6f6b3          	remu	a3,a3,t5
   1df5a:	02ce8533          	mul	a0,t4,a2
   1df5e:	01069713          	slli	a4,a3,0x10
   1df62:	8f5d                	or	a4,a4,a5
   1df64:	00a77b63          	bgeu	a4,a0,1df7a <__udivdi3+0x25c>
   1df68:	9746                	add	a4,a4,a7
   1df6a:	fff60793          	addi	a5,a2,-1
   1df6e:	13176863          	bltu	a4,a7,1e09e <__udivdi3+0x380>
   1df72:	12a77663          	bgeu	a4,a0,1e09e <__udivdi3+0x380>
   1df76:	1679                	addi	a2,a2,-2
   1df78:	9746                	add	a4,a4,a7
   1df7a:	010e1593          	slli	a1,t3,0x10
   1df7e:	8f09                	sub	a4,a4,a0
   1df80:	8dd1                	or	a1,a1,a2
   1df82:	b545                	j	1de22 <__udivdi3+0x104>
   1df84:	00e657b3          	srl	a5,a2,a4
   1df88:	01c696b3          	sll	a3,a3,t3
   1df8c:	8edd                	or	a3,a3,a5
   1df8e:	00e5d333          	srl	t1,a1,a4
   1df92:	0106df13          	srli	t5,a3,0x10
   1df96:	03e357b3          	divu	a5,t1,t5
   1df9a:	01069e93          	slli	t4,a3,0x10
   1df9e:	010ede93          	srli	t4,t4,0x10
   1dfa2:	01c59833          	sll	a6,a1,t3
   1dfa6:	00e55733          	srl	a4,a0,a4
   1dfaa:	01076833          	or	a6,a4,a6
   1dfae:	01085893          	srli	a7,a6,0x10
   1dfb2:	01c61633          	sll	a2,a2,t3
   1dfb6:	03e37333          	remu	t1,t1,t5
   1dfba:	02fe85b3          	mul	a1,t4,a5
   1dfbe:	0342                	slli	t1,t1,0x10
   1dfc0:	011368b3          	or	a7,t1,a7
   1dfc4:	00b8fb63          	bgeu	a7,a1,1dfda <__udivdi3+0x2bc>
   1dfc8:	98b6                	add	a7,a7,a3
   1dfca:	fff78713          	addi	a4,a5,-1
   1dfce:	0cd8ea63          	bltu	a7,a3,1e0a2 <__udivdi3+0x384>
   1dfd2:	0cb8f863          	bgeu	a7,a1,1e0a2 <__udivdi3+0x384>
   1dfd6:	17f9                	addi	a5,a5,-2
   1dfd8:	98b6                	add	a7,a7,a3
   1dfda:	40b888b3          	sub	a7,a7,a1
   1dfde:	03e8d733          	divu	a4,a7,t5
   1dfe2:	0842                	slli	a6,a6,0x10
   1dfe4:	01085813          	srli	a6,a6,0x10
   1dfe8:	03e8f8b3          	remu	a7,a7,t5
   1dfec:	02ee8333          	mul	t1,t4,a4
   1dff0:	08c2                	slli	a7,a7,0x10
   1dff2:	0108e5b3          	or	a1,a7,a6
   1dff6:	0065fb63          	bgeu	a1,t1,1e00c <__udivdi3+0x2ee>
   1dffa:	95b6                	add	a1,a1,a3
   1dffc:	fff70813          	addi	a6,a4,-1
   1e000:	08d5ed63          	bltu	a1,a3,1e09a <__udivdi3+0x37c>
   1e004:	0865fb63          	bgeu	a1,t1,1e09a <__udivdi3+0x37c>
   1e008:	1779                	addi	a4,a4,-2
   1e00a:	95b6                	add	a1,a1,a3
   1e00c:	07c2                	slli	a5,a5,0x10
   1e00e:	6f41                	lui	t5,0x10
   1e010:	8fd9                	or	a5,a5,a4
   1e012:	ffff0713          	addi	a4,t5,-1 # ffff <GPIO_PINS_3+0xdfff>
   1e016:	00e7f6b3          	and	a3,a5,a4
   1e01a:	0107d893          	srli	a7,a5,0x10
   1e01e:	8f71                	and	a4,a4,a2
   1e020:	8241                	srli	a2,a2,0x10
   1e022:	02e68eb3          	mul	t4,a3,a4
   1e026:	406585b3          	sub	a1,a1,t1
   1e02a:	02c686b3          	mul	a3,a3,a2
   1e02e:	010ed813          	srli	a6,t4,0x10
   1e032:	02e88733          	mul	a4,a7,a4
   1e036:	96ba                	add	a3,a3,a4
   1e038:	96c2                	add	a3,a3,a6
   1e03a:	02c88633          	mul	a2,a7,a2
   1e03e:	00e6f363          	bgeu	a3,a4,1e044 <__udivdi3+0x326>
   1e042:	967a                	add	a2,a2,t5
   1e044:	0106d893          	srli	a7,a3,0x10
   1e048:	9646                	add	a2,a2,a7
   1e04a:	02c5e263          	bltu	a1,a2,1e06e <__udivdi3+0x350>
   1e04e:	00c58563          	beq	a1,a2,1e058 <__udivdi3+0x33a>
   1e052:	853e                	mv	a0,a5
   1e054:	4581                	li	a1,0
   1e056:	8082                	ret
   1e058:	6741                	lui	a4,0x10
   1e05a:	177d                	addi	a4,a4,-1
   1e05c:	8ef9                	and	a3,a3,a4
   1e05e:	06c2                	slli	a3,a3,0x10
   1e060:	00eefeb3          	and	t4,t4,a4
   1e064:	01c51533          	sll	a0,a0,t3
   1e068:	96f6                	add	a3,a3,t4
   1e06a:	fed574e3          	bgeu	a0,a3,1e052 <__udivdi3+0x334>
   1e06e:	fff78513          	addi	a0,a5,-1
   1e072:	4581                	li	a1,0
   1e074:	8082                	ret
   1e076:	0106d713          	srli	a4,a3,0x10
   1e07a:	4841                	li	a6,16
   1e07c:	bd31                	j	1de98 <__udivdi3+0x17a>
   1e07e:	01065693          	srli	a3,a2,0x10
   1e082:	47c1                	li	a5,16
   1e084:	b97d                	j	1dd42 <__udivdi3+0x24>
   1e086:	0108d693          	srli	a3,a7,0x10
   1e08a:	47c1                	li	a5,16
   1e08c:	b3b5                	j	1ddf8 <__udivdi3+0xda>
   1e08e:	4581                	li	a1,0
   1e090:	4505                	li	a0,1
   1e092:	8082                	ret
   1e094:	8736                	mv	a4,a3
   1e096:	4801                	li	a6,0
   1e098:	b501                	j	1de98 <__udivdi3+0x17a>
   1e09a:	8742                	mv	a4,a6
   1e09c:	bf85                	j	1e00c <__udivdi3+0x2ee>
   1e09e:	863e                	mv	a2,a5
   1e0a0:	bde9                	j	1df7a <__udivdi3+0x25c>
   1e0a2:	87ba                	mv	a5,a4
   1e0a4:	bf1d                	j	1dfda <__udivdi3+0x2bc>
   1e0a6:	8e32                	mv	t3,a2
   1e0a8:	b54d                	j	1df4a <__udivdi3+0x22c>
   1e0aa:	1579                	addi	a0,a0,-2
   1e0ac:	9846                	add	a6,a6,a7
   1e0ae:	b9d5                	j	1dda2 <__udivdi3+0x84>
   1e0b0:	1579                	addi	a0,a0,-2
   1e0b2:	97c6                	add	a5,a5,a7
   1e0b4:	bb59                	j	1de4a <__udivdi3+0x12c>

0001e0b6 <__umoddi3>:
__umoddi3():
   1e0b6:	87b6                	mv	a5,a3
   1e0b8:	8832                	mv	a6,a2
   1e0ba:	832a                	mv	t1,a0
   1e0bc:	872e                	mv	a4,a1
   1e0be:	8e2e                	mv	t3,a1
   1e0c0:	14069363          	bnez	a3,1e206 <__umoddi3+0x150>
   1e0c4:	0ac5f163          	bgeu	a1,a2,1e166 <__umoddi3+0xb0>
   1e0c8:	6741                	lui	a4,0x10
   1e0ca:	1ae67863          	bgeu	a2,a4,1e27a <__umoddi3+0x1c4>
   1e0ce:	0ff00713          	li	a4,255
   1e0d2:	86b2                	mv	a3,a2
   1e0d4:	00c77563          	bgeu	a4,a2,1e0de <__umoddi3+0x28>
   1e0d8:	00865693          	srli	a3,a2,0x8
   1e0dc:	47a1                	li	a5,8
   1e0de:	00001717          	auipc	a4,0x1
   1e0e2:	43a70713          	addi	a4,a4,1082 # 1f518 <__clz_tab>
   1e0e6:	9736                	add	a4,a4,a3
   1e0e8:	00074703          	lbu	a4,0(a4)
   1e0ec:	02000893          	li	a7,32
   1e0f0:	97ba                	add	a5,a5,a4
   1e0f2:	40f888b3          	sub	a7,a7,a5
   1e0f6:	00088c63          	beqz	a7,1e10e <__umoddi3+0x58>
   1e0fa:	011595b3          	sll	a1,a1,a7
   1e0fe:	00f557b3          	srl	a5,a0,a5
   1e102:	01161833          	sll	a6,a2,a7
   1e106:	00b7ee33          	or	t3,a5,a1
   1e10a:	01151333          	sll	t1,a0,a7
   1e10e:	01085613          	srli	a2,a6,0x10
   1e112:	02ce57b3          	divu	a5,t3,a2
   1e116:	01081513          	slli	a0,a6,0x10
   1e11a:	8141                	srli	a0,a0,0x10
   1e11c:	01035693          	srli	a3,t1,0x10
   1e120:	02ce7e33          	remu	t3,t3,a2
   1e124:	02f507b3          	mul	a5,a0,a5
   1e128:	0e42                	slli	t3,t3,0x10
   1e12a:	00de6733          	or	a4,t3,a3
   1e12e:	00f77863          	bgeu	a4,a5,1e13e <__umoddi3+0x88>
   1e132:	9742                	add	a4,a4,a6
   1e134:	01076563          	bltu	a4,a6,1e13e <__umoddi3+0x88>
   1e138:	00f77363          	bgeu	a4,a5,1e13e <__umoddi3+0x88>
   1e13c:	9742                	add	a4,a4,a6
   1e13e:	8f1d                	sub	a4,a4,a5
   1e140:	02c756b3          	divu	a3,a4,a2
   1e144:	01031793          	slli	a5,t1,0x10
   1e148:	83c1                	srli	a5,a5,0x10
   1e14a:	02c77733          	remu	a4,a4,a2
   1e14e:	02d50533          	mul	a0,a0,a3
   1e152:	0742                	slli	a4,a4,0x10
   1e154:	8fd9                	or	a5,a5,a4
   1e156:	08a7ec63          	bltu	a5,a0,1e1ee <__umoddi3+0x138>
   1e15a:	40a78533          	sub	a0,a5,a0
   1e15e:	01155533          	srl	a0,a0,a7
   1e162:	4581                	li	a1,0
   1e164:	8082                	ret
   1e166:	e601                	bnez	a2,1e16e <__umoddi3+0xb8>
   1e168:	4705                	li	a4,1
   1e16a:	02c75833          	divu	a6,a4,a2
   1e16e:	6741                	lui	a4,0x10
   1e170:	0ee86c63          	bltu	a6,a4,1e268 <__umoddi3+0x1b2>
   1e174:	010007b7          	lui	a5,0x1000
   1e178:	2af86563          	bltu	a6,a5,1e422 <__umoddi3+0x36c>
   1e17c:	01885693          	srli	a3,a6,0x18
   1e180:	47e1                	li	a5,24
   1e182:	00001717          	auipc	a4,0x1
   1e186:	39670713          	addi	a4,a4,918 # 1f518 <__clz_tab>
   1e18a:	9736                	add	a4,a4,a3
   1e18c:	00074703          	lbu	a4,0(a4)
   1e190:	02000893          	li	a7,32
   1e194:	97ba                	add	a5,a5,a4
   1e196:	40f888b3          	sub	a7,a7,a5
   1e19a:	1e089a63          	bnez	a7,1e38e <__umoddi3+0x2d8>
   1e19e:	01081e13          	slli	t3,a6,0x10
   1e1a2:	410585b3          	sub	a1,a1,a6
   1e1a6:	01085613          	srli	a2,a6,0x10
   1e1aa:	010e5e13          	srli	t3,t3,0x10
   1e1ae:	01035713          	srli	a4,t1,0x10
   1e1b2:	02c5d6b3          	divu	a3,a1,a2
   1e1b6:	02c5f5b3          	remu	a1,a1,a2
   1e1ba:	03c686b3          	mul	a3,a3,t3
   1e1be:	05c2                	slli	a1,a1,0x10
   1e1c0:	8f4d                	or	a4,a4,a1
   1e1c2:	00d77763          	bgeu	a4,a3,1e1d0 <__umoddi3+0x11a>
   1e1c6:	9742                	add	a4,a4,a6
   1e1c8:	01076463          	bltu	a4,a6,1e1d0 <__umoddi3+0x11a>
   1e1cc:	26d76a63          	bltu	a4,a3,1e440 <__umoddi3+0x38a>
   1e1d0:	8f15                	sub	a4,a4,a3
   1e1d2:	02c75533          	divu	a0,a4,a2
   1e1d6:	0342                	slli	t1,t1,0x10
   1e1d8:	01035313          	srli	t1,t1,0x10
   1e1dc:	02c77733          	remu	a4,a4,a2
   1e1e0:	03c50533          	mul	a0,a0,t3
   1e1e4:	0742                	slli	a4,a4,0x10
   1e1e6:	006767b3          	or	a5,a4,t1
   1e1ea:	00a7f863          	bgeu	a5,a0,1e1fa <__umoddi3+0x144>
   1e1ee:	97c2                	add	a5,a5,a6
   1e1f0:	0107e563          	bltu	a5,a6,1e1fa <__umoddi3+0x144>
   1e1f4:	00a7f363          	bgeu	a5,a0,1e1fa <__umoddi3+0x144>
   1e1f8:	97c2                	add	a5,a5,a6
   1e1fa:	40a78533          	sub	a0,a5,a0
   1e1fe:	01155533          	srl	a0,a0,a7
   1e202:	4581                	li	a1,0
   1e204:	8082                	ret
   1e206:	882a                	mv	a6,a0
   1e208:	f4d5eee3          	bltu	a1,a3,1e164 <__umoddi3+0xae>
   1e20c:	67c1                	lui	a5,0x10
   1e20e:	04f6e563          	bltu	a3,a5,1e258 <__umoddi3+0x1a2>
   1e212:	010007b7          	lui	a5,0x1000
   1e216:	20f6e263          	bltu	a3,a5,1e41a <__umoddi3+0x364>
   1e21a:	0186d313          	srli	t1,a3,0x18
   1e21e:	48e1                	li	a7,24
   1e220:	00001797          	auipc	a5,0x1
   1e224:	2f878793          	addi	a5,a5,760 # 1f518 <__clz_tab>
   1e228:	979a                	add	a5,a5,t1
   1e22a:	0007ce03          	lbu	t3,0(a5)
   1e22e:	02000313          	li	t1,32
   1e232:	9e46                	add	t3,t3,a7
   1e234:	41c30333          	sub	t1,t1,t3
   1e238:	04031963          	bnez	t1,1e28a <__umoddi3+0x1d4>
   1e23c:	00b6e463          	bltu	a3,a1,1e244 <__umoddi3+0x18e>
   1e240:	00c56963          	bltu	a0,a2,1e252 <__umoddi3+0x19c>
   1e244:	40c50833          	sub	a6,a0,a2
   1e248:	8d95                	sub	a1,a1,a3
   1e24a:	01053733          	sltu	a4,a0,a6
   1e24e:	40e58733          	sub	a4,a1,a4
   1e252:	8542                	mv	a0,a6
   1e254:	85ba                	mv	a1,a4
   1e256:	8082                	ret
   1e258:	0ff00793          	li	a5,255
   1e25c:	1cd7fb63          	bgeu	a5,a3,1e432 <__umoddi3+0x37c>
   1e260:	0086d313          	srli	t1,a3,0x8
   1e264:	48a1                	li	a7,8
   1e266:	bf6d                	j	1e220 <__umoddi3+0x16a>
   1e268:	0ff00713          	li	a4,255
   1e26c:	86c2                	mv	a3,a6
   1e26e:	f1077ae3          	bgeu	a4,a6,1e182 <__umoddi3+0xcc>
   1e272:	00885693          	srli	a3,a6,0x8
   1e276:	47a1                	li	a5,8
   1e278:	b729                	j	1e182 <__umoddi3+0xcc>
   1e27a:	010007b7          	lui	a5,0x1000
   1e27e:	1af66663          	bltu	a2,a5,1e42a <__umoddi3+0x374>
   1e282:	01865693          	srli	a3,a2,0x18
   1e286:	47e1                	li	a5,24
   1e288:	bd99                	j	1e0de <__umoddi3+0x28>
   1e28a:	01c657b3          	srl	a5,a2,t3
   1e28e:	006696b3          	sll	a3,a3,t1
   1e292:	8edd                	or	a3,a3,a5
   1e294:	01c5d8b3          	srl	a7,a1,t3
   1e298:	0106d713          	srli	a4,a3,0x10
   1e29c:	02e8deb3          	divu	t4,a7,a4
   1e2a0:	01069f13          	slli	t5,a3,0x10
   1e2a4:	01c557b3          	srl	a5,a0,t3
   1e2a8:	010f5f13          	srli	t5,t5,0x10
   1e2ac:	006595b3          	sll	a1,a1,t1
   1e2b0:	8ddd                	or	a1,a1,a5
   1e2b2:	0105d813          	srli	a6,a1,0x10
   1e2b6:	00661633          	sll	a2,a2,t1
   1e2ba:	00651533          	sll	a0,a0,t1
   1e2be:	02e8f8b3          	remu	a7,a7,a4
   1e2c2:	03df07b3          	mul	a5,t5,t4
   1e2c6:	08c2                	slli	a7,a7,0x10
   1e2c8:	0108e833          	or	a6,a7,a6
   1e2cc:	00f87b63          	bgeu	a6,a5,1e2e2 <__umoddi3+0x22c>
   1e2d0:	9836                	add	a6,a6,a3
   1e2d2:	fffe8893          	addi	a7,t4,-1
   1e2d6:	16d86363          	bltu	a6,a3,1e43c <__umoddi3+0x386>
   1e2da:	16f87163          	bgeu	a6,a5,1e43c <__umoddi3+0x386>
   1e2de:	1ef9                	addi	t4,t4,-2
   1e2e0:	9836                	add	a6,a6,a3
   1e2e2:	40f80833          	sub	a6,a6,a5
   1e2e6:	02e857b3          	divu	a5,a6,a4
   1e2ea:	05c2                	slli	a1,a1,0x10
   1e2ec:	81c1                	srli	a1,a1,0x10
   1e2ee:	02e87833          	remu	a6,a6,a4
   1e2f2:	02ff0f33          	mul	t5,t5,a5
   1e2f6:	01081713          	slli	a4,a6,0x10
   1e2fa:	8f4d                	or	a4,a4,a1
   1e2fc:	01e77b63          	bgeu	a4,t5,1e312 <__umoddi3+0x25c>
   1e300:	9736                	add	a4,a4,a3
   1e302:	fff78593          	addi	a1,a5,-1 # ffffff <MAINLOOP_COUNT+0x1b1e3f>
   1e306:	12d76963          	bltu	a4,a3,1e438 <__umoddi3+0x382>
   1e30a:	13e77763          	bgeu	a4,t5,1e438 <__umoddi3+0x382>
   1e30e:	17f9                	addi	a5,a5,-2
   1e310:	9736                	add	a4,a4,a3
   1e312:	0ec2                	slli	t4,t4,0x10
   1e314:	62c1                	lui	t0,0x10
   1e316:	00feeeb3          	or	t4,t4,a5
   1e31a:	fff28813          	addi	a6,t0,-1 # ffff <GPIO_PINS_3+0xdfff>
   1e31e:	010ef8b3          	and	a7,t4,a6
   1e322:	01065593          	srli	a1,a2,0x10
   1e326:	010ede93          	srli	t4,t4,0x10
   1e32a:	01067833          	and	a6,a2,a6
   1e32e:	03088fb3          	mul	t6,a7,a6
   1e332:	41e70733          	sub	a4,a4,t5
   1e336:	030e8833          	mul	a6,t4,a6
   1e33a:	010fd793          	srli	a5,t6,0x10
   1e33e:	02b888b3          	mul	a7,a7,a1
   1e342:	98c2                	add	a7,a7,a6
   1e344:	97c6                	add	a5,a5,a7
   1e346:	02be8eb3          	mul	t4,t4,a1
   1e34a:	0107f363          	bgeu	a5,a6,1e350 <__umoddi3+0x29a>
   1e34e:	9e96                	add	t4,t4,t0
   1e350:	6841                	lui	a6,0x10
   1e352:	187d                	addi	a6,a6,-1
   1e354:	0107d593          	srli	a1,a5,0x10
   1e358:	0107f7b3          	and	a5,a5,a6
   1e35c:	07c2                	slli	a5,a5,0x10
   1e35e:	010fffb3          	and	t6,t6,a6
   1e362:	95f6                	add	a1,a1,t4
   1e364:	97fe                	add	a5,a5,t6
   1e366:	0ab76263          	bltu	a4,a1,1e40a <__umoddi3+0x354>
   1e36a:	08b70e63          	beq	a4,a1,1e406 <__umoddi3+0x350>
   1e36e:	40f507b3          	sub	a5,a0,a5
   1e372:	00f53533          	sltu	a0,a0,a5
   1e376:	40b705b3          	sub	a1,a4,a1
   1e37a:	8d89                	sub	a1,a1,a0
   1e37c:	01c59e33          	sll	t3,a1,t3
   1e380:	0067d533          	srl	a0,a5,t1
   1e384:	00ae6533          	or	a0,t3,a0
   1e388:	0065d5b3          	srl	a1,a1,t1
   1e38c:	8082                	ret
   1e38e:	01181833          	sll	a6,a6,a7
   1e392:	00f5d733          	srl	a4,a1,a5
   1e396:	01085613          	srli	a2,a6,0x10
   1e39a:	02c756b3          	divu	a3,a4,a2
   1e39e:	01081e13          	slli	t3,a6,0x10
   1e3a2:	00f557b3          	srl	a5,a0,a5
   1e3a6:	010e5e13          	srli	t3,t3,0x10
   1e3aa:	011595b3          	sll	a1,a1,a7
   1e3ae:	8ddd                	or	a1,a1,a5
   1e3b0:	0105de93          	srli	t4,a1,0x10
   1e3b4:	01151333          	sll	t1,a0,a7
   1e3b8:	02c77733          	remu	a4,a4,a2
   1e3bc:	02de07b3          	mul	a5,t3,a3
   1e3c0:	01071693          	slli	a3,a4,0x10
   1e3c4:	01d6e6b3          	or	a3,a3,t4
   1e3c8:	00f6f863          	bgeu	a3,a5,1e3d8 <__umoddi3+0x322>
   1e3cc:	96c2                	add	a3,a3,a6
   1e3ce:	0106e563          	bltu	a3,a6,1e3d8 <__umoddi3+0x322>
   1e3d2:	00f6f363          	bgeu	a3,a5,1e3d8 <__umoddi3+0x322>
   1e3d6:	96c2                	add	a3,a3,a6
   1e3d8:	8e9d                	sub	a3,a3,a5
   1e3da:	02c6d733          	divu	a4,a3,a2
   1e3de:	01059793          	slli	a5,a1,0x10
   1e3e2:	83c1                	srli	a5,a5,0x10
   1e3e4:	02c6f6b3          	remu	a3,a3,a2
   1e3e8:	02ee0733          	mul	a4,t3,a4
   1e3ec:	01069593          	slli	a1,a3,0x10
   1e3f0:	8ddd                	or	a1,a1,a5
   1e3f2:	00e5f863          	bgeu	a1,a4,1e402 <__umoddi3+0x34c>
   1e3f6:	95c2                	add	a1,a1,a6
   1e3f8:	0105e563          	bltu	a1,a6,1e402 <__umoddi3+0x34c>
   1e3fc:	00e5f363          	bgeu	a1,a4,1e402 <__umoddi3+0x34c>
   1e400:	95c2                	add	a1,a1,a6
   1e402:	8d99                	sub	a1,a1,a4
   1e404:	b36d                	j	1e1ae <__umoddi3+0xf8>
   1e406:	f6f574e3          	bgeu	a0,a5,1e36e <__umoddi3+0x2b8>
   1e40a:	40c78633          	sub	a2,a5,a2
   1e40e:	00c7b7b3          	sltu	a5,a5,a2
   1e412:	97b6                	add	a5,a5,a3
   1e414:	8d9d                	sub	a1,a1,a5
   1e416:	87b2                	mv	a5,a2
   1e418:	bf99                	j	1e36e <__umoddi3+0x2b8>
   1e41a:	0106d313          	srli	t1,a3,0x10
   1e41e:	48c1                	li	a7,16
   1e420:	b501                	j	1e220 <__umoddi3+0x16a>
   1e422:	01085693          	srli	a3,a6,0x10
   1e426:	47c1                	li	a5,16
   1e428:	bba9                	j	1e182 <__umoddi3+0xcc>
   1e42a:	01065693          	srli	a3,a2,0x10
   1e42e:	47c1                	li	a5,16
   1e430:	b17d                	j	1e0de <__umoddi3+0x28>
   1e432:	8336                	mv	t1,a3
   1e434:	4881                	li	a7,0
   1e436:	b3ed                	j	1e220 <__umoddi3+0x16a>
   1e438:	87ae                	mv	a5,a1
   1e43a:	bde1                	j	1e312 <__umoddi3+0x25c>
   1e43c:	8ec6                	mv	t4,a7
   1e43e:	b555                	j	1e2e2 <__umoddi3+0x22c>
   1e440:	9742                	add	a4,a4,a6
   1e442:	b379                	j	1e1d0 <__umoddi3+0x11a>

0001e444 <__ledf2>:
__ltdf2():
   1e444:	0145d713          	srli	a4,a1,0x14
   1e448:	001007b7          	lui	a5,0x100
   1e44c:	17fd                	addi	a5,a5,-1
   1e44e:	0146d813          	srli	a6,a3,0x14
   1e452:	7ff77713          	andi	a4,a4,2047
   1e456:	7ff00893          	li	a7,2047
   1e45a:	00b7fe33          	and	t3,a5,a1
   1e45e:	8eaa                	mv	t4,a0
   1e460:	8ff5                	and	a5,a5,a3
   1e462:	81fd                	srli	a1,a1,0x1f
   1e464:	8f32                	mv	t5,a2
   1e466:	7ff87813          	andi	a6,a6,2047
   1e46a:	82fd                	srli	a3,a3,0x1f
   1e46c:	03170e63          	beq	a4,a7,1e4a8 <__ledf2+0x64>
   1e470:	01180d63          	beq	a6,a7,1e48a <__ledf2+0x46>
   1e474:	e329                	bnez	a4,1e4b6 <__ledf2+0x72>
   1e476:	00ae68b3          	or	a7,t3,a0
   1e47a:	00081f63          	bnez	a6,1e498 <__ledf2+0x54>
   1e47e:	8e5d                	or	a2,a2,a5
   1e480:	ee01                	bnez	a2,1e498 <__ledf2+0x54>
   1e482:	4301                	li	t1,0
   1e484:	04088c63          	beqz	a7,1e4dc <__ledf2+0x98>
   1e488:	a821                	j	1e4a0 <__ledf2+0x5c>
   1e48a:	00c7e8b3          	or	a7,a5,a2
   1e48e:	4309                	li	t1,2
   1e490:	04089663          	bnez	a7,1e4dc <__ledf2+0x98>
   1e494:	d36d                	beqz	a4,1e476 <__ledf2+0x32>
   1e496:	a005                	j	1e4b6 <__ledf2+0x72>
   1e498:	04088463          	beqz	a7,1e4e0 <__ledf2+0x9c>
   1e49c:	02d58563          	beq	a1,a3,1e4c6 <__ledf2+0x82>
   1e4a0:	4305                	li	t1,1
   1e4a2:	cd8d                	beqz	a1,1e4dc <__ledf2+0x98>
   1e4a4:	537d                	li	t1,-1
   1e4a6:	a81d                	j	1e4dc <__ledf2+0x98>
   1e4a8:	00ae68b3          	or	a7,t3,a0
   1e4ac:	4309                	li	t1,2
   1e4ae:	02089763          	bnez	a7,1e4dc <__ledf2+0x98>
   1e4b2:	02e80a63          	beq	a6,a4,1e4e6 <__ledf2+0xa2>
   1e4b6:	00081463          	bnez	a6,1e4be <__ledf2+0x7a>
   1e4ba:	8e5d                	or	a2,a2,a5
   1e4bc:	d275                	beqz	a2,1e4a0 <__ledf2+0x5c>
   1e4be:	fed591e3          	bne	a1,a3,1e4a0 <__ledf2+0x5c>
   1e4c2:	fce84fe3          	blt	a6,a4,1e4a0 <__ledf2+0x5c>
   1e4c6:	01074963          	blt	a4,a6,1e4d8 <__ledf2+0x94>
   1e4ca:	fdc7ebe3          	bltu	a5,t3,1e4a0 <__ledf2+0x5c>
   1e4ce:	00fe0f63          	beq	t3,a5,1e4ec <__ledf2+0xa8>
   1e4d2:	4301                	li	t1,0
   1e4d4:	00fe7463          	bgeu	t3,a5,1e4dc <__ledf2+0x98>
   1e4d8:	d5f1                	beqz	a1,1e4a4 <__ledf2+0x60>
   1e4da:	4305                	li	t1,1
   1e4dc:	851a                	mv	a0,t1
   1e4de:	8082                	ret
   1e4e0:	feed                	bnez	a3,1e4da <__ledf2+0x96>
   1e4e2:	537d                	li	t1,-1
   1e4e4:	bfe5                	j	1e4dc <__ledf2+0x98>
   1e4e6:	8e5d                	or	a2,a2,a5
   1e4e8:	da79                	beqz	a2,1e4be <__ledf2+0x7a>
   1e4ea:	bfcd                	j	1e4dc <__ledf2+0x98>
   1e4ec:	fbdf6ae3          	bltu	t5,t4,1e4a0 <__ledf2+0x5c>
   1e4f0:	4301                	li	t1,0
   1e4f2:	ffeef5e3          	bgeu	t4,t5,1e4dc <__ledf2+0x98>
   1e4f6:	f1f5                	bnez	a1,1e4da <__ledf2+0x96>
   1e4f8:	b775                	j	1e4a4 <__ledf2+0x60>

0001e4fa <__muldf3>:
__muldf3():
   1e4fa:	7139                	addi	sp,sp,-64
   1e4fc:	d84a                	sw	s2,48(sp)
   1e4fe:	0145d913          	srli	s2,a1,0x14
   1e502:	d64e                	sw	s3,44(sp)
   1e504:	d452                	sw	s4,40(sp)
   1e506:	d256                	sw	s5,36(sp)
   1e508:	00c59993          	slli	s3,a1,0xc
   1e50c:	de06                	sw	ra,60(sp)
   1e50e:	dc22                	sw	s0,56(sp)
   1e510:	da26                	sw	s1,52(sp)
   1e512:	d05a                	sw	s6,32(sp)
   1e514:	ce5e                	sw	s7,28(sp)
   1e516:	7ff97913          	andi	s2,s2,2047
   1e51a:	8a2a                	mv	s4,a0
   1e51c:	00c9d993          	srli	s3,s3,0xc
   1e520:	01f5da93          	srli	s5,a1,0x1f
   1e524:	0e090d63          	beqz	s2,1e61e <__muldf3+0x124>
   1e528:	7ff00793          	li	a5,2047
   1e52c:	18f90663          	beq	s2,a5,1e6b8 <__muldf3+0x1be>
   1e530:	01d55413          	srli	s0,a0,0x1d
   1e534:	098e                	slli	s3,s3,0x3
   1e536:	013469b3          	or	s3,s0,s3
   1e53a:	00800437          	lui	s0,0x800
   1e53e:	0089e433          	or	s0,s3,s0
   1e542:	00351493          	slli	s1,a0,0x3
   1e546:	c0190913          	addi	s2,s2,-1023
   1e54a:	4981                	li	s3,0
   1e54c:	4b81                	li	s7,0
   1e54e:	0146d713          	srli	a4,a3,0x14
   1e552:	00c69a13          	slli	s4,a3,0xc
   1e556:	7ff77713          	andi	a4,a4,2047
   1e55a:	85b2                	mv	a1,a2
   1e55c:	00ca5a13          	srli	s4,s4,0xc
   1e560:	01f6db13          	srli	s6,a3,0x1f
   1e564:	10070b63          	beqz	a4,1e67a <__muldf3+0x180>
   1e568:	7ff00793          	li	a5,2047
   1e56c:	04f70363          	beq	a4,a5,1e5b2 <__muldf3+0xb8>
   1e570:	01d65793          	srli	a5,a2,0x1d
   1e574:	0a0e                	slli	s4,s4,0x3
   1e576:	0147ea33          	or	s4,a5,s4
   1e57a:	c0170713          	addi	a4,a4,-1023
   1e57e:	008007b7          	lui	a5,0x800
   1e582:	00fa67b3          	or	a5,s4,a5
   1e586:	00361593          	slli	a1,a2,0x3
   1e58a:	993a                	add	s2,s2,a4
   1e58c:	4881                	li	a7,0
   1e58e:	016ac733          	xor	a4,s5,s6
   1e592:	46bd                	li	a3,15
   1e594:	853a                	mv	a0,a4
   1e596:	00190813          	addi	a6,s2,1
   1e59a:	1736e863          	bltu	a3,s3,1e70a <__muldf3+0x210>
   1e59e:	00001617          	auipc	a2,0x1
   1e5a2:	f3a60613          	addi	a2,a2,-198 # 1f4d8 <strlen+0x160>
   1e5a6:	098a                	slli	s3,s3,0x2
   1e5a8:	99b2                	add	s3,s3,a2
   1e5aa:	0009a683          	lw	a3,0(s3)
   1e5ae:	96b2                	add	a3,a3,a2
   1e5b0:	8682                	jr	a3
   1e5b2:	00ca67b3          	or	a5,s4,a2
   1e5b6:	7ff90913          	addi	s2,s2,2047
   1e5ba:	12079963          	bnez	a5,1e6ec <__muldf3+0x1f2>
   1e5be:	0029e993          	ori	s3,s3,2
   1e5c2:	4581                	li	a1,0
   1e5c4:	4889                	li	a7,2
   1e5c6:	b7e1                	j	1e58e <__muldf3+0x94>
   1e5c8:	4701                	li	a4,0
   1e5ca:	7ff00793          	li	a5,2047
   1e5ce:	00080437          	lui	s0,0x80
   1e5d2:	4481                	li	s1,0
   1e5d4:	0432                	slli	s0,s0,0xc
   1e5d6:	07d2                	slli	a5,a5,0x14
   1e5d8:	8031                	srli	s0,s0,0xc
   1e5da:	077e                	slli	a4,a4,0x1f
   1e5dc:	8c5d                	or	s0,s0,a5
   1e5de:	8c59                	or	s0,s0,a4
   1e5e0:	85a2                	mv	a1,s0
   1e5e2:	50f2                	lw	ra,60(sp)
   1e5e4:	5462                	lw	s0,56(sp)
   1e5e6:	8526                	mv	a0,s1
   1e5e8:	5942                	lw	s2,48(sp)
   1e5ea:	54d2                	lw	s1,52(sp)
   1e5ec:	59b2                	lw	s3,44(sp)
   1e5ee:	5a22                	lw	s4,40(sp)
   1e5f0:	5a92                	lw	s5,36(sp)
   1e5f2:	5b02                	lw	s6,32(sp)
   1e5f4:	4bf2                	lw	s7,28(sp)
   1e5f6:	6121                	addi	sp,sp,64
   1e5f8:	8082                	ret
   1e5fa:	855a                	mv	a0,s6
   1e5fc:	843e                	mv	s0,a5
   1e5fe:	84ae                	mv	s1,a1
   1e600:	8bc6                	mv	s7,a7
   1e602:	4789                	li	a5,2
   1e604:	0efb8d63          	beq	s7,a5,1e6fe <__muldf3+0x204>
   1e608:	478d                	li	a5,3
   1e60a:	fafb8fe3          	beq	s7,a5,1e5c8 <__muldf3+0xce>
   1e60e:	4785                	li	a5,1
   1e610:	872a                	mv	a4,a0
   1e612:	38fb9e63          	bne	s7,a5,1e9ae <__muldf3+0x4b4>
   1e616:	4781                	li	a5,0
   1e618:	4401                	li	s0,0
   1e61a:	4481                	li	s1,0
   1e61c:	bf65                	j	1e5d4 <__muldf3+0xda>
   1e61e:	00a9e433          	or	s0,s3,a0
   1e622:	c061                	beqz	s0,1e6e2 <__muldf3+0x1e8>
   1e624:	c636                	sw	a3,12(sp)
   1e626:	c432                	sw	a2,8(sp)
   1e628:	2a098c63          	beqz	s3,1e8e0 <__muldf3+0x3e6>
   1e62c:	854e                	mv	a0,s3
   1e62e:	41f000ef          	jal	ra,1f24c <__clzsi2>
   1e632:	4622                	lw	a2,8(sp)
   1e634:	46b2                	lw	a3,12(sp)
   1e636:	87aa                	mv	a5,a0
   1e638:	ff550713          	addi	a4,a0,-11
   1e63c:	4475                	li	s0,29
   1e63e:	ff878493          	addi	s1,a5,-8 # 7ffff8 <GPIO_PINS_5+0x5ffff8>
   1e642:	8c19                	sub	s0,s0,a4
   1e644:	009999b3          	sll	s3,s3,s1
   1e648:	008a5433          	srl	s0,s4,s0
   1e64c:	01346433          	or	s0,s0,s3
   1e650:	009a14b3          	sll	s1,s4,s1
   1e654:	0146d713          	srli	a4,a3,0x14
   1e658:	c0d00913          	li	s2,-1011
   1e65c:	00c69a13          	slli	s4,a3,0xc
   1e660:	7ff77713          	andi	a4,a4,2047
   1e664:	40f90933          	sub	s2,s2,a5
   1e668:	4981                	li	s3,0
   1e66a:	4b81                	li	s7,0
   1e66c:	85b2                	mv	a1,a2
   1e66e:	00ca5a13          	srli	s4,s4,0xc
   1e672:	01f6db13          	srli	s6,a3,0x1f
   1e676:	ee0719e3          	bnez	a4,1e568 <__muldf3+0x6e>
   1e67a:	00ca67b3          	or	a5,s4,a2
   1e67e:	c7b1                	beqz	a5,1e6ca <__muldf3+0x1d0>
   1e680:	220a0f63          	beqz	s4,1e8be <__muldf3+0x3c4>
   1e684:	8552                	mv	a0,s4
   1e686:	c432                	sw	a2,8(sp)
   1e688:	3c5000ef          	jal	ra,1f24c <__clzsi2>
   1e68c:	4622                	lw	a2,8(sp)
   1e68e:	872a                	mv	a4,a0
   1e690:	ff550693          	addi	a3,a0,-11
   1e694:	47f5                	li	a5,29
   1e696:	ff870593          	addi	a1,a4,-8
   1e69a:	8f95                	sub	a5,a5,a3
   1e69c:	00ba1a33          	sll	s4,s4,a1
   1e6a0:	00f657b3          	srl	a5,a2,a5
   1e6a4:	0147e7b3          	or	a5,a5,s4
   1e6a8:	00b615b3          	sll	a1,a2,a1
   1e6ac:	40e90933          	sub	s2,s2,a4
   1e6b0:	c0d90913          	addi	s2,s2,-1011
   1e6b4:	4881                	li	a7,0
   1e6b6:	bde1                	j	1e58e <__muldf3+0x94>
   1e6b8:	00a9e433          	or	s0,s3,a0
   1e6bc:	ec01                	bnez	s0,1e6d4 <__muldf3+0x1da>
   1e6be:	49a1                	li	s3,8
   1e6c0:	4481                	li	s1,0
   1e6c2:	7ff00913          	li	s2,2047
   1e6c6:	4b89                	li	s7,2
   1e6c8:	b559                	j	1e54e <__muldf3+0x54>
   1e6ca:	0019e993          	ori	s3,s3,1
   1e6ce:	4581                	li	a1,0
   1e6d0:	4885                	li	a7,1
   1e6d2:	bd75                	j	1e58e <__muldf3+0x94>
   1e6d4:	844e                	mv	s0,s3
   1e6d6:	84aa                	mv	s1,a0
   1e6d8:	49b1                	li	s3,12
   1e6da:	7ff00913          	li	s2,2047
   1e6de:	4b8d                	li	s7,3
   1e6e0:	b5bd                	j	1e54e <__muldf3+0x54>
   1e6e2:	4991                	li	s3,4
   1e6e4:	4481                	li	s1,0
   1e6e6:	4901                	li	s2,0
   1e6e8:	4b85                	li	s7,1
   1e6ea:	b595                	j	1e54e <__muldf3+0x54>
   1e6ec:	0039e993          	ori	s3,s3,3
   1e6f0:	87d2                	mv	a5,s4
   1e6f2:	488d                	li	a7,3
   1e6f4:	bd69                	j	1e58e <__muldf3+0x94>
   1e6f6:	4789                	li	a5,2
   1e6f8:	8556                	mv	a0,s5
   1e6fa:	f0fb97e3          	bne	s7,a5,1e608 <__muldf3+0x10e>
   1e6fe:	872a                	mv	a4,a0
   1e700:	7ff00793          	li	a5,2047
   1e704:	4401                	li	s0,0
   1e706:	4481                	li	s1,0
   1e708:	b5f1                	j	1e5d4 <__muldf3+0xda>
   1e70a:	6ec1                	lui	t4,0x10
   1e70c:	fffe8613          	addi	a2,t4,-1 # ffff <GPIO_PINS_3+0xdfff>
   1e710:	0104d693          	srli	a3,s1,0x10
   1e714:	0105de13          	srli	t3,a1,0x10
   1e718:	8cf1                	and	s1,s1,a2
   1e71a:	8df1                	and	a1,a1,a2
   1e71c:	02958633          	mul	a2,a1,s1
   1e720:	02b68333          	mul	t1,a3,a1
   1e724:	01065893          	srli	a7,a2,0x10
   1e728:	029e0533          	mul	a0,t3,s1
   1e72c:	951a                	add	a0,a0,t1
   1e72e:	98aa                	add	a7,a7,a0
   1e730:	03c682b3          	mul	t0,a3,t3
   1e734:	0068f363          	bgeu	a7,t1,1e73a <__muldf3+0x240>
   1e738:	92f6                	add	t0,t0,t4
   1e73a:	6fc1                	lui	t6,0x10
   1e73c:	ffff8313          	addi	t1,t6,-1 # ffff <GPIO_PINS_3+0xdfff>
   1e740:	0067f533          	and	a0,a5,t1
   1e744:	0107d393          	srli	t2,a5,0x10
   1e748:	0068f7b3          	and	a5,a7,t1
   1e74c:	07c2                	slli	a5,a5,0x10
   1e74e:	00667333          	and	t1,a2,t1
   1e752:	933e                	add	t1,t1,a5
   1e754:	02950633          	mul	a2,a0,s1
   1e758:	0108d893          	srli	a7,a7,0x10
   1e75c:	02a687b3          	mul	a5,a3,a0
   1e760:	01065f13          	srli	t5,a2,0x10
   1e764:	029384b3          	mul	s1,t2,s1
   1e768:	94be                	add	s1,s1,a5
   1e76a:	94fa                	add	s1,s1,t5
   1e76c:	02768eb3          	mul	t4,a3,t2
   1e770:	00f4f363          	bgeu	s1,a5,1e776 <__muldf3+0x27c>
   1e774:	9efe                	add	t4,t4,t6
   1e776:	6a41                	lui	s4,0x10
   1e778:	fffa0793          	addi	a5,s4,-1 # ffff <GPIO_PINS_3+0xdfff>
   1e77c:	01045f93          	srli	t6,s0,0x10
   1e780:	00f476b3          	and	a3,s0,a5
   1e784:	00f4f9b3          	and	s3,s1,a5
   1e788:	8e7d                	and	a2,a2,a5
   1e78a:	80c1                	srli	s1,s1,0x10
   1e78c:	02d58433          	mul	s0,a1,a3
   1e790:	09c2                	slli	s3,s3,0x10
   1e792:	01d48f33          	add	t5,s1,t4
   1e796:	99b2                	add	s3,s3,a2
   1e798:	98ce                	add	a7,a7,s3
   1e79a:	02de07b3          	mul	a5,t3,a3
   1e79e:	01045e93          	srli	t4,s0,0x10
   1e7a2:	02bf85b3          	mul	a1,t6,a1
   1e7a6:	97ae                	add	a5,a5,a1
   1e7a8:	9ebe                	add	t4,t4,a5
   1e7aa:	03fe0e33          	mul	t3,t3,t6
   1e7ae:	00bef363          	bgeu	t4,a1,1e7b4 <__muldf3+0x2ba>
   1e7b2:	9e52                	add	t3,t3,s4
   1e7b4:	67c1                	lui	a5,0x10
   1e7b6:	fff78593          	addi	a1,a5,-1 # ffff <GPIO_PINS_3+0xdfff>
   1e7ba:	00bef633          	and	a2,t4,a1
   1e7be:	8c6d                	and	s0,s0,a1
   1e7c0:	0642                	slli	a2,a2,0x10
   1e7c2:	9622                	add	a2,a2,s0
   1e7c4:	010ede93          	srli	t4,t4,0x10
   1e7c8:	02d505b3          	mul	a1,a0,a3
   1e7cc:	9e76                	add	t3,t3,t4
   1e7ce:	02af8533          	mul	a0,t6,a0
   1e7d2:	0105d413          	srli	s0,a1,0x10
   1e7d6:	02d386b3          	mul	a3,t2,a3
   1e7da:	96aa                	add	a3,a3,a0
   1e7dc:	96a2                	add	a3,a3,s0
   1e7de:	03f38fb3          	mul	t6,t2,t6
   1e7e2:	00a6f363          	bgeu	a3,a0,1e7e8 <__muldf3+0x2ee>
   1e7e6:	9fbe                	add	t6,t6,a5
   1e7e8:	6541                	lui	a0,0x10
   1e7ea:	157d                	addi	a0,a0,-1
   1e7ec:	00a6f7b3          	and	a5,a3,a0
   1e7f0:	07c2                	slli	a5,a5,0x10
   1e7f2:	8d6d                	and	a0,a0,a1
   1e7f4:	97aa                	add	a5,a5,a0
   1e7f6:	005885b3          	add	a1,a7,t0
   1e7fa:	0135b9b3          	sltu	s3,a1,s3
   1e7fe:	97fa                	add	a5,a5,t5
   1e800:	95b2                	add	a1,a1,a2
   1e802:	01378433          	add	s0,a5,s3
   1e806:	00c5b633          	sltu	a2,a1,a2
   1e80a:	01c40eb3          	add	t4,s0,t3
   1e80e:	00ce8533          	add	a0,t4,a2
   1e812:	01343433          	sltu	s0,s0,s3
   1e816:	01e7b7b3          	sltu	a5,a5,t5
   1e81a:	8fc1                	or	a5,a5,s0
   1e81c:	01cebe33          	sltu	t3,t4,t3
   1e820:	0106d413          	srli	s0,a3,0x10
   1e824:	00c53633          	sltu	a2,a0,a2
   1e828:	943e                	add	s0,s0,a5
   1e82a:	00ce6633          	or	a2,t3,a2
   1e82e:	00959493          	slli	s1,a1,0x9
   1e832:	9432                	add	s0,s0,a2
   1e834:	947e                	add	s0,s0,t6
   1e836:	0064e4b3          	or	s1,s1,t1
   1e83a:	0426                	slli	s0,s0,0x9
   1e83c:	01755693          	srli	a3,a0,0x17
   1e840:	009034b3          	snez	s1,s1
   1e844:	81dd                	srli	a1,a1,0x17
   1e846:	00951793          	slli	a5,a0,0x9
   1e84a:	8ccd                	or	s1,s1,a1
   1e84c:	8c55                	or	s0,s0,a3
   1e84e:	8cdd                	or	s1,s1,a5
   1e850:	00741793          	slli	a5,s0,0x7
   1e854:	0007db63          	bgez	a5,1e86a <__muldf3+0x370>
   1e858:	0014d793          	srli	a5,s1,0x1
   1e85c:	8885                	andi	s1,s1,1
   1e85e:	01f41693          	slli	a3,s0,0x1f
   1e862:	8cdd                	or	s1,s1,a5
   1e864:	8cd5                	or	s1,s1,a3
   1e866:	8005                	srli	s0,s0,0x1
   1e868:	8942                	mv	s2,a6
   1e86a:	3ff90793          	addi	a5,s2,1023
   1e86e:	08f05963          	blez	a5,1e900 <__muldf3+0x406>
   1e872:	0074f693          	andi	a3,s1,7
   1e876:	ce81                	beqz	a3,1e88e <__muldf3+0x394>
   1e878:	00f4f693          	andi	a3,s1,15
   1e87c:	4611                	li	a2,4
   1e87e:	00c68863          	beq	a3,a2,1e88e <__muldf3+0x394>
   1e882:	00448693          	addi	a3,s1,4
   1e886:	0096b4b3          	sltu	s1,a3,s1
   1e88a:	9426                	add	s0,s0,s1
   1e88c:	84b6                	mv	s1,a3
   1e88e:	00741693          	slli	a3,s0,0x7
   1e892:	0006d863          	bgez	a3,1e8a2 <__muldf3+0x3a8>
   1e896:	ff0007b7          	lui	a5,0xff000
   1e89a:	17fd                	addi	a5,a5,-1
   1e89c:	8c7d                	and	s0,s0,a5
   1e89e:	40090793          	addi	a5,s2,1024
   1e8a2:	7fe00693          	li	a3,2046
   1e8a6:	0ef6cf63          	blt	a3,a5,1e9a4 <__muldf3+0x4aa>
   1e8aa:	0034d693          	srli	a3,s1,0x3
   1e8ae:	01d41493          	slli	s1,s0,0x1d
   1e8b2:	0426                	slli	s0,s0,0x9
   1e8b4:	8cd5                	or	s1,s1,a3
   1e8b6:	8031                	srli	s0,s0,0xc
   1e8b8:	7ff7f793          	andi	a5,a5,2047
   1e8bc:	bb21                	j	1e5d4 <__muldf3+0xda>
   1e8be:	8532                	mv	a0,a2
   1e8c0:	c432                	sw	a2,8(sp)
   1e8c2:	18b000ef          	jal	ra,1f24c <__clzsi2>
   1e8c6:	01550693          	addi	a3,a0,21 # 10015 <GPIO_PINS_3+0xe015>
   1e8ca:	47f1                	li	a5,28
   1e8cc:	02050713          	addi	a4,a0,32
   1e8d0:	4622                	lw	a2,8(sp)
   1e8d2:	dcd7d1e3          	bge	a5,a3,1e694 <__muldf3+0x19a>
   1e8d6:	1561                	addi	a0,a0,-8
   1e8d8:	00a617b3          	sll	a5,a2,a0
   1e8dc:	4581                	li	a1,0
   1e8de:	b3f9                	j	1e6ac <__muldf3+0x1b2>
   1e8e0:	16d000ef          	jal	ra,1f24c <__clzsi2>
   1e8e4:	01550713          	addi	a4,a0,21
   1e8e8:	45f1                	li	a1,28
   1e8ea:	02050793          	addi	a5,a0,32
   1e8ee:	4622                	lw	a2,8(sp)
   1e8f0:	46b2                	lw	a3,12(sp)
   1e8f2:	d4e5d5e3          	bge	a1,a4,1e63c <__muldf3+0x142>
   1e8f6:	1561                	addi	a0,a0,-8
   1e8f8:	00aa1433          	sll	s0,s4,a0
   1e8fc:	4481                	li	s1,0
   1e8fe:	bb99                	j	1e654 <__muldf3+0x15a>
   1e900:	4685                	li	a3,1
   1e902:	8e9d                	sub	a3,a3,a5
   1e904:	e7b1                	bnez	a5,1e950 <__muldf3+0x456>
   1e906:	41e90913          	addi	s2,s2,1054
   1e90a:	012497b3          	sll	a5,s1,s2
   1e90e:	00d4d4b3          	srl	s1,s1,a3
   1e912:	01241933          	sll	s2,s0,s2
   1e916:	00f037b3          	snez	a5,a5
   1e91a:	009964b3          	or	s1,s2,s1
   1e91e:	8cdd                	or	s1,s1,a5
   1e920:	0074f793          	andi	a5,s1,7
   1e924:	00d456b3          	srl	a3,s0,a3
   1e928:	cf81                	beqz	a5,1e940 <__muldf3+0x446>
   1e92a:	00f4f793          	andi	a5,s1,15
   1e92e:	4611                	li	a2,4
   1e930:	00c78863          	beq	a5,a2,1e940 <__muldf3+0x446>
   1e934:	00448793          	addi	a5,s1,4
   1e938:	0097b4b3          	sltu	s1,a5,s1
   1e93c:	96a6                	add	a3,a3,s1
   1e93e:	84be                	mv	s1,a5
   1e940:	00869793          	slli	a5,a3,0x8
   1e944:	0407d863          	bgez	a5,1e994 <__muldf3+0x49a>
   1e948:	4785                	li	a5,1
   1e94a:	4401                	li	s0,0
   1e94c:	4481                	li	s1,0
   1e94e:	b159                	j	1e5d4 <__muldf3+0xda>
   1e950:	03800613          	li	a2,56
   1e954:	ccd641e3          	blt	a2,a3,1e616 <__muldf3+0x11c>
   1e958:	467d                	li	a2,31
   1e95a:	fad656e3          	bge	a2,a3,1e906 <__muldf3+0x40c>
   1e95e:	5605                	li	a2,-31
   1e960:	40f607b3          	sub	a5,a2,a5
   1e964:	02000593          	li	a1,32
   1e968:	00f45633          	srl	a2,s0,a5
   1e96c:	00b68763          	beq	a3,a1,1e97a <__muldf3+0x480>
   1e970:	43e90913          	addi	s2,s2,1086
   1e974:	012417b3          	sll	a5,s0,s2
   1e978:	8cdd                	or	s1,s1,a5
   1e97a:	009034b3          	snez	s1,s1
   1e97e:	8cd1                	or	s1,s1,a2
   1e980:	0074f693          	andi	a3,s1,7
   1e984:	4401                	li	s0,0
   1e986:	ca99                	beqz	a3,1e99c <__muldf3+0x4a2>
   1e988:	00f4f793          	andi	a5,s1,15
   1e98c:	4611                	li	a2,4
   1e98e:	4681                	li	a3,0
   1e990:	fac792e3          	bne	a5,a2,1e934 <__muldf3+0x43a>
   1e994:	00969413          	slli	s0,a3,0x9
   1e998:	8031                	srli	s0,s0,0xc
   1e99a:	06f6                	slli	a3,a3,0x1d
   1e99c:	808d                	srli	s1,s1,0x3
   1e99e:	8cd5                	or	s1,s1,a3
   1e9a0:	4781                	li	a5,0
   1e9a2:	b90d                	j	1e5d4 <__muldf3+0xda>
   1e9a4:	7ff00793          	li	a5,2047
   1e9a8:	4401                	li	s0,0
   1e9aa:	4481                	li	s1,0
   1e9ac:	b125                	j	1e5d4 <__muldf3+0xda>
   1e9ae:	8942                	mv	s2,a6
   1e9b0:	bd6d                	j	1e86a <__muldf3+0x370>

0001e9b2 <__subdf3>:
__subdf3():
   1e9b2:	00100737          	lui	a4,0x100
   1e9b6:	177d                	addi	a4,a4,-1
   1e9b8:	1101                	addi	sp,sp,-32
   1e9ba:	00b77333          	and	t1,a4,a1
   1e9be:	0146d893          	srli	a7,a3,0x14
   1e9c2:	8f75                	and	a4,a4,a3
   1e9c4:	01d65e93          	srli	t4,a2,0x1d
   1e9c8:	cc22                	sw	s0,24(sp)
   1e9ca:	ca26                	sw	s1,20(sp)
   1e9cc:	030e                	slli	t1,t1,0x3
   1e9ce:	0145d493          	srli	s1,a1,0x14
   1e9d2:	01d55793          	srli	a5,a0,0x1d
   1e9d6:	070e                	slli	a4,a4,0x3
   1e9d8:	ce06                	sw	ra,28(sp)
   1e9da:	c84a                	sw	s2,16(sp)
   1e9dc:	c64e                	sw	s3,12(sp)
   1e9de:	7ff8f893          	andi	a7,a7,2047
   1e9e2:	7ff00e13          	li	t3,2047
   1e9e6:	00eee733          	or	a4,t4,a4
   1e9ea:	7ff4f493          	andi	s1,s1,2047
   1e9ee:	01f5d413          	srli	s0,a1,0x1f
   1e9f2:	0067e333          	or	t1,a5,t1
   1e9f6:	00351f13          	slli	t5,a0,0x3
   1e9fa:	82fd                	srli	a3,a3,0x1f
   1e9fc:	00361e93          	slli	t4,a2,0x3
   1ea00:	17c88f63          	beq	a7,t3,1eb7e <__subdf3+0x1cc>
   1ea04:	0016c693          	xori	a3,a3,1
   1ea08:	411485b3          	sub	a1,s1,a7
   1ea0c:	12d40463          	beq	s0,a3,1eb34 <__subdf3+0x182>
   1ea10:	18b05063          	blez	a1,1eb90 <__subdf3+0x1de>
   1ea14:	1a088a63          	beqz	a7,1ebc8 <__subdf3+0x216>
   1ea18:	008007b7          	lui	a5,0x800
   1ea1c:	8f5d                	or	a4,a4,a5
   1ea1e:	57c48f63          	beq	s1,t3,1ef9c <__subdf3+0x5ea>
   1ea22:	03800793          	li	a5,56
   1ea26:	34b7c263          	blt	a5,a1,1ed6a <__subdf3+0x3b8>
   1ea2a:	47fd                	li	a5,31
   1ea2c:	48b7c363          	blt	a5,a1,1eeb2 <__subdf3+0x500>
   1ea30:	02000793          	li	a5,32
   1ea34:	8f8d                	sub	a5,a5,a1
   1ea36:	00bed9b3          	srl	s3,t4,a1
   1ea3a:	00f71833          	sll	a6,a4,a5
   1ea3e:	00fe9eb3          	sll	t4,t4,a5
   1ea42:	01386833          	or	a6,a6,s3
   1ea46:	00b75733          	srl	a4,a4,a1
   1ea4a:	01d039b3          	snez	s3,t4
   1ea4e:	01386833          	or	a6,a6,s3
   1ea52:	40e30333          	sub	t1,t1,a4
   1ea56:	410f09b3          	sub	s3,t5,a6
   1ea5a:	013f37b3          	sltu	a5,t5,s3
   1ea5e:	40f30633          	sub	a2,t1,a5
   1ea62:	00861793          	slli	a5,a2,0x8
   1ea66:	2407d263          	bgez	a5,1ecaa <__subdf3+0x2f8>
   1ea6a:	00800937          	lui	s2,0x800
   1ea6e:	197d                	addi	s2,s2,-1
   1ea70:	01267933          	and	s2,a2,s2
   1ea74:	2c090e63          	beqz	s2,1ed50 <__subdf3+0x39e>
   1ea78:	854a                	mv	a0,s2
   1ea7a:	2fc9                	jal	1f24c <__clzsi2>
   1ea7c:	ff850713          	addi	a4,a0,-8
   1ea80:	02000793          	li	a5,32
   1ea84:	8f99                	sub	a5,a5,a4
   1ea86:	00f9d7b3          	srl	a5,s3,a5
   1ea8a:	00e91633          	sll	a2,s2,a4
   1ea8e:	8fd1                	or	a5,a5,a2
   1ea90:	00e999b3          	sll	s3,s3,a4
   1ea94:	2a974463          	blt	a4,s1,1ed3c <__subdf3+0x38a>
   1ea98:	8f05                	sub	a4,a4,s1
   1ea9a:	00170613          	addi	a2,a4,1 # 100001 <DELAY_NUM+0xbdc1>
   1ea9e:	46fd                	li	a3,31
   1eaa0:	3ac6c463          	blt	a3,a2,1ee48 <__subdf3+0x496>
   1eaa4:	02000713          	li	a4,32
   1eaa8:	8f11                	sub	a4,a4,a2
   1eaaa:	00c9d6b3          	srl	a3,s3,a2
   1eaae:	00e99833          	sll	a6,s3,a4
   1eab2:	00e79733          	sll	a4,a5,a4
   1eab6:	8f55                	or	a4,a4,a3
   1eab8:	01003833          	snez	a6,a6
   1eabc:	010769b3          	or	s3,a4,a6
   1eac0:	00c7d633          	srl	a2,a5,a2
   1eac4:	4481                	li	s1,0
   1eac6:	0079f793          	andi	a5,s3,7
   1eaca:	cf81                	beqz	a5,1eae2 <__subdf3+0x130>
   1eacc:	00f9f693          	andi	a3,s3,15
   1ead0:	4791                	li	a5,4
   1ead2:	00f68863          	beq	a3,a5,1eae2 <__subdf3+0x130>
   1ead6:	00498693          	addi	a3,s3,4
   1eada:	0136b833          	sltu	a6,a3,s3
   1eade:	9642                	add	a2,a2,a6
   1eae0:	89b6                	mv	s3,a3
   1eae2:	00861793          	slli	a5,a2,0x8
   1eae6:	1c07d663          	bgez	a5,1ecb2 <__subdf3+0x300>
   1eaea:	00148713          	addi	a4,s1,1
   1eaee:	7ff00793          	li	a5,2047
   1eaf2:	8805                	andi	s0,s0,1
   1eaf4:	20f70663          	beq	a4,a5,1ed00 <__subdf3+0x34e>
   1eaf8:	ff8007b7          	lui	a5,0xff800
   1eafc:	17fd                	addi	a5,a5,-1
   1eafe:	8ff1                	and	a5,a5,a2
   1eb00:	01d79813          	slli	a6,a5,0x1d
   1eb04:	0039d993          	srli	s3,s3,0x3
   1eb08:	07a6                	slli	a5,a5,0x9
   1eb0a:	01386833          	or	a6,a6,s3
   1eb0e:	83b1                	srli	a5,a5,0xc
   1eb10:	7ff77713          	andi	a4,a4,2047
   1eb14:	00c79693          	slli	a3,a5,0xc
   1eb18:	0752                	slli	a4,a4,0x14
   1eb1a:	82b1                	srli	a3,a3,0xc
   1eb1c:	047e                	slli	s0,s0,0x1f
   1eb1e:	8ed9                	or	a3,a3,a4
   1eb20:	8ec1                	or	a3,a3,s0
   1eb22:	40f2                	lw	ra,28(sp)
   1eb24:	4462                	lw	s0,24(sp)
   1eb26:	44d2                	lw	s1,20(sp)
   1eb28:	4942                	lw	s2,16(sp)
   1eb2a:	49b2                	lw	s3,12(sp)
   1eb2c:	8542                	mv	a0,a6
   1eb2e:	85b6                	mv	a1,a3
   1eb30:	6105                	addi	sp,sp,32
   1eb32:	8082                	ret
   1eb34:	0ab05663          	blez	a1,1ebe0 <__subdf3+0x22e>
   1eb38:	12088a63          	beqz	a7,1ec6c <__subdf3+0x2ba>
   1eb3c:	008007b7          	lui	a5,0x800
   1eb40:	8f5d                	or	a4,a4,a5
   1eb42:	2dc48663          	beq	s1,t3,1ee0e <__subdf3+0x45c>
   1eb46:	03800793          	li	a5,56
   1eb4a:	18b7c763          	blt	a5,a1,1ecd8 <__subdf3+0x326>
   1eb4e:	47fd                	li	a5,31
   1eb50:	3cb7d163          	bge	a5,a1,1ef12 <__subdf3+0x560>
   1eb54:	fe058813          	addi	a6,a1,-32
   1eb58:	02000793          	li	a5,32
   1eb5c:	010759b3          	srl	s3,a4,a6
   1eb60:	00f58a63          	beq	a1,a5,1eb74 <__subdf3+0x1c2>
   1eb64:	04000793          	li	a5,64
   1eb68:	40b785b3          	sub	a1,a5,a1
   1eb6c:	00b71733          	sll	a4,a4,a1
   1eb70:	00eeeeb3          	or	t4,t4,a4
   1eb74:	01d03833          	snez	a6,t4
   1eb78:	01386833          	or	a6,a6,s3
   1eb7c:	a295                	j	1ece0 <__subdf3+0x32e>
   1eb7e:	01d767b3          	or	a5,a4,t4
   1eb82:	80148593          	addi	a1,s1,-2047
   1eb86:	e399                	bnez	a5,1eb8c <__subdf3+0x1da>
   1eb88:	0016c693          	xori	a3,a3,1
   1eb8c:	04d40a63          	beq	s0,a3,1ebe0 <__subdf3+0x22e>
   1eb90:	e1d1                	bnez	a1,1ec14 <__subdf3+0x262>
   1eb92:	00148793          	addi	a5,s1,1
   1eb96:	7fe7f793          	andi	a5,a5,2046
   1eb9a:	1e079863          	bnez	a5,1ed8a <__subdf3+0x3d8>
   1eb9e:	01e367b3          	or	a5,t1,t5
   1eba2:	01d76833          	or	a6,a4,t4
   1eba6:	16049263          	bnez	s1,1ed0a <__subdf3+0x358>
   1ebaa:	3c078163          	beqz	a5,1ef6c <__subdf3+0x5ba>
   1ebae:	42081563          	bnez	a6,1efd8 <__subdf3+0x626>
   1ebb2:	00351813          	slli	a6,a0,0x3
   1ebb6:	01d31693          	slli	a3,t1,0x1d
   1ebba:	00385813          	srli	a6,a6,0x3
   1ebbe:	0106e833          	or	a6,a3,a6
   1ebc2:	00335793          	srli	a5,t1,0x3
   1ebc6:	a219                	j	1eccc <__subdf3+0x31a>
   1ebc8:	01d767b3          	or	a5,a4,t4
   1ebcc:	1a078463          	beqz	a5,1ed74 <__subdf3+0x3c2>
   1ebd0:	fff58793          	addi	a5,a1,-1
   1ebd4:	3a078a63          	beqz	a5,1ef88 <__subdf3+0x5d6>
   1ebd8:	23c58b63          	beq	a1,t3,1ee0e <__subdf3+0x45c>
   1ebdc:	85be                	mv	a1,a5
   1ebde:	b591                	j	1ea22 <__subdf3+0x70>
   1ebe0:	1c059863          	bnez	a1,1edb0 <__subdf3+0x3fe>
   1ebe4:	00148693          	addi	a3,s1,1
   1ebe8:	7fe6f793          	andi	a5,a3,2046
   1ebec:	efc1                	bnez	a5,1ec84 <__subdf3+0x2d2>
   1ebee:	01e367b3          	or	a5,t1,t5
   1ebf2:	34049f63          	bnez	s1,1ef50 <__subdf3+0x59e>
   1ebf6:	44078c63          	beqz	a5,1f04e <__subdf3+0x69c>
   1ebfa:	01d767b3          	or	a5,a4,t4
   1ebfe:	46079363          	bnez	a5,1f064 <__subdf3+0x6b2>
   1ec02:	050e                	slli	a0,a0,0x3
   1ec04:	01d31813          	slli	a6,t1,0x1d
   1ec08:	810d                	srli	a0,a0,0x3
   1ec0a:	00a86833          	or	a6,a6,a0
   1ec0e:	00335793          	srli	a5,t1,0x3
   1ec12:	a86d                	j	1eccc <__subdf3+0x31a>
   1ec14:	409885b3          	sub	a1,a7,s1
   1ec18:	20049663          	bnez	s1,1ee24 <__subdf3+0x472>
   1ec1c:	01e367b3          	or	a5,t1,t5
   1ec20:	30078c63          	beqz	a5,1ef38 <__subdf3+0x586>
   1ec24:	fff58793          	addi	a5,a1,-1
   1ec28:	40078863          	beqz	a5,1f038 <__subdf3+0x686>
   1ec2c:	7ff00513          	li	a0,2047
   1ec30:	20a58263          	beq	a1,a0,1ee34 <__subdf3+0x482>
   1ec34:	85be                	mv	a1,a5
   1ec36:	03800793          	li	a5,56
   1ec3a:	2ab7c163          	blt	a5,a1,1eedc <__subdf3+0x52a>
   1ec3e:	47fd                	li	a5,31
   1ec40:	3cb7c763          	blt	a5,a1,1f00e <__subdf3+0x65c>
   1ec44:	02000793          	li	a5,32
   1ec48:	8f8d                	sub	a5,a5,a1
   1ec4a:	00f31833          	sll	a6,t1,a5
   1ec4e:	00bf5633          	srl	a2,t5,a1
   1ec52:	00ff17b3          	sll	a5,t5,a5
   1ec56:	00c86833          	or	a6,a6,a2
   1ec5a:	00f039b3          	snez	s3,a5
   1ec5e:	00b35333          	srl	t1,t1,a1
   1ec62:	01386833          	or	a6,a6,s3
   1ec66:	40670733          	sub	a4,a4,t1
   1ec6a:	acad                	j	1eee4 <__subdf3+0x532>
   1ec6c:	01d767b3          	or	a5,a4,t4
   1ec70:	10078263          	beqz	a5,1ed74 <__subdf3+0x3c2>
   1ec74:	fff58793          	addi	a5,a1,-1
   1ec78:	1e078e63          	beqz	a5,1ee74 <__subdf3+0x4c2>
   1ec7c:	2dc58f63          	beq	a1,t3,1ef5a <__subdf3+0x5a8>
   1ec80:	85be                	mv	a1,a5
   1ec82:	b5d1                	j	1eb46 <__subdf3+0x194>
   1ec84:	7ff00793          	li	a5,2047
   1ec88:	06f68b63          	beq	a3,a5,1ecfe <__subdf3+0x34c>
   1ec8c:	9efa                	add	t4,t4,t5
   1ec8e:	01eeb633          	sltu	a2,t4,t5
   1ec92:	00e307b3          	add	a5,t1,a4
   1ec96:	97b2                	add	a5,a5,a2
   1ec98:	01f79813          	slli	a6,a5,0x1f
   1ec9c:	001ede93          	srli	t4,t4,0x1
   1eca0:	01d869b3          	or	s3,a6,t4
   1eca4:	0017d613          	srli	a2,a5,0x1
   1eca8:	84b6                	mv	s1,a3
   1ecaa:	0079f793          	andi	a5,s3,7
   1ecae:	e0079fe3          	bnez	a5,1eacc <__subdf3+0x11a>
   1ecb2:	01d61793          	slli	a5,a2,0x1d
   1ecb6:	0039d813          	srli	a6,s3,0x3
   1ecba:	00f86833          	or	a6,a6,a5
   1ecbe:	85a6                	mv	a1,s1
   1ecc0:	00365793          	srli	a5,a2,0x3
   1ecc4:	7ff00713          	li	a4,2047
   1ecc8:	06e58063          	beq	a1,a4,1ed28 <__subdf3+0x376>
   1eccc:	07b2                	slli	a5,a5,0xc
   1ecce:	83b1                	srli	a5,a5,0xc
   1ecd0:	7ff5f713          	andi	a4,a1,2047
   1ecd4:	8805                	andi	s0,s0,1
   1ecd6:	bd3d                	j	1eb14 <__subdf3+0x162>
   1ecd8:	01d76733          	or	a4,a4,t4
   1ecdc:	00e03833          	snez	a6,a4
   1ece0:	01e809b3          	add	s3,a6,t5
   1ece4:	01e9b7b3          	sltu	a5,s3,t5
   1ece8:	00678633          	add	a2,a5,t1
   1ecec:	00861793          	slli	a5,a2,0x8
   1ecf0:	fa07dde3          	bgez	a5,1ecaa <__subdf3+0x2f8>
   1ecf4:	0485                	addi	s1,s1,1
   1ecf6:	7ff00793          	li	a5,2047
   1ecfa:	18f49b63          	bne	s1,a5,1ee90 <__subdf3+0x4de>
   1ecfe:	8805                	andi	s0,s0,1
   1ed00:	7ff00713          	li	a4,2047
   1ed04:	4781                	li	a5,0
   1ed06:	4801                	li	a6,0
   1ed08:	b531                	j	1eb14 <__subdf3+0x162>
   1ed0a:	10079063          	bnez	a5,1ee0a <__subdf3+0x458>
   1ed0e:	3c080063          	beqz	a6,1f0ce <__subdf3+0x71c>
   1ed12:	00361813          	slli	a6,a2,0x3
   1ed16:	01d71793          	slli	a5,a4,0x1d
   1ed1a:	00385813          	srli	a6,a6,0x3
   1ed1e:	00f86833          	or	a6,a6,a5
   1ed22:	8436                	mv	s0,a3
   1ed24:	00375793          	srli	a5,a4,0x3
   1ed28:	00f867b3          	or	a5,a6,a5
   1ed2c:	dbe9                	beqz	a5,1ecfe <__subdf3+0x34c>
   1ed2e:	4401                	li	s0,0
   1ed30:	7ff00713          	li	a4,2047
   1ed34:	000807b7          	lui	a5,0x80
   1ed38:	4801                	li	a6,0
   1ed3a:	bbe9                	j	1eb14 <__subdf3+0x162>
   1ed3c:	ff800637          	lui	a2,0xff800
   1ed40:	167d                	addi	a2,a2,-1
   1ed42:	8e7d                	and	a2,a2,a5
   1ed44:	0079f793          	andi	a5,s3,7
   1ed48:	8c99                	sub	s1,s1,a4
   1ed4a:	d80791e3          	bnez	a5,1eacc <__subdf3+0x11a>
   1ed4e:	b795                	j	1ecb2 <__subdf3+0x300>
   1ed50:	854e                	mv	a0,s3
   1ed52:	29ed                	jal	1f24c <__clzsi2>
   1ed54:	01850713          	addi	a4,a0,24
   1ed58:	47fd                	li	a5,31
   1ed5a:	d2e7d3e3          	bge	a5,a4,1ea80 <__subdf3+0xce>
   1ed5e:	ff850613          	addi	a2,a0,-8
   1ed62:	00c997b3          	sll	a5,s3,a2
   1ed66:	4981                	li	s3,0
   1ed68:	b335                	j	1ea94 <__subdf3+0xe2>
   1ed6a:	01d76833          	or	a6,a4,t4
   1ed6e:	01003833          	snez	a6,a6
   1ed72:	b1d5                	j	1ea56 <__subdf3+0xa4>
   1ed74:	00351813          	slli	a6,a0,0x3
   1ed78:	01d31793          	slli	a5,t1,0x1d
   1ed7c:	00385813          	srli	a6,a6,0x3
   1ed80:	00f86833          	or	a6,a6,a5
   1ed84:	00335793          	srli	a5,t1,0x3
   1ed88:	bf35                	j	1ecc4 <__subdf3+0x312>
   1ed8a:	41df09b3          	sub	s3,t5,t4
   1ed8e:	40e30933          	sub	s2,t1,a4
   1ed92:	013f3633          	sltu	a2,t5,s3
   1ed96:	40c90933          	sub	s2,s2,a2
   1ed9a:	00891793          	slli	a5,s2,0x8
   1ed9e:	2007ca63          	bltz	a5,1efb2 <__subdf3+0x600>
   1eda2:	0129e833          	or	a6,s3,s2
   1eda6:	cc0817e3          	bnez	a6,1ea74 <__subdf3+0xc2>
   1edaa:	4781                	li	a5,0
   1edac:	4401                	li	s0,0
   1edae:	bf39                	j	1eccc <__subdf3+0x31a>
   1edb0:	409885b3          	sub	a1,a7,s1
   1edb4:	14048163          	beqz	s1,1eef6 <__subdf3+0x544>
   1edb8:	008006b7          	lui	a3,0x800
   1edbc:	7ff00793          	li	a5,2047
   1edc0:	00d36333          	or	t1,t1,a3
   1edc4:	20f88163          	beq	a7,a5,1efc6 <__subdf3+0x614>
   1edc8:	03800793          	li	a5,56
   1edcc:	22b7cc63          	blt	a5,a1,1f004 <__subdf3+0x652>
   1edd0:	47fd                	li	a5,31
   1edd2:	2cb7c963          	blt	a5,a1,1f0a4 <__subdf3+0x6f2>
   1edd6:	02000793          	li	a5,32
   1edda:	8f8d                	sub	a5,a5,a1
   1eddc:	00f31833          	sll	a6,t1,a5
   1ede0:	00bf56b3          	srl	a3,t5,a1
   1ede4:	00ff17b3          	sll	a5,t5,a5
   1ede8:	00d86833          	or	a6,a6,a3
   1edec:	00f039b3          	snez	s3,a5
   1edf0:	00b35333          	srl	t1,t1,a1
   1edf4:	01386833          	or	a6,a6,s3
   1edf8:	971a                	add	a4,a4,t1
   1edfa:	01d809b3          	add	s3,a6,t4
   1edfe:	01d9b7b3          	sltu	a5,s3,t4
   1ee02:	00e78633          	add	a2,a5,a4
   1ee06:	84c6                	mv	s1,a7
   1ee08:	b5d5                	j	1ecec <__subdf3+0x33a>
   1ee0a:	f20812e3          	bnez	a6,1ed2e <__subdf3+0x37c>
   1ee0e:	00351813          	slli	a6,a0,0x3
   1ee12:	01d31793          	slli	a5,t1,0x1d
   1ee16:	00385813          	srli	a6,a6,0x3
   1ee1a:	00f86833          	or	a6,a6,a5
   1ee1e:	00335793          	srli	a5,t1,0x3
   1ee22:	b719                	j	1ed28 <__subdf3+0x376>
   1ee24:	00800537          	lui	a0,0x800
   1ee28:	7ff00793          	li	a5,2047
   1ee2c:	00a36333          	or	t1,t1,a0
   1ee30:	e0f893e3          	bne	a7,a5,1ec36 <__subdf3+0x284>
   1ee34:	060e                	slli	a2,a2,0x3
   1ee36:	01d71813          	slli	a6,a4,0x1d
   1ee3a:	820d                	srli	a2,a2,0x3
   1ee3c:	00c86833          	or	a6,a6,a2
   1ee40:	00375793          	srli	a5,a4,0x3
   1ee44:	8436                	mv	s0,a3
   1ee46:	b5cd                	j	1ed28 <__subdf3+0x376>
   1ee48:	1705                	addi	a4,a4,-31
   1ee4a:	02000693          	li	a3,32
   1ee4e:	00e7d733          	srl	a4,a5,a4
   1ee52:	00d60a63          	beq	a2,a3,1ee66 <__subdf3+0x4b4>
   1ee56:	04000693          	li	a3,64
   1ee5a:	40c68633          	sub	a2,a3,a2
   1ee5e:	00c79633          	sll	a2,a5,a2
   1ee62:	00c9e9b3          	or	s3,s3,a2
   1ee66:	01303833          	snez	a6,s3
   1ee6a:	00e869b3          	or	s3,a6,a4
   1ee6e:	4601                	li	a2,0
   1ee70:	4481                	li	s1,0
   1ee72:	bd25                	j	1ecaa <__subdf3+0x2f8>
   1ee74:	01df09b3          	add	s3,t5,t4
   1ee78:	00e307b3          	add	a5,t1,a4
   1ee7c:	01e9bf33          	sltu	t5,s3,t5
   1ee80:	01e78633          	add	a2,a5,t5
   1ee84:	00861793          	slli	a5,a2,0x8
   1ee88:	4485                	li	s1,1
   1ee8a:	e207d0e3          	bgez	a5,1ecaa <__subdf3+0x2f8>
   1ee8e:	4489                	li	s1,2
   1ee90:	ff8007b7          	lui	a5,0xff800
   1ee94:	17fd                	addi	a5,a5,-1
   1ee96:	8ff1                	and	a5,a5,a2
   1ee98:	0019d713          	srli	a4,s3,0x1
   1ee9c:	0019f813          	andi	a6,s3,1
   1eea0:	01076833          	or	a6,a4,a6
   1eea4:	01f79993          	slli	s3,a5,0x1f
   1eea8:	0109e9b3          	or	s3,s3,a6
   1eeac:	0017d613          	srli	a2,a5,0x1
   1eeb0:	b919                	j	1eac6 <__subdf3+0x114>
   1eeb2:	fe058813          	addi	a6,a1,-32
   1eeb6:	02000793          	li	a5,32
   1eeba:	010759b3          	srl	s3,a4,a6
   1eebe:	00f58a63          	beq	a1,a5,1eed2 <__subdf3+0x520>
   1eec2:	04000793          	li	a5,64
   1eec6:	40b785b3          	sub	a1,a5,a1
   1eeca:	00b71733          	sll	a4,a4,a1
   1eece:	00eeeeb3          	or	t4,t4,a4
   1eed2:	01d03833          	snez	a6,t4
   1eed6:	01386833          	or	a6,a6,s3
   1eeda:	beb5                	j	1ea56 <__subdf3+0xa4>
   1eedc:	01e36333          	or	t1,t1,t5
   1eee0:	00603833          	snez	a6,t1
   1eee4:	410e89b3          	sub	s3,t4,a6
   1eee8:	013eb7b3          	sltu	a5,t4,s3
   1eeec:	40f70633          	sub	a2,a4,a5
   1eef0:	84c6                	mv	s1,a7
   1eef2:	8436                	mv	s0,a3
   1eef4:	b6bd                	j	1ea62 <__subdf3+0xb0>
   1eef6:	01e367b3          	or	a5,t1,t5
   1eefa:	18078763          	beqz	a5,1f088 <__subdf3+0x6d6>
   1eefe:	fff58793          	addi	a5,a1,-1
   1ef02:	1c078c63          	beqz	a5,1f0da <__subdf3+0x728>
   1ef06:	7ff00693          	li	a3,2047
   1ef0a:	0ad58e63          	beq	a1,a3,1efc6 <__subdf3+0x614>
   1ef0e:	85be                	mv	a1,a5
   1ef10:	bd65                	j	1edc8 <__subdf3+0x416>
   1ef12:	02000793          	li	a5,32
   1ef16:	8f8d                	sub	a5,a5,a1
   1ef18:	00bed9b3          	srl	s3,t4,a1
   1ef1c:	00f71833          	sll	a6,a4,a5
   1ef20:	00fe9eb3          	sll	t4,t4,a5
   1ef24:	01386833          	or	a6,a6,s3
   1ef28:	00b75733          	srl	a4,a4,a1
   1ef2c:	01d039b3          	snez	s3,t4
   1ef30:	01386833          	or	a6,a6,s3
   1ef34:	933a                	add	t1,t1,a4
   1ef36:	b36d                	j	1ece0 <__subdf3+0x32e>
   1ef38:	00361813          	slli	a6,a2,0x3
   1ef3c:	01d71793          	slli	a5,a4,0x1d
   1ef40:	00385813          	srli	a6,a6,0x3
   1ef44:	0107e833          	or	a6,a5,a6
   1ef48:	8436                	mv	s0,a3
   1ef4a:	00375793          	srli	a5,a4,0x3
   1ef4e:	bb9d                	j	1ecc4 <__subdf3+0x312>
   1ef50:	cbbd                	beqz	a5,1efc6 <__subdf3+0x614>
   1ef52:	01d76733          	or	a4,a4,t4
   1ef56:	dc071ce3          	bnez	a4,1ed2e <__subdf3+0x37c>
   1ef5a:	050e                	slli	a0,a0,0x3
   1ef5c:	01d31813          	slli	a6,t1,0x1d
   1ef60:	810d                	srli	a0,a0,0x3
   1ef62:	00a86833          	or	a6,a6,a0
   1ef66:	00335793          	srli	a5,t1,0x3
   1ef6a:	bb7d                	j	1ed28 <__subdf3+0x376>
   1ef6c:	e2080fe3          	beqz	a6,1edaa <__subdf3+0x3f8>
   1ef70:	00361813          	slli	a6,a2,0x3
   1ef74:	01d71793          	slli	a5,a4,0x1d
   1ef78:	00385813          	srli	a6,a6,0x3
   1ef7c:	00f86833          	or	a6,a6,a5
   1ef80:	8436                	mv	s0,a3
   1ef82:	00375793          	srli	a5,a4,0x3
   1ef86:	b399                	j	1eccc <__subdf3+0x31a>
   1ef88:	41df09b3          	sub	s3,t5,t4
   1ef8c:	40e307b3          	sub	a5,t1,a4
   1ef90:	013f3f33          	sltu	t5,t5,s3
   1ef94:	41e78633          	sub	a2,a5,t5
   1ef98:	4485                	li	s1,1
   1ef9a:	b4e1                	j	1ea62 <__subdf3+0xb0>
   1ef9c:	00351813          	slli	a6,a0,0x3
   1efa0:	01d31693          	slli	a3,t1,0x1d
   1efa4:	00385813          	srli	a6,a6,0x3
   1efa8:	0106e833          	or	a6,a3,a6
   1efac:	00335793          	srli	a5,t1,0x3
   1efb0:	bba5                	j	1ed28 <__subdf3+0x376>
   1efb2:	41ee89b3          	sub	s3,t4,t5
   1efb6:	40670633          	sub	a2,a4,t1
   1efba:	013eb933          	sltu	s2,t4,s3
   1efbe:	41260933          	sub	s2,a2,s2
   1efc2:	8436                	mv	s0,a3
   1efc4:	bc45                	j	1ea74 <__subdf3+0xc2>
   1efc6:	060e                	slli	a2,a2,0x3
   1efc8:	01d71813          	slli	a6,a4,0x1d
   1efcc:	820d                	srli	a2,a2,0x3
   1efce:	00c86833          	or	a6,a6,a2
   1efd2:	00375793          	srli	a5,a4,0x3
   1efd6:	bb89                	j	1ed28 <__subdf3+0x376>
   1efd8:	41df09b3          	sub	s3,t5,t4
   1efdc:	40e307b3          	sub	a5,t1,a4
   1efe0:	013f3633          	sltu	a2,t5,s3
   1efe4:	40c78633          	sub	a2,a5,a2
   1efe8:	00861793          	slli	a5,a2,0x8
   1efec:	0a07d763          	bgez	a5,1f09a <__subdf3+0x6e8>
   1eff0:	41ee89b3          	sub	s3,t4,t5
   1eff4:	406707b3          	sub	a5,a4,t1
   1eff8:	013ebeb3          	sltu	t4,t4,s3
   1effc:	41d78633          	sub	a2,a5,t4
   1f000:	8436                	mv	s0,a3
   1f002:	b4d1                	j	1eac6 <__subdf3+0x114>
   1f004:	01e36333          	or	t1,t1,t5
   1f008:	00603833          	snez	a6,t1
   1f00c:	b3fd                	j	1edfa <__subdf3+0x448>
   1f00e:	fe058813          	addi	a6,a1,-32
   1f012:	02000793          	li	a5,32
   1f016:	010359b3          	srl	s3,t1,a6
   1f01a:	00f58a63          	beq	a1,a5,1f02e <__subdf3+0x67c>
   1f01e:	04000793          	li	a5,64
   1f022:	40b785b3          	sub	a1,a5,a1
   1f026:	00b31333          	sll	t1,t1,a1
   1f02a:	006f6f33          	or	t5,t5,t1
   1f02e:	01e03833          	snez	a6,t5
   1f032:	01386833          	or	a6,a6,s3
   1f036:	b57d                	j	1eee4 <__subdf3+0x532>
   1f038:	41ee89b3          	sub	s3,t4,t5
   1f03c:	406707b3          	sub	a5,a4,t1
   1f040:	013ebeb3          	sltu	t4,t4,s3
   1f044:	41d78633          	sub	a2,a5,t4
   1f048:	8436                	mv	s0,a3
   1f04a:	4485                	li	s1,1
   1f04c:	bc19                	j	1ea62 <__subdf3+0xb0>
   1f04e:	00361813          	slli	a6,a2,0x3
   1f052:	01d71793          	slli	a5,a4,0x1d
   1f056:	00385813          	srli	a6,a6,0x3
   1f05a:	00f86833          	or	a6,a6,a5
   1f05e:	00375793          	srli	a5,a4,0x3
   1f062:	b1ad                	j	1eccc <__subdf3+0x31a>
   1f064:	01df09b3          	add	s3,t5,t4
   1f068:	00e307b3          	add	a5,t1,a4
   1f06c:	01e9bf33          	sltu	t5,s3,t5
   1f070:	01e78633          	add	a2,a5,t5
   1f074:	00861793          	slli	a5,a2,0x8
   1f078:	c207d9e3          	bgez	a5,1ecaa <__subdf3+0x2f8>
   1f07c:	ff8007b7          	lui	a5,0xff800
   1f080:	17fd                	addi	a5,a5,-1
   1f082:	8e7d                	and	a2,a2,a5
   1f084:	4485                	li	s1,1
   1f086:	b115                	j	1ecaa <__subdf3+0x2f8>
   1f088:	060e                	slli	a2,a2,0x3
   1f08a:	01d71813          	slli	a6,a4,0x1d
   1f08e:	820d                	srli	a2,a2,0x3
   1f090:	00c86833          	or	a6,a6,a2
   1f094:	00375793          	srli	a5,a4,0x3
   1f098:	b135                	j	1ecc4 <__subdf3+0x312>
   1f09a:	00c9e833          	or	a6,s3,a2
   1f09e:	d00806e3          	beqz	a6,1edaa <__subdf3+0x3f8>
   1f0a2:	b121                	j	1ecaa <__subdf3+0x2f8>
   1f0a4:	fe058813          	addi	a6,a1,-32
   1f0a8:	02000793          	li	a5,32
   1f0ac:	010359b3          	srl	s3,t1,a6
   1f0b0:	00f58a63          	beq	a1,a5,1f0c4 <__subdf3+0x712>
   1f0b4:	04000793          	li	a5,64
   1f0b8:	40b785b3          	sub	a1,a5,a1
   1f0bc:	00b31333          	sll	t1,t1,a1
   1f0c0:	006f6f33          	or	t5,t5,t1
   1f0c4:	01e03833          	snez	a6,t5
   1f0c8:	01386833          	or	a6,a6,s3
   1f0cc:	b33d                	j	1edfa <__subdf3+0x448>
   1f0ce:	4401                	li	s0,0
   1f0d0:	7ff00713          	li	a4,2047
   1f0d4:	000807b7          	lui	a5,0x80
   1f0d8:	bc35                	j	1eb14 <__subdf3+0x162>
   1f0da:	01df09b3          	add	s3,t5,t4
   1f0de:	00e307b3          	add	a5,t1,a4
   1f0e2:	01d9beb3          	sltu	t4,s3,t4
   1f0e6:	01d78633          	add	a2,a5,t4
   1f0ea:	bb69                	j	1ee84 <__subdf3+0x4d2>

0001f0ec <__fixunsdfsi>:
__fixunsdfsi():
   1f0ec:	0145d793          	srli	a5,a1,0x14
   1f0f0:	001006b7          	lui	a3,0x100
   1f0f4:	fff68713          	addi	a4,a3,-1 # fffff <DELAY_NUM+0xbdbf>
   1f0f8:	7ff7f793          	andi	a5,a5,2047
   1f0fc:	3fe00613          	li	a2,1022
   1f100:	882a                	mv	a6,a0
   1f102:	8f6d                	and	a4,a4,a1
   1f104:	4501                	li	a0,0
   1f106:	81fd                	srli	a1,a1,0x1f
   1f108:	00f65463          	bge	a2,a5,1f110 <__fixunsdfsi+0x24>
   1f10c:	c199                	beqz	a1,1f112 <__fixunsdfsi+0x26>
   1f10e:	8082                	ret
   1f110:	8082                	ret
   1f112:	41e00613          	li	a2,1054
   1f116:	557d                	li	a0,-1
   1f118:	fef64be3          	blt	a2,a5,1f10e <__fixunsdfsi+0x22>
   1f11c:	43300513          	li	a0,1075
   1f120:	8d1d                	sub	a0,a0,a5
   1f122:	467d                	li	a2,31
   1f124:	8f55                	or	a4,a4,a3
   1f126:	00a64a63          	blt	a2,a0,1f13a <__fixunsdfsi+0x4e>
   1f12a:	bed78793          	addi	a5,a5,-1043 # 7fbed <GPIO_PINS_4+0x5fbed>
   1f12e:	00f71733          	sll	a4,a4,a5
   1f132:	00a85533          	srl	a0,a6,a0
   1f136:	8d59                	or	a0,a0,a4
   1f138:	8082                	ret
   1f13a:	41300513          	li	a0,1043
   1f13e:	40f507b3          	sub	a5,a0,a5
   1f142:	00f75533          	srl	a0,a4,a5
   1f146:	8082                	ret

0001f148 <__floatunsidf>:
__floatunsidf():
   1f148:	cd15                	beqz	a0,1f184 <__floatunsidf+0x3c>
   1f14a:	1141                	addi	sp,sp,-16
   1f14c:	c422                	sw	s0,8(sp)
   1f14e:	c606                	sw	ra,12(sp)
   1f150:	842a                	mv	s0,a0
   1f152:	28ed                	jal	1f24c <__clzsi2>
   1f154:	41e00693          	li	a3,1054
   1f158:	8e89                	sub	a3,a3,a0
   1f15a:	47a9                	li	a5,10
   1f15c:	7ff6f693          	andi	a3,a3,2047
   1f160:	02a7dc63          	bge	a5,a0,1f198 <__floatunsidf+0x50>
   1f164:	1555                	addi	a0,a0,-11
   1f166:	00a417b3          	sll	a5,s0,a0
   1f16a:	07b2                	slli	a5,a5,0xc
   1f16c:	83b1                	srli	a5,a5,0xc
   1f16e:	4701                	li	a4,0
   1f170:	40b2                	lw	ra,12(sp)
   1f172:	4422                	lw	s0,8(sp)
   1f174:	07b2                	slli	a5,a5,0xc
   1f176:	06d2                	slli	a3,a3,0x14
   1f178:	83b1                	srli	a5,a5,0xc
   1f17a:	8fd5                	or	a5,a5,a3
   1f17c:	853a                	mv	a0,a4
   1f17e:	85be                	mv	a1,a5
   1f180:	0141                	addi	sp,sp,16
   1f182:	8082                	ret
   1f184:	4781                	li	a5,0
   1f186:	4681                	li	a3,0
   1f188:	07b2                	slli	a5,a5,0xc
   1f18a:	06d2                	slli	a3,a3,0x14
   1f18c:	83b1                	srli	a5,a5,0xc
   1f18e:	4701                	li	a4,0
   1f190:	8fd5                	or	a5,a5,a3
   1f192:	853a                	mv	a0,a4
   1f194:	85be                	mv	a1,a5
   1f196:	8082                	ret
   1f198:	472d                	li	a4,11
   1f19a:	8f09                	sub	a4,a4,a0
   1f19c:	00e457b3          	srl	a5,s0,a4
   1f1a0:	07b2                	slli	a5,a5,0xc
   1f1a2:	01550713          	addi	a4,a0,21 # 800015 <GPIO_PINS_5+0x600015>
   1f1a6:	00e41733          	sll	a4,s0,a4
   1f1aa:	83b1                	srli	a5,a5,0xc
   1f1ac:	b7d1                	j	1f170 <__floatunsidf+0x28>

0001f1ae <__fixunsdfdi>:
__fixunsdfdi():
   1f1ae:	0145d793          	srli	a5,a1,0x14
   1f1b2:	001006b7          	lui	a3,0x100
   1f1b6:	fff68713          	addi	a4,a3,-1 # fffff <DELAY_NUM+0xbdbf>
   1f1ba:	7ff7f793          	andi	a5,a5,2047
   1f1be:	3fe00613          	li	a2,1022
   1f1c2:	8f6d                	and	a4,a4,a1
   1f1c4:	81fd                	srli	a1,a1,0x1f
   1f1c6:	00f65363          	bge	a2,a5,1f1cc <__fixunsdfdi+0x1e>
   1f1ca:	c581                	beqz	a1,1f1d2 <__fixunsdfdi+0x24>
   1f1cc:	4501                	li	a0,0
   1f1ce:	4581                	li	a1,0
   1f1d0:	8082                	ret
   1f1d2:	43e00613          	li	a2,1086
   1f1d6:	00f65563          	bge	a2,a5,1f1e0 <__fixunsdfdi+0x32>
   1f1da:	557d                	li	a0,-1
   1f1dc:	55fd                	li	a1,-1
   1f1de:	8082                	ret
   1f1e0:	43200613          	li	a2,1074
   1f1e4:	00d765b3          	or	a1,a4,a3
   1f1e8:	00f65c63          	bge	a2,a5,1f200 <__fixunsdfdi+0x52>
   1f1ec:	bad78713          	addi	a4,a5,-1107
   1f1f0:	bcd78793          	addi	a5,a5,-1075
   1f1f4:	04074063          	bltz	a4,1f234 <__fixunsdfdi+0x86>
   1f1f8:	00e515b3          	sll	a1,a0,a4
   1f1fc:	4501                	li	a0,0
   1f1fe:	8082                	ret
   1f200:	43300693          	li	a3,1075
   1f204:	8e9d                	sub	a3,a3,a5
   1f206:	477d                	li	a4,31
   1f208:	00d75b63          	bge	a4,a3,1f21e <__fixunsdfdi+0x70>
   1f20c:	41300713          	li	a4,1043
   1f210:	40f707b3          	sub	a5,a4,a5
   1f214:	00f5d7b3          	srl	a5,a1,a5
   1f218:	4581                	li	a1,0
   1f21a:	853e                	mv	a0,a5
   1f21c:	8082                	ret
   1f21e:	bed78713          	addi	a4,a5,-1043
   1f222:	00e59733          	sll	a4,a1,a4
   1f226:	00d55533          	srl	a0,a0,a3
   1f22a:	00a767b3          	or	a5,a4,a0
   1f22e:	00d5d5b3          	srl	a1,a1,a3
   1f232:	b7e5                	j	1f21a <__fixunsdfdi+0x6c>
   1f234:	46fd                	li	a3,31
   1f236:	00155713          	srli	a4,a0,0x1
   1f23a:	8e9d                	sub	a3,a3,a5
   1f23c:	00d75733          	srl	a4,a4,a3
   1f240:	00f595b3          	sll	a1,a1,a5
   1f244:	8dd9                	or	a1,a1,a4
   1f246:	00f51533          	sll	a0,a0,a5
   1f24a:	8082                	ret

0001f24c <__clzsi2>:
__clzsi2():
   1f24c:	67c1                	lui	a5,0x10
   1f24e:	02f57e63          	bgeu	a0,a5,1f28a <__clzsi2+0x3e>
   1f252:	0ff00793          	li	a5,255
   1f256:	02000713          	li	a4,32
   1f25a:	00a7ec63          	bltu	a5,a0,1f272 <__clzsi2+0x26>
   1f25e:	00000797          	auipc	a5,0x0
   1f262:	2ba78793          	addi	a5,a5,698 # 1f518 <__clz_tab>
   1f266:	97aa                	add	a5,a5,a0
   1f268:	0007c503          	lbu	a0,0(a5)
   1f26c:	40a70533          	sub	a0,a4,a0
   1f270:	8082                	ret
   1f272:	8121                	srli	a0,a0,0x8
   1f274:	00000797          	auipc	a5,0x0
   1f278:	2a478793          	addi	a5,a5,676 # 1f518 <__clz_tab>
   1f27c:	97aa                	add	a5,a5,a0
   1f27e:	0007c503          	lbu	a0,0(a5)
   1f282:	4761                	li	a4,24
   1f284:	40a70533          	sub	a0,a4,a0
   1f288:	8082                	ret
   1f28a:	010007b7          	lui	a5,0x1000
   1f28e:	00f56e63          	bltu	a0,a5,1f2aa <__clzsi2+0x5e>
   1f292:	8161                	srli	a0,a0,0x18
   1f294:	00000797          	auipc	a5,0x0
   1f298:	28478793          	addi	a5,a5,644 # 1f518 <__clz_tab>
   1f29c:	97aa                	add	a5,a5,a0
   1f29e:	0007c503          	lbu	a0,0(a5)
   1f2a2:	4721                	li	a4,8
   1f2a4:	40a70533          	sub	a0,a4,a0
   1f2a8:	8082                	ret
   1f2aa:	8141                	srli	a0,a0,0x10
   1f2ac:	00000797          	auipc	a5,0x0
   1f2b0:	26c78793          	addi	a5,a5,620 # 1f518 <__clz_tab>
   1f2b4:	97aa                	add	a5,a5,a0
   1f2b6:	0007c503          	lbu	a0,0(a5)
   1f2ba:	4741                	li	a4,16
   1f2bc:	40a70533          	sub	a0,a4,a0
   1f2c0:	8082                	ret

0001f2c2 <memcpy>:
memcpy():
   1f2c2:	00a5c7b3          	xor	a5,a1,a0
   1f2c6:	8b8d                	andi	a5,a5,3
   1f2c8:	00c50733          	add	a4,a0,a2
   1f2cc:	e781                	bnez	a5,1f2d4 <memcpy+0x12>
   1f2ce:	478d                	li	a5,3
   1f2d0:	00c7ee63          	bltu	a5,a2,1f2ec <memcpy+0x2a>
   1f2d4:	87aa                	mv	a5,a0
   1f2d6:	0ae57063          	bgeu	a0,a4,1f376 <memcpy+0xb4>
   1f2da:	0005c683          	lbu	a3,0(a1)
   1f2de:	0785                	addi	a5,a5,1
   1f2e0:	0585                	addi	a1,a1,1
   1f2e2:	fed78fa3          	sb	a3,-1(a5)
   1f2e6:	fee7eae3          	bltu	a5,a4,1f2da <memcpy+0x18>
   1f2ea:	8082                	ret
   1f2ec:	00357693          	andi	a3,a0,3
   1f2f0:	87aa                	mv	a5,a0
   1f2f2:	ca91                	beqz	a3,1f306 <memcpy+0x44>
   1f2f4:	0005c683          	lbu	a3,0(a1)
   1f2f8:	0785                	addi	a5,a5,1
   1f2fa:	0585                	addi	a1,a1,1
   1f2fc:	fed78fa3          	sb	a3,-1(a5)
   1f300:	0037f693          	andi	a3,a5,3
   1f304:	b7fd                	j	1f2f2 <memcpy+0x30>
   1f306:	ffc77693          	andi	a3,a4,-4
   1f30a:	fe068613          	addi	a2,a3,-32
   1f30e:	06c7f063          	bgeu	a5,a2,1f36e <memcpy+0xac>
   1f312:	0005a383          	lw	t2,0(a1)
   1f316:	0045a283          	lw	t0,4(a1)
   1f31a:	0085af83          	lw	t6,8(a1)
   1f31e:	00c5af03          	lw	t5,12(a1)
   1f322:	0105ae83          	lw	t4,16(a1)
   1f326:	0145ae03          	lw	t3,20(a1)
   1f32a:	0185a303          	lw	t1,24(a1)
   1f32e:	01c5a883          	lw	a7,28(a1)
   1f332:	02458593          	addi	a1,a1,36
   1f336:	0077a023          	sw	t2,0(a5)
   1f33a:	ffc5a803          	lw	a6,-4(a1)
   1f33e:	0057a223          	sw	t0,4(a5)
   1f342:	01f7a423          	sw	t6,8(a5)
   1f346:	01e7a623          	sw	t5,12(a5)
   1f34a:	01d7a823          	sw	t4,16(a5)
   1f34e:	01c7aa23          	sw	t3,20(a5)
   1f352:	0067ac23          	sw	t1,24(a5)
   1f356:	0117ae23          	sw	a7,28(a5)
   1f35a:	02478793          	addi	a5,a5,36
   1f35e:	ff07ae23          	sw	a6,-4(a5)
   1f362:	b775                	j	1f30e <memcpy+0x4c>
   1f364:	4190                	lw	a2,0(a1)
   1f366:	0791                	addi	a5,a5,4
   1f368:	0591                	addi	a1,a1,4
   1f36a:	fec7ae23          	sw	a2,-4(a5)
   1f36e:	fed7ebe3          	bltu	a5,a3,1f364 <memcpy+0xa2>
   1f372:	f6e7e4e3          	bltu	a5,a4,1f2da <memcpy+0x18>
   1f376:	8082                	ret

0001f378 <strlen>:
strlen():
   1f378:	87aa                	mv	a5,a0
   1f37a:	0785                	addi	a5,a5,1
   1f37c:	fff7c703          	lbu	a4,-1(a5)
   1f380:	ff6d                	bnez	a4,1f37a <strlen+0x2>
   1f382:	40a78533          	sub	a0,a5,a0
   1f386:	157d                	addi	a0,a0,-1
   1f388:	8082                	ret
   1f38a:	0000                	unimp
   1f38c:	3130                	fld	fa2,96(a0)
   1f38e:	3332                	fld	ft6,296(sp)
   1f390:	3534                	fld	fa3,104(a0)
   1f392:	3736                	fld	fa4,360(sp)
   1f394:	3938                	fld	fa4,112(a0)
   1f396:	4241                	li	tp,16
   1f398:	46454443          	fmadd.q	fs0,fa0,ft4,fs0,rmm
   1f39c:	3032                	fld	ft0,296(sp)
   1f39e:	3032                	fld	ft0,296(sp)
   1f3a0:	3730                	fld	fa2,104(a4)
   1f3a2:	3631                	jal	1eeae <__subdf3+0x4fc>
   1f3a4:	0000                	unimp
   1f3a6:	0000                	unimp
   1f3a8:	2020                	fld	fs0,64(s0)
   1f3aa:	bea1                	j	1ef02 <__subdf3+0x550>
   1f3ac:	7355                	lui	t1,0xffff5
   1f3ae:	7265                	lui	tp,0xffff9
   1f3b0:	e1cc                	fsw	fa1,4(a1)
   1f3b2:	beca                	fsd	fs2,376(sp)
   1f3b4:	bfa1                	j	1f30c <memcpy+0x4a>
   1f3b6:	d0d6baa3          	0xd0d6baa3
   1f3ba:	cfb6                	sw	a3,220(sp)
   1f3bc:	ccbc                	sw	a5,88(s1)
   1f3be:	0a0dd0b3          	0xa0dd0b3
   1f3c2:	0000                	unimp
   1f3c4:	2020                	fld	fs0,64(s0)
   1f3c6:	bea1                	j	1ef1e <__subdf3+0x56c>
   1f3c8:	7355                	lui	t1,0xffff5
   1f3ca:	7265                	lui	tp,0xffff9
   1f3cc:	e1cc                	fsw	fa1,4(a1)
   1f3ce:	beca                	fsd	fs2,376(sp)
   1f3d0:	bfa1                	j	1f328 <memcpy+0x66>
   1f3d2:	abbdbaa3          	0xabbdbaa3
   1f3d6:	f8bd                	bnez	s1,1f34c <memcpy+0x8a>
   1f3d8:	ebc8                	fsw	fa0,20(a5)
   1f3da:	7355                	lui	t1,0xffff5
   1f3dc:	7265                	lui	tp,0xffff9
   1f3de:	c4b5                	beqz	s1,1f44a <strlen+0xd2>
   1f3e0:	616d                	addi	sp,sp,240
   1f3e2:	6e69                	lui	t3,0x1a
   1f3e4:	afba                	fsd	fa4,472(sp)
   1f3e6:	fdca                	fsw	fs2,248(sp)
   1f3e8:	b4d6                	fsd	fs5,104(sp)
   1f3ea:	d0d0                	sw	a2,36(s1)
   1f3ec:	2e2e                	fld	ft8,200(sp)
   1f3ee:	0d2e                	slli	s10,s10,0xb
   1f3f0:	0a0a                	slli	s4,s4,0x2
   1f3f2:	0000                	unimp
   1f3f4:	d7c8                	sw	a0,44(a5)
   1f3f6:	0001                	nop
   1f3f8:	d7e0                	sw	s0,108(a5)
   1f3fa:	0001                	nop
   1f3fc:	d7e0                	sw	s0,108(a5)
   1f3fe:	0001                	nop
   1f400:	d7d4                	sw	a3,44(a5)
   1f402:	0001                	nop
   1f404:	d7e0                	sw	s0,108(a5)
   1f406:	0001                	nop
   1f408:	d7e0                	sw	s0,108(a5)
   1f40a:	0001                	nop
   1f40c:	d7e0                	sw	s0,108(a5)
   1f40e:	0001                	nop
   1f410:	d7e0                	sw	s0,108(a5)
   1f412:	0001                	nop
   1f414:	d7e0                	sw	s0,108(a5)
   1f416:	0001                	nop
   1f418:	d7e0                	sw	s0,108(a5)
   1f41a:	0001                	nop
   1f41c:	d7e0                	sw	s0,108(a5)
   1f41e:	0001                	nop
   1f420:	d7c2                	sw	a6,236(sp)
   1f422:	0001                	nop
   1f424:	d7e0                	sw	s0,108(a5)
   1f426:	0001                	nop
   1f428:	d794                	sw	a3,40(a5)
   1f42a:	0001                	nop
   1f42c:	d7e0                	sw	s0,108(a5)
   1f42e:	0001                	nop
   1f430:	d7e0                	sw	s0,108(a5)
   1f432:	0001                	nop
   1f434:	d7ce                	sw	s3,236(sp)
   1f436:	0001                	nop
   1f438:	da34                	sw	a3,112(a2)
   1f43a:	0001                	nop
   1f43c:	dc24                	sw	s1,120(s0)
   1f43e:	0001                	nop
   1f440:	dc24                	sw	s1,120(s0)
   1f442:	0001                	nop
   1f444:	dc24                	sw	s1,120(s0)
   1f446:	0001                	nop
   1f448:	dc24                	sw	s1,120(s0)
   1f44a:	0001                	nop
   1f44c:	dc24                	sw	s1,120(s0)
   1f44e:	0001                	nop
   1f450:	dc24                	sw	s1,120(s0)
   1f452:	0001                	nop
   1f454:	dc24                	sw	s1,120(s0)
   1f456:	0001                	nop
   1f458:	dc24                	sw	s1,120(s0)
   1f45a:	0001                	nop
   1f45c:	dc24                	sw	s1,120(s0)
   1f45e:	0001                	nop
   1f460:	db1a                	sw	t1,180(sp)
   1f462:	0001                	nop
   1f464:	db9e                	sw	t2,244(sp)
   1f466:	0001                	nop
   1f468:	d8ae                	sw	a1,112(sp)
   1f46a:	0001                	nop
   1f46c:	dc24                	sw	s1,120(s0)
   1f46e:	0001                	nop
   1f470:	d94a                	sw	s2,176(sp)
   1f472:	0001                	nop
   1f474:	dc24                	sw	s1,120(s0)
   1f476:	0001                	nop
   1f478:	dc24                	sw	s1,120(s0)
   1f47a:	0001                	nop
   1f47c:	d8ae                	sw	a1,112(sp)
   1f47e:	0001                	nop
   1f480:	dc24                	sw	s1,120(s0)
   1f482:	0001                	nop
   1f484:	dc24                	sw	s1,120(s0)
   1f486:	0001                	nop
   1f488:	dc24                	sw	s1,120(s0)
   1f48a:	0001                	nop
   1f48c:	dc24                	sw	s1,120(s0)
   1f48e:	0001                	nop
   1f490:	dc18                	sw	a4,56(s0)
   1f492:	0001                	nop
   1f494:	dae4                	sw	s1,116(a3)
   1f496:	0001                	nop
   1f498:	db36                	sw	a3,180(sp)
   1f49a:	0001                	nop
   1f49c:	dc24                	sw	s1,120(s0)
   1f49e:	0001                	nop
   1f4a0:	dc24                	sw	s1,120(s0)
   1f4a2:	0001                	nop
   1f4a4:	dbb2                	sw	a2,244(sp)
   1f4a6:	0001                	nop
   1f4a8:	dc24                	sw	s1,120(s0)
   1f4aa:	0001                	nop
   1f4ac:	db52                	sw	s4,180(sp)
   1f4ae:	0001                	nop
   1f4b0:	dc24                	sw	s1,120(s0)
   1f4b2:	0001                	nop
   1f4b4:	dc24                	sw	s1,120(s0)
   1f4b6:	0001                	nop
   1f4b8:	da34                	sw	a3,112(a2)
   1f4ba:	0001                	nop
   1f4bc:	0000                	unimp
   1f4be:	0000                	unimp
   1f4c0:	a000                	fsd	fs0,0(s0)
   1f4c2:	85d8                	0x85d8
   1f4c4:	43763457          	0x43763457
   1f4c8:	0000                	unimp
   1f4ca:	0000                	unimp
   1f4cc:	0000                	unimp
   1f4ce:	4024                	lw	s1,64(s0)
   1f4d0:	0000                	unimp
   1f4d2:	0000                	unimp
   1f4d4:	0000                	unimp
   1f4d6:	3ff0                	fld	fa2,248(a5)
   1f4d8:	f232                	fsw	fa2,36(sp)
   1f4da:	ffff                	0xffff
   1f4dc:	f124                	fsw	fs1,96(a0)
   1f4de:	ffff                	0xffff
   1f4e0:	f124                	fsw	fs1,96(a0)
   1f4e2:	ffff                	0xffff
   1f4e4:	f122                	fsw	fs0,160(sp)
   1f4e6:	ffff                	0xffff
   1f4e8:	f12a                	fsw	fa0,160(sp)
   1f4ea:	ffff                	0xffff
   1f4ec:	f12a                	fsw	fa0,160(sp)
   1f4ee:	ffff                	0xffff
   1f4f0:	f0f0                	fsw	fa2,100(s1)
   1f4f2:	ffff                	0xffff
   1f4f4:	f122                	fsw	fs0,160(sp)
   1f4f6:	ffff                	0xffff
   1f4f8:	f12a                	fsw	fa0,160(sp)
   1f4fa:	ffff                	0xffff
   1f4fc:	f0f0                	fsw	fa2,100(s1)
   1f4fe:	ffff                	0xffff
   1f500:	f12a                	fsw	fa0,160(sp)
   1f502:	ffff                	0xffff
   1f504:	f122                	fsw	fs0,160(sp)
   1f506:	ffff                	0xffff
   1f508:	f21e                	fsw	ft7,36(sp)
   1f50a:	ffff                	0xffff
   1f50c:	f21e                	fsw	ft7,36(sp)
   1f50e:	ffff                	0xffff
   1f510:	f21e                	fsw	ft7,36(sp)
   1f512:	ffff                	0xffff
   1f514:	f0f0                	fsw	fa2,100(s1)
   1f516:	ffff                	0xffff

0001f518 <__clz_tab>:
   1f518:	0100 0202 0303 0303 0404 0404 0404 0404     ................
   1f528:	0505 0505 0505 0505 0505 0505 0505 0505     ................
   1f538:	0606 0606 0606 0606 0606 0606 0606 0606     ................
   1f548:	0606 0606 0606 0606 0606 0606 0606 0606     ................
   1f558:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   1f568:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   1f578:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   1f588:	0707 0707 0707 0707 0707 0707 0707 0707     ................
   1f598:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   1f5a8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   1f5b8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   1f5c8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   1f5d8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   1f5e8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   1f5f8:	0808 0808 0808 0808 0808 0808 0808 0808     ................
   1f608:	0808 0808 0808 0808 0808 0808 0808 0808     ................
